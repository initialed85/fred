/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// TaskAPIService TaskAPI service
type TaskAPIService service

type ApiDeleteTaskRequest struct {
	ctx        context.Context
	ApiService *TaskAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiDeleteTaskRequest) Depth(depth int64) ApiDeleteTaskRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteTaskRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTaskExecute(r)
}

/*
DeleteTask Method for DeleteTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiDeleteTaskRequest
*/
func (a *TaskAPIService) DeleteTask(ctx context.Context, primaryKey string) ApiDeleteTaskRequest {
	return ApiDeleteTaskRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *TaskAPIService) DeleteTaskExecute(r ApiDeleteTaskRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskAPIService.DeleteTask")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTaskRequest struct {
	ctx        context.Context
	ApiService *TaskAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiGetTaskRequest) Depth(depth int64) ApiGetTaskRequest {
	r.depth = &depth
	return r
}

func (r ApiGetTaskRequest) Execute() (*ResponseWithGenericOfTask, *http.Response, error) {
	return r.ApiService.GetTaskExecute(r)
}

/*
GetTask Method for GetTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiGetTaskRequest
*/
func (a *TaskAPIService) GetTask(ctx context.Context, primaryKey string) ApiGetTaskRequest {
	return ApiGetTaskRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfTask
func (a *TaskAPIService) GetTaskExecute(r ApiGetTaskRequest) (*ResponseWithGenericOfTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskAPIService.GetTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTasksRequest struct {
	ctx                                      context.Context
	ApiService                               *TaskAPIService
	limit                                    *int32
	offset                                   *int32
	depth                                    *int32
	idEq                                     *string
	idNe                                     *string
	idGt                                     *string
	idGte                                    *string
	idLt                                     *string
	idLte                                    *string
	idIn                                     *string
	idNotin                                  *string
	idLike                                   *string
	idNotlike                                *string
	idIlike                                  *string
	idNotilike                               *string
	idDesc                                   *string
	idAsc                                    *string
	createdAtEq                              *time.Time
	createdAtNe                              *time.Time
	createdAtGt                              *time.Time
	createdAtGte                             *time.Time
	createdAtLt                              *time.Time
	createdAtLte                             *time.Time
	createdAtIn                              *time.Time
	createdAtNotin                           *time.Time
	createdAtLike                            *time.Time
	createdAtNotlike                         *time.Time
	createdAtIlike                           *time.Time
	createdAtNotilike                        *time.Time
	createdAtDesc                            *string
	createdAtAsc                             *string
	updatedAtEq                              *time.Time
	updatedAtNe                              *time.Time
	updatedAtGt                              *time.Time
	updatedAtGte                             *time.Time
	updatedAtLt                              *time.Time
	updatedAtLte                             *time.Time
	updatedAtIn                              *time.Time
	updatedAtNotin                           *time.Time
	updatedAtLike                            *time.Time
	updatedAtNotlike                         *time.Time
	updatedAtIlike                           *time.Time
	updatedAtNotilike                        *time.Time
	updatedAtDesc                            *string
	updatedAtAsc                             *string
	deletedAtEq                              *time.Time
	deletedAtNe                              *time.Time
	deletedAtGt                              *time.Time
	deletedAtGte                             *time.Time
	deletedAtLt                              *time.Time
	deletedAtLte                             *time.Time
	deletedAtIn                              *time.Time
	deletedAtNotin                           *time.Time
	deletedAtLike                            *time.Time
	deletedAtNotlike                         *time.Time
	deletedAtIlike                           *time.Time
	deletedAtNotilike                        *time.Time
	deletedAtDesc                            *string
	deletedAtAsc                             *string
	nameEq                                   *string
	nameNe                                   *string
	nameGt                                   *string
	nameGte                                  *string
	nameLt                                   *string
	nameLte                                  *string
	nameIn                                   *string
	nameNotin                                *string
	nameLike                                 *string
	nameNotlike                              *string
	nameIlike                                *string
	nameNotilike                             *string
	nameDesc                                 *string
	nameAsc                                  *string
	platformEq                               *string
	platformNe                               *string
	platformGt                               *string
	platformGte                              *string
	platformLt                               *string
	platformLte                              *string
	platformIn                               *string
	platformNotin                            *string
	platformLike                             *string
	platformNotlike                          *string
	platformIlike                            *string
	platformNotilike                         *string
	platformDesc                             *string
	platformAsc                              *string
	imageEq                                  *string
	imageNe                                  *string
	imageGt                                  *string
	imageGte                                 *string
	imageLt                                  *string
	imageLte                                 *string
	imageIn                                  *string
	imageNotin                               *string
	imageLike                                *string
	imageNotlike                             *string
	imageIlike                               *string
	imageNotilike                            *string
	imageDesc                                *string
	imageAsc                                 *string
	scriptEq                                 *string
	scriptNe                                 *string
	scriptGt                                 *string
	scriptGte                                *string
	scriptLt                                 *string
	scriptLte                                *string
	scriptIn                                 *string
	scriptNotin                              *string
	scriptLike                               *string
	scriptNotlike                            *string
	scriptIlike                              *string
	scriptNotilike                           *string
	scriptDesc                               *string
	scriptAsc                                *string
	referencedByOutputTaskIdObjectsDesc      *string
	referencedByOutputTaskIdObjectsAsc       *string
	referencedByJobBuildTaskIdObjectsDesc    *string
	referencedByJobBuildTaskIdObjectsAsc     *string
	referencedByJobTestTaskIdObjectsDesc     *string
	referencedByJobTestTaskIdObjectsAsc      *string
	referencedByJobPublishTaskIdObjectsDesc  *string
	referencedByJobPublishTaskIdObjectsAsc   *string
	referencedByJobDeployTaskIdObjectsDesc   *string
	referencedByJobDeployTaskIdObjectsAsc    *string
	referencedByJobValidateTaskIdObjectsDesc *string
	referencedByJobValidateTaskIdObjectsAsc  *string
}

// SQL LIMIT operator
func (r ApiGetTasksRequest) Limit(limit int32) ApiGetTasksRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetTasksRequest) Offset(offset int32) ApiGetTasksRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetTasksRequest) Depth(depth int32) ApiGetTasksRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) IdEq(idEq string) ApiGetTasksRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) IdNe(idNe string) ApiGetTasksRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) IdGt(idGt string) ApiGetTasksRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) IdGte(idGte string) ApiGetTasksRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) IdLt(idLt string) ApiGetTasksRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) IdLte(idLte string) ApiGetTasksRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) IdIn(idIn string) ApiGetTasksRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) IdNotin(idNotin string) ApiGetTasksRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) IdLike(idLike string) ApiGetTasksRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) IdNotlike(idNotlike string) ApiGetTasksRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) IdIlike(idIlike string) ApiGetTasksRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) IdNotilike(idNotilike string) ApiGetTasksRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) IdDesc(idDesc string) ApiGetTasksRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) IdAsc(idAsc string) ApiGetTasksRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) CreatedAtEq(createdAtEq time.Time) ApiGetTasksRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) CreatedAtNe(createdAtNe time.Time) ApiGetTasksRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) CreatedAtGt(createdAtGt time.Time) ApiGetTasksRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) CreatedAtGte(createdAtGte time.Time) ApiGetTasksRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) CreatedAtLt(createdAtLt time.Time) ApiGetTasksRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) CreatedAtLte(createdAtLte time.Time) ApiGetTasksRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) CreatedAtIn(createdAtIn time.Time) ApiGetTasksRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetTasksRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) CreatedAtLike(createdAtLike time.Time) ApiGetTasksRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetTasksRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetTasksRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetTasksRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) CreatedAtDesc(createdAtDesc string) ApiGetTasksRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) CreatedAtAsc(createdAtAsc string) ApiGetTasksRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetTasksRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetTasksRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetTasksRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetTasksRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetTasksRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetTasksRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetTasksRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetTasksRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetTasksRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetTasksRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetTasksRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetTasksRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetTasksRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetTasksRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetTasksRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetTasksRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetTasksRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetTasksRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetTasksRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetTasksRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetTasksRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetTasksRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetTasksRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetTasksRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetTasksRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetTasksRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) DeletedAtDesc(deletedAtDesc string) ApiGetTasksRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) DeletedAtAsc(deletedAtAsc string) ApiGetTasksRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) NameEq(nameEq string) ApiGetTasksRequest {
	r.nameEq = &nameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) NameNe(nameNe string) ApiGetTasksRequest {
	r.nameNe = &nameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) NameGt(nameGt string) ApiGetTasksRequest {
	r.nameGt = &nameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) NameGte(nameGte string) ApiGetTasksRequest {
	r.nameGte = &nameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) NameLt(nameLt string) ApiGetTasksRequest {
	r.nameLt = &nameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) NameLte(nameLte string) ApiGetTasksRequest {
	r.nameLte = &nameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) NameIn(nameIn string) ApiGetTasksRequest {
	r.nameIn = &nameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) NameNotin(nameNotin string) ApiGetTasksRequest {
	r.nameNotin = &nameNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) NameLike(nameLike string) ApiGetTasksRequest {
	r.nameLike = &nameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) NameNotlike(nameNotlike string) ApiGetTasksRequest {
	r.nameNotlike = &nameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) NameIlike(nameIlike string) ApiGetTasksRequest {
	r.nameIlike = &nameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) NameNotilike(nameNotilike string) ApiGetTasksRequest {
	r.nameNotilike = &nameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) NameDesc(nameDesc string) ApiGetTasksRequest {
	r.nameDesc = &nameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) NameAsc(nameAsc string) ApiGetTasksRequest {
	r.nameAsc = &nameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) PlatformEq(platformEq string) ApiGetTasksRequest {
	r.platformEq = &platformEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) PlatformNe(platformNe string) ApiGetTasksRequest {
	r.platformNe = &platformNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) PlatformGt(platformGt string) ApiGetTasksRequest {
	r.platformGt = &platformGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) PlatformGte(platformGte string) ApiGetTasksRequest {
	r.platformGte = &platformGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) PlatformLt(platformLt string) ApiGetTasksRequest {
	r.platformLt = &platformLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) PlatformLte(platformLte string) ApiGetTasksRequest {
	r.platformLte = &platformLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) PlatformIn(platformIn string) ApiGetTasksRequest {
	r.platformIn = &platformIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) PlatformNotin(platformNotin string) ApiGetTasksRequest {
	r.platformNotin = &platformNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) PlatformLike(platformLike string) ApiGetTasksRequest {
	r.platformLike = &platformLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) PlatformNotlike(platformNotlike string) ApiGetTasksRequest {
	r.platformNotlike = &platformNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) PlatformIlike(platformIlike string) ApiGetTasksRequest {
	r.platformIlike = &platformIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) PlatformNotilike(platformNotilike string) ApiGetTasksRequest {
	r.platformNotilike = &platformNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) PlatformDesc(platformDesc string) ApiGetTasksRequest {
	r.platformDesc = &platformDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) PlatformAsc(platformAsc string) ApiGetTasksRequest {
	r.platformAsc = &platformAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) ImageEq(imageEq string) ApiGetTasksRequest {
	r.imageEq = &imageEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) ImageNe(imageNe string) ApiGetTasksRequest {
	r.imageNe = &imageNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) ImageGt(imageGt string) ApiGetTasksRequest {
	r.imageGt = &imageGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) ImageGte(imageGte string) ApiGetTasksRequest {
	r.imageGte = &imageGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) ImageLt(imageLt string) ApiGetTasksRequest {
	r.imageLt = &imageLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) ImageLte(imageLte string) ApiGetTasksRequest {
	r.imageLte = &imageLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) ImageIn(imageIn string) ApiGetTasksRequest {
	r.imageIn = &imageIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) ImageNotin(imageNotin string) ApiGetTasksRequest {
	r.imageNotin = &imageNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ImageLike(imageLike string) ApiGetTasksRequest {
	r.imageLike = &imageLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ImageNotlike(imageNotlike string) ApiGetTasksRequest {
	r.imageNotlike = &imageNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ImageIlike(imageIlike string) ApiGetTasksRequest {
	r.imageIlike = &imageIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ImageNotilike(imageNotilike string) ApiGetTasksRequest {
	r.imageNotilike = &imageNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ImageDesc(imageDesc string) ApiGetTasksRequest {
	r.imageDesc = &imageDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ImageAsc(imageAsc string) ApiGetTasksRequest {
	r.imageAsc = &imageAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTasksRequest) ScriptEq(scriptEq string) ApiGetTasksRequest {
	r.scriptEq = &scriptEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTasksRequest) ScriptNe(scriptNe string) ApiGetTasksRequest {
	r.scriptNe = &scriptNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTasksRequest) ScriptGt(scriptGt string) ApiGetTasksRequest {
	r.scriptGt = &scriptGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) ScriptGte(scriptGte string) ApiGetTasksRequest {
	r.scriptGte = &scriptGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTasksRequest) ScriptLt(scriptLt string) ApiGetTasksRequest {
	r.scriptLt = &scriptLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTasksRequest) ScriptLte(scriptLte string) ApiGetTasksRequest {
	r.scriptLte = &scriptLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) ScriptIn(scriptIn string) ApiGetTasksRequest {
	r.scriptIn = &scriptIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTasksRequest) ScriptNotin(scriptNotin string) ApiGetTasksRequest {
	r.scriptNotin = &scriptNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ScriptLike(scriptLike string) ApiGetTasksRequest {
	r.scriptLike = &scriptLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ScriptNotlike(scriptNotlike string) ApiGetTasksRequest {
	r.scriptNotlike = &scriptNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ScriptIlike(scriptIlike string) ApiGetTasksRequest {
	r.scriptIlike = &scriptIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTasksRequest) ScriptNotilike(scriptNotilike string) ApiGetTasksRequest {
	r.scriptNotilike = &scriptNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ScriptDesc(scriptDesc string) ApiGetTasksRequest {
	r.scriptDesc = &scriptDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ScriptAsc(scriptAsc string) ApiGetTasksRequest {
	r.scriptAsc = &scriptAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByOutputTaskIdObjectsDesc(referencedByOutputTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByOutputTaskIdObjectsDesc = &referencedByOutputTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByOutputTaskIdObjectsAsc(referencedByOutputTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByOutputTaskIdObjectsAsc = &referencedByOutputTaskIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobBuildTaskIdObjectsDesc(referencedByJobBuildTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByJobBuildTaskIdObjectsDesc = &referencedByJobBuildTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobBuildTaskIdObjectsAsc(referencedByJobBuildTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByJobBuildTaskIdObjectsAsc = &referencedByJobBuildTaskIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobTestTaskIdObjectsDesc(referencedByJobTestTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByJobTestTaskIdObjectsDesc = &referencedByJobTestTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobTestTaskIdObjectsAsc(referencedByJobTestTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByJobTestTaskIdObjectsAsc = &referencedByJobTestTaskIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobPublishTaskIdObjectsDesc(referencedByJobPublishTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByJobPublishTaskIdObjectsDesc = &referencedByJobPublishTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobPublishTaskIdObjectsAsc(referencedByJobPublishTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByJobPublishTaskIdObjectsAsc = &referencedByJobPublishTaskIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobDeployTaskIdObjectsDesc(referencedByJobDeployTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByJobDeployTaskIdObjectsDesc = &referencedByJobDeployTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobDeployTaskIdObjectsAsc(referencedByJobDeployTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByJobDeployTaskIdObjectsAsc = &referencedByJobDeployTaskIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobValidateTaskIdObjectsDesc(referencedByJobValidateTaskIdObjectsDesc string) ApiGetTasksRequest {
	r.referencedByJobValidateTaskIdObjectsDesc = &referencedByJobValidateTaskIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTasksRequest) ReferencedByJobValidateTaskIdObjectsAsc(referencedByJobValidateTaskIdObjectsAsc string) ApiGetTasksRequest {
	r.referencedByJobValidateTaskIdObjectsAsc = &referencedByJobValidateTaskIdObjectsAsc
	return r
}

func (r ApiGetTasksRequest) Execute() (*ResponseWithGenericOfTask, *http.Response, error) {
	return r.ApiService.GetTasksExecute(r)
}

/*
GetTasks Method for GetTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTasksRequest
*/
func (a *TaskAPIService) GetTasks(ctx context.Context) ApiGetTasksRequest {
	return ApiGetTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfTask
func (a *TaskAPIService) GetTasksExecute(r ApiGetTasksRequest) (*ResponseWithGenericOfTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskAPIService.GetTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.nameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__eq", r.nameEq, "form", "")
	}
	if r.nameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__ne", r.nameNe, "form", "")
	}
	if r.nameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__gt", r.nameGt, "form", "")
	}
	if r.nameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__gte", r.nameGte, "form", "")
	}
	if r.nameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__lt", r.nameLt, "form", "")
	}
	if r.nameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__lte", r.nameLte, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "")
	}
	if r.nameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notin", r.nameNotin, "form", "")
	}
	if r.nameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__like", r.nameLike, "form", "")
	}
	if r.nameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notlike", r.nameNotlike, "form", "")
	}
	if r.nameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__ilike", r.nameIlike, "form", "")
	}
	if r.nameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notilike", r.nameNotilike, "form", "")
	}
	if r.nameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__desc", r.nameDesc, "form", "")
	}
	if r.nameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__asc", r.nameAsc, "form", "")
	}
	if r.platformEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__eq", r.platformEq, "form", "")
	}
	if r.platformNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__ne", r.platformNe, "form", "")
	}
	if r.platformGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__gt", r.platformGt, "form", "")
	}
	if r.platformGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__gte", r.platformGte, "form", "")
	}
	if r.platformLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__lt", r.platformLt, "form", "")
	}
	if r.platformLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__lte", r.platformLte, "form", "")
	}
	if r.platformIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__in", r.platformIn, "form", "")
	}
	if r.platformNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__notin", r.platformNotin, "form", "")
	}
	if r.platformLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__like", r.platformLike, "form", "")
	}
	if r.platformNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__notlike", r.platformNotlike, "form", "")
	}
	if r.platformIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__ilike", r.platformIlike, "form", "")
	}
	if r.platformNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__notilike", r.platformNotilike, "form", "")
	}
	if r.platformDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__desc", r.platformDesc, "form", "")
	}
	if r.platformAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "platform__asc", r.platformAsc, "form", "")
	}
	if r.imageEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__eq", r.imageEq, "form", "")
	}
	if r.imageNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__ne", r.imageNe, "form", "")
	}
	if r.imageGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__gt", r.imageGt, "form", "")
	}
	if r.imageGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__gte", r.imageGte, "form", "")
	}
	if r.imageLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__lt", r.imageLt, "form", "")
	}
	if r.imageLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__lte", r.imageLte, "form", "")
	}
	if r.imageIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__in", r.imageIn, "form", "")
	}
	if r.imageNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__notin", r.imageNotin, "form", "")
	}
	if r.imageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__like", r.imageLike, "form", "")
	}
	if r.imageNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__notlike", r.imageNotlike, "form", "")
	}
	if r.imageIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__ilike", r.imageIlike, "form", "")
	}
	if r.imageNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__notilike", r.imageNotilike, "form", "")
	}
	if r.imageDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__desc", r.imageDesc, "form", "")
	}
	if r.imageAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "image__asc", r.imageAsc, "form", "")
	}
	if r.scriptEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__eq", r.scriptEq, "form", "")
	}
	if r.scriptNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__ne", r.scriptNe, "form", "")
	}
	if r.scriptGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__gt", r.scriptGt, "form", "")
	}
	if r.scriptGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__gte", r.scriptGte, "form", "")
	}
	if r.scriptLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__lt", r.scriptLt, "form", "")
	}
	if r.scriptLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__lte", r.scriptLte, "form", "")
	}
	if r.scriptIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__in", r.scriptIn, "form", "")
	}
	if r.scriptNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__notin", r.scriptNotin, "form", "")
	}
	if r.scriptLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__like", r.scriptLike, "form", "")
	}
	if r.scriptNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__notlike", r.scriptNotlike, "form", "")
	}
	if r.scriptIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__ilike", r.scriptIlike, "form", "")
	}
	if r.scriptNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__notilike", r.scriptNotilike, "form", "")
	}
	if r.scriptDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__desc", r.scriptDesc, "form", "")
	}
	if r.scriptAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "script__asc", r.scriptAsc, "form", "")
	}
	if r.referencedByOutputTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_output_task_id_objects__desc", r.referencedByOutputTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByOutputTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_output_task_id_objects__asc", r.referencedByOutputTaskIdObjectsAsc, "form", "")
	}
	if r.referencedByJobBuildTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_build_task_id_objects__desc", r.referencedByJobBuildTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByJobBuildTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_build_task_id_objects__asc", r.referencedByJobBuildTaskIdObjectsAsc, "form", "")
	}
	if r.referencedByJobTestTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_test_task_id_objects__desc", r.referencedByJobTestTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByJobTestTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_test_task_id_objects__asc", r.referencedByJobTestTaskIdObjectsAsc, "form", "")
	}
	if r.referencedByJobPublishTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_publish_task_id_objects__desc", r.referencedByJobPublishTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByJobPublishTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_publish_task_id_objects__asc", r.referencedByJobPublishTaskIdObjectsAsc, "form", "")
	}
	if r.referencedByJobDeployTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_deploy_task_id_objects__desc", r.referencedByJobDeployTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByJobDeployTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_deploy_task_id_objects__asc", r.referencedByJobDeployTaskIdObjectsAsc, "form", "")
	}
	if r.referencedByJobValidateTaskIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_validate_task_id_objects__desc", r.referencedByJobValidateTaskIdObjectsDesc, "form", "")
	}
	if r.referencedByJobValidateTaskIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_job_validate_task_id_objects__asc", r.referencedByJobValidateTaskIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTaskRequest struct {
	ctx        context.Context
	ApiService *TaskAPIService
	primaryKey string
	task       *Task
	depth      *int64
}

func (r ApiPatchTaskRequest) Task(task Task) ApiPatchTaskRequest {
	r.task = &task
	return r
}

// Query parameter depth
func (r ApiPatchTaskRequest) Depth(depth int64) ApiPatchTaskRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchTaskRequest) Execute() (*ResponseWithGenericOfTask, *http.Response, error) {
	return r.ApiService.PatchTaskExecute(r)
}

/*
PatchTask Method for PatchTask

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiPatchTaskRequest
*/
func (a *TaskAPIService) PatchTask(ctx context.Context, primaryKey string) ApiPatchTaskRequest {
	return ApiPatchTaskRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfTask
func (a *TaskAPIService) PatchTaskExecute(r ApiPatchTaskRequest) (*ResponseWithGenericOfTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskAPIService.PatchTask")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.task == nil {
		return localVarReturnValue, nil, reportError("task is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.task
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTasksRequest struct {
	ctx        context.Context
	ApiService *TaskAPIService
	task       *[]Task
	depth      *int64
}

func (r ApiPostTasksRequest) Task(task []Task) ApiPostTasksRequest {
	r.task = &task
	return r
}

// Query parameter depth
func (r ApiPostTasksRequest) Depth(depth int64) ApiPostTasksRequest {
	r.depth = &depth
	return r
}

func (r ApiPostTasksRequest) Execute() (*ResponseWithGenericOfTask, *http.Response, error) {
	return r.ApiService.PostTasksExecute(r)
}

/*
PostTasks Method for PostTasks

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostTasksRequest
*/
func (a *TaskAPIService) PostTasks(ctx context.Context) ApiPostTasksRequest {
	return ApiPostTasksRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfTask
func (a *TaskAPIService) PostTasksExecute(r ApiPostTasksRequest) (*ResponseWithGenericOfTask, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfTask
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TaskAPIService.PostTasks")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/tasks"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.task == nil {
		return localVarReturnValue, nil, reportError("task is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.task
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
