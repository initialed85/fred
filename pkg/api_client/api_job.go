/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// JobAPIService JobAPI service
type JobAPIService service

type ApiDeleteJobRequest struct {
	ctx        context.Context
	ApiService *JobAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiDeleteJobRequest) Depth(depth int64) ApiDeleteJobRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteJobExecute(r)
}

/*
DeleteJob Method for DeleteJob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiDeleteJobRequest
*/
func (a *JobAPIService) DeleteJob(ctx context.Context, primaryKey string) ApiDeleteJobRequest {
	return ApiDeleteJobRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *JobAPIService) DeleteJobExecute(r ApiDeleteJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.DeleteJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetJobRequest struct {
	ctx        context.Context
	ApiService *JobAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiGetJobRequest) Depth(depth int64) ApiGetJobRequest {
	r.depth = &depth
	return r
}

func (r ApiGetJobRequest) Execute() (*ResponseWithGenericOfJob, *http.Response, error) {
	return r.ApiService.GetJobExecute(r)
}

/*
GetJob Method for GetJob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiGetJobRequest
*/
func (a *JobAPIService) GetJob(ctx context.Context, primaryKey string) ApiGetJobRequest {
	return ApiGetJobRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfJob
func (a *JobAPIService) GetJobExecute(r ApiGetJobRequest) (*ResponseWithGenericOfJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.GetJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetJobsRequest struct {
	ctx                                         context.Context
	ApiService                                  *JobAPIService
	limit                                       *int32
	offset                                      *int32
	depth                                       *int32
	idEq                                        *string
	idNe                                        *string
	idGt                                        *string
	idGte                                       *string
	idLt                                        *string
	idLte                                       *string
	idIn                                        *string
	idNotin                                     *string
	idLike                                      *string
	idNotlike                                   *string
	idIlike                                     *string
	idNotilike                                  *string
	idDesc                                      *string
	idAsc                                       *string
	createdAtEq                                 *time.Time
	createdAtNe                                 *time.Time
	createdAtGt                                 *time.Time
	createdAtGte                                *time.Time
	createdAtLt                                 *time.Time
	createdAtLte                                *time.Time
	createdAtIn                                 *time.Time
	createdAtNotin                              *time.Time
	createdAtLike                               *time.Time
	createdAtNotlike                            *time.Time
	createdAtIlike                              *time.Time
	createdAtNotilike                           *time.Time
	createdAtDesc                               *string
	createdAtAsc                                *string
	updatedAtEq                                 *time.Time
	updatedAtNe                                 *time.Time
	updatedAtGt                                 *time.Time
	updatedAtGte                                *time.Time
	updatedAtLt                                 *time.Time
	updatedAtLte                                *time.Time
	updatedAtIn                                 *time.Time
	updatedAtNotin                              *time.Time
	updatedAtLike                               *time.Time
	updatedAtNotlike                            *time.Time
	updatedAtIlike                              *time.Time
	updatedAtNotilike                           *time.Time
	updatedAtDesc                               *string
	updatedAtAsc                                *string
	deletedAtEq                                 *time.Time
	deletedAtNe                                 *time.Time
	deletedAtGt                                 *time.Time
	deletedAtGte                                *time.Time
	deletedAtLt                                 *time.Time
	deletedAtLte                                *time.Time
	deletedAtIn                                 *time.Time
	deletedAtNotin                              *time.Time
	deletedAtLike                               *time.Time
	deletedAtNotlike                            *time.Time
	deletedAtIlike                              *time.Time
	deletedAtNotilike                           *time.Time
	deletedAtDesc                               *string
	deletedAtAsc                                *string
	nameEq                                      *string
	nameNe                                      *string
	nameGt                                      *string
	nameGte                                     *string
	nameLt                                      *string
	nameLte                                     *string
	nameIn                                      *string
	nameNotin                                   *string
	nameLike                                    *string
	nameNotlike                                 *string
	nameIlike                                   *string
	nameNotilike                                *string
	nameDesc                                    *string
	nameAsc                                     *string
	jobExecutorClaimedUntilEq                   *time.Time
	jobExecutorClaimedUntilNe                   *time.Time
	jobExecutorClaimedUntilGt                   *time.Time
	jobExecutorClaimedUntilGte                  *time.Time
	jobExecutorClaimedUntilLt                   *time.Time
	jobExecutorClaimedUntilLte                  *time.Time
	jobExecutorClaimedUntilIn                   *time.Time
	jobExecutorClaimedUntilNotin                *time.Time
	jobExecutorClaimedUntilLike                 *time.Time
	jobExecutorClaimedUntilNotlike              *time.Time
	jobExecutorClaimedUntilIlike                *time.Time
	jobExecutorClaimedUntilNotilike             *time.Time
	jobExecutorClaimedUntilDesc                 *string
	jobExecutorClaimedUntilAsc                  *string
	ruleIdEq                                    *string
	ruleIdNe                                    *string
	ruleIdGt                                    *string
	ruleIdGte                                   *string
	ruleIdLt                                    *string
	ruleIdLte                                   *string
	ruleIdIn                                    *string
	ruleIdNotin                                 *string
	ruleIdLike                                  *string
	ruleIdNotlike                               *string
	ruleIdIlike                                 *string
	ruleIdNotilike                              *string
	ruleIdDesc                                  *string
	ruleIdAsc                                   *string
	ruleIdObjectDesc                            *string
	ruleIdObjectAsc                             *string
	buildTaskIdEq                               *string
	buildTaskIdNe                               *string
	buildTaskIdGt                               *string
	buildTaskIdGte                              *string
	buildTaskIdLt                               *string
	buildTaskIdLte                              *string
	buildTaskIdIn                               *string
	buildTaskIdNotin                            *string
	buildTaskIdLike                             *string
	buildTaskIdNotlike                          *string
	buildTaskIdIlike                            *string
	buildTaskIdNotilike                         *string
	buildTaskIdDesc                             *string
	buildTaskIdAsc                              *string
	buildTaskIdObjectDesc                       *string
	buildTaskIdObjectAsc                        *string
	testTaskIdEq                                *string
	testTaskIdNe                                *string
	testTaskIdGt                                *string
	testTaskIdGte                               *string
	testTaskIdLt                                *string
	testTaskIdLte                               *string
	testTaskIdIn                                *string
	testTaskIdNotin                             *string
	testTaskIdLike                              *string
	testTaskIdNotlike                           *string
	testTaskIdIlike                             *string
	testTaskIdNotilike                          *string
	testTaskIdDesc                              *string
	testTaskIdAsc                               *string
	testTaskIdObjectDesc                        *string
	testTaskIdObjectAsc                         *string
	publishTaskIdEq                             *string
	publishTaskIdNe                             *string
	publishTaskIdGt                             *string
	publishTaskIdGte                            *string
	publishTaskIdLt                             *string
	publishTaskIdLte                            *string
	publishTaskIdIn                             *string
	publishTaskIdNotin                          *string
	publishTaskIdLike                           *string
	publishTaskIdNotlike                        *string
	publishTaskIdIlike                          *string
	publishTaskIdNotilike                       *string
	publishTaskIdDesc                           *string
	publishTaskIdAsc                            *string
	publishTaskIdObjectDesc                     *string
	publishTaskIdObjectAsc                      *string
	deployTaskIdEq                              *string
	deployTaskIdNe                              *string
	deployTaskIdGt                              *string
	deployTaskIdGte                             *string
	deployTaskIdLt                              *string
	deployTaskIdLte                             *string
	deployTaskIdIn                              *string
	deployTaskIdNotin                           *string
	deployTaskIdLike                            *string
	deployTaskIdNotlike                         *string
	deployTaskIdIlike                           *string
	deployTaskIdNotilike                        *string
	deployTaskIdDesc                            *string
	deployTaskIdAsc                             *string
	deployTaskIdObjectDesc                      *string
	deployTaskIdObjectAsc                       *string
	validateTaskIdEq                            *string
	validateTaskIdNe                            *string
	validateTaskIdGt                            *string
	validateTaskIdGte                           *string
	validateTaskIdLt                            *string
	validateTaskIdLte                           *string
	validateTaskIdIn                            *string
	validateTaskIdNotin                         *string
	validateTaskIdLike                          *string
	validateTaskIdNotlike                       *string
	validateTaskIdIlike                         *string
	validateTaskIdNotilike                      *string
	validateTaskIdDesc                          *string
	validateTaskIdAsc                           *string
	validateTaskIdObjectDesc                    *string
	validateTaskIdObjectAsc                     *string
	referencedByRuleRequiresJobJobIdObjectsDesc *string
	referencedByRuleRequiresJobJobIdObjectsAsc  *string
	referencedByExecutionJobIdObjectsDesc       *string
	referencedByExecutionJobIdObjectsAsc        *string
}

// SQL LIMIT operator
func (r ApiGetJobsRequest) Limit(limit int32) ApiGetJobsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetJobsRequest) Offset(offset int32) ApiGetJobsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetJobsRequest) Depth(depth int32) ApiGetJobsRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) IdEq(idEq string) ApiGetJobsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) IdNe(idNe string) ApiGetJobsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) IdGt(idGt string) ApiGetJobsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) IdGte(idGte string) ApiGetJobsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) IdLt(idLt string) ApiGetJobsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) IdLte(idLte string) ApiGetJobsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) IdIn(idIn string) ApiGetJobsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) IdNotin(idNotin string) ApiGetJobsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) IdLike(idLike string) ApiGetJobsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) IdNotlike(idNotlike string) ApiGetJobsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) IdIlike(idIlike string) ApiGetJobsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) IdNotilike(idNotilike string) ApiGetJobsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) IdDesc(idDesc string) ApiGetJobsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) IdAsc(idAsc string) ApiGetJobsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetJobsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetJobsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetJobsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetJobsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetJobsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetJobsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetJobsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetJobsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetJobsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetJobsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetJobsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetJobsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) CreatedAtDesc(createdAtDesc string) ApiGetJobsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) CreatedAtAsc(createdAtAsc string) ApiGetJobsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetJobsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetJobsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetJobsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetJobsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetJobsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetJobsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetJobsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetJobsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetJobsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetJobsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetJobsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetJobsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetJobsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetJobsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetJobsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetJobsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetJobsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetJobsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetJobsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetJobsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetJobsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetJobsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetJobsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetJobsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetJobsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetJobsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetJobsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetJobsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) NameEq(nameEq string) ApiGetJobsRequest {
	r.nameEq = &nameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) NameNe(nameNe string) ApiGetJobsRequest {
	r.nameNe = &nameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) NameGt(nameGt string) ApiGetJobsRequest {
	r.nameGt = &nameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) NameGte(nameGte string) ApiGetJobsRequest {
	r.nameGte = &nameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) NameLt(nameLt string) ApiGetJobsRequest {
	r.nameLt = &nameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) NameLte(nameLte string) ApiGetJobsRequest {
	r.nameLte = &nameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) NameIn(nameIn string) ApiGetJobsRequest {
	r.nameIn = &nameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) NameNotin(nameNotin string) ApiGetJobsRequest {
	r.nameNotin = &nameNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) NameLike(nameLike string) ApiGetJobsRequest {
	r.nameLike = &nameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) NameNotlike(nameNotlike string) ApiGetJobsRequest {
	r.nameNotlike = &nameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) NameIlike(nameIlike string) ApiGetJobsRequest {
	r.nameIlike = &nameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) NameNotilike(nameNotilike string) ApiGetJobsRequest {
	r.nameNotilike = &nameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) NameDesc(nameDesc string) ApiGetJobsRequest {
	r.nameDesc = &nameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) NameAsc(nameAsc string) ApiGetJobsRequest {
	r.nameAsc = &nameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) JobExecutorClaimedUntilEq(jobExecutorClaimedUntilEq time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilEq = &jobExecutorClaimedUntilEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) JobExecutorClaimedUntilNe(jobExecutorClaimedUntilNe time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilNe = &jobExecutorClaimedUntilNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) JobExecutorClaimedUntilGt(jobExecutorClaimedUntilGt time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilGt = &jobExecutorClaimedUntilGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) JobExecutorClaimedUntilGte(jobExecutorClaimedUntilGte time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilGte = &jobExecutorClaimedUntilGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) JobExecutorClaimedUntilLt(jobExecutorClaimedUntilLt time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilLt = &jobExecutorClaimedUntilLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) JobExecutorClaimedUntilLte(jobExecutorClaimedUntilLte time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilLte = &jobExecutorClaimedUntilLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) JobExecutorClaimedUntilIn(jobExecutorClaimedUntilIn time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilIn = &jobExecutorClaimedUntilIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) JobExecutorClaimedUntilNotin(jobExecutorClaimedUntilNotin time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilNotin = &jobExecutorClaimedUntilNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) JobExecutorClaimedUntilLike(jobExecutorClaimedUntilLike time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilLike = &jobExecutorClaimedUntilLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) JobExecutorClaimedUntilNotlike(jobExecutorClaimedUntilNotlike time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilNotlike = &jobExecutorClaimedUntilNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) JobExecutorClaimedUntilIlike(jobExecutorClaimedUntilIlike time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilIlike = &jobExecutorClaimedUntilIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) JobExecutorClaimedUntilNotilike(jobExecutorClaimedUntilNotilike time.Time) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilNotilike = &jobExecutorClaimedUntilNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) JobExecutorClaimedUntilDesc(jobExecutorClaimedUntilDesc string) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilDesc = &jobExecutorClaimedUntilDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) JobExecutorClaimedUntilAsc(jobExecutorClaimedUntilAsc string) ApiGetJobsRequest {
	r.jobExecutorClaimedUntilAsc = &jobExecutorClaimedUntilAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) RuleIdEq(ruleIdEq string) ApiGetJobsRequest {
	r.ruleIdEq = &ruleIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) RuleIdNe(ruleIdNe string) ApiGetJobsRequest {
	r.ruleIdNe = &ruleIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) RuleIdGt(ruleIdGt string) ApiGetJobsRequest {
	r.ruleIdGt = &ruleIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) RuleIdGte(ruleIdGte string) ApiGetJobsRequest {
	r.ruleIdGte = &ruleIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) RuleIdLt(ruleIdLt string) ApiGetJobsRequest {
	r.ruleIdLt = &ruleIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) RuleIdLte(ruleIdLte string) ApiGetJobsRequest {
	r.ruleIdLte = &ruleIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) RuleIdIn(ruleIdIn string) ApiGetJobsRequest {
	r.ruleIdIn = &ruleIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) RuleIdNotin(ruleIdNotin string) ApiGetJobsRequest {
	r.ruleIdNotin = &ruleIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) RuleIdLike(ruleIdLike string) ApiGetJobsRequest {
	r.ruleIdLike = &ruleIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) RuleIdNotlike(ruleIdNotlike string) ApiGetJobsRequest {
	r.ruleIdNotlike = &ruleIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) RuleIdIlike(ruleIdIlike string) ApiGetJobsRequest {
	r.ruleIdIlike = &ruleIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) RuleIdNotilike(ruleIdNotilike string) ApiGetJobsRequest {
	r.ruleIdNotilike = &ruleIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) RuleIdDesc(ruleIdDesc string) ApiGetJobsRequest {
	r.ruleIdDesc = &ruleIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) RuleIdAsc(ruleIdAsc string) ApiGetJobsRequest {
	r.ruleIdAsc = &ruleIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) RuleIdObjectDesc(ruleIdObjectDesc string) ApiGetJobsRequest {
	r.ruleIdObjectDesc = &ruleIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) RuleIdObjectAsc(ruleIdObjectAsc string) ApiGetJobsRequest {
	r.ruleIdObjectAsc = &ruleIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) BuildTaskIdEq(buildTaskIdEq string) ApiGetJobsRequest {
	r.buildTaskIdEq = &buildTaskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) BuildTaskIdNe(buildTaskIdNe string) ApiGetJobsRequest {
	r.buildTaskIdNe = &buildTaskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) BuildTaskIdGt(buildTaskIdGt string) ApiGetJobsRequest {
	r.buildTaskIdGt = &buildTaskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) BuildTaskIdGte(buildTaskIdGte string) ApiGetJobsRequest {
	r.buildTaskIdGte = &buildTaskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) BuildTaskIdLt(buildTaskIdLt string) ApiGetJobsRequest {
	r.buildTaskIdLt = &buildTaskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) BuildTaskIdLte(buildTaskIdLte string) ApiGetJobsRequest {
	r.buildTaskIdLte = &buildTaskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) BuildTaskIdIn(buildTaskIdIn string) ApiGetJobsRequest {
	r.buildTaskIdIn = &buildTaskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) BuildTaskIdNotin(buildTaskIdNotin string) ApiGetJobsRequest {
	r.buildTaskIdNotin = &buildTaskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) BuildTaskIdLike(buildTaskIdLike string) ApiGetJobsRequest {
	r.buildTaskIdLike = &buildTaskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) BuildTaskIdNotlike(buildTaskIdNotlike string) ApiGetJobsRequest {
	r.buildTaskIdNotlike = &buildTaskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) BuildTaskIdIlike(buildTaskIdIlike string) ApiGetJobsRequest {
	r.buildTaskIdIlike = &buildTaskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) BuildTaskIdNotilike(buildTaskIdNotilike string) ApiGetJobsRequest {
	r.buildTaskIdNotilike = &buildTaskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) BuildTaskIdDesc(buildTaskIdDesc string) ApiGetJobsRequest {
	r.buildTaskIdDesc = &buildTaskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) BuildTaskIdAsc(buildTaskIdAsc string) ApiGetJobsRequest {
	r.buildTaskIdAsc = &buildTaskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) BuildTaskIdObjectDesc(buildTaskIdObjectDesc string) ApiGetJobsRequest {
	r.buildTaskIdObjectDesc = &buildTaskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) BuildTaskIdObjectAsc(buildTaskIdObjectAsc string) ApiGetJobsRequest {
	r.buildTaskIdObjectAsc = &buildTaskIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) TestTaskIdEq(testTaskIdEq string) ApiGetJobsRequest {
	r.testTaskIdEq = &testTaskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) TestTaskIdNe(testTaskIdNe string) ApiGetJobsRequest {
	r.testTaskIdNe = &testTaskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) TestTaskIdGt(testTaskIdGt string) ApiGetJobsRequest {
	r.testTaskIdGt = &testTaskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) TestTaskIdGte(testTaskIdGte string) ApiGetJobsRequest {
	r.testTaskIdGte = &testTaskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) TestTaskIdLt(testTaskIdLt string) ApiGetJobsRequest {
	r.testTaskIdLt = &testTaskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) TestTaskIdLte(testTaskIdLte string) ApiGetJobsRequest {
	r.testTaskIdLte = &testTaskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) TestTaskIdIn(testTaskIdIn string) ApiGetJobsRequest {
	r.testTaskIdIn = &testTaskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) TestTaskIdNotin(testTaskIdNotin string) ApiGetJobsRequest {
	r.testTaskIdNotin = &testTaskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) TestTaskIdLike(testTaskIdLike string) ApiGetJobsRequest {
	r.testTaskIdLike = &testTaskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) TestTaskIdNotlike(testTaskIdNotlike string) ApiGetJobsRequest {
	r.testTaskIdNotlike = &testTaskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) TestTaskIdIlike(testTaskIdIlike string) ApiGetJobsRequest {
	r.testTaskIdIlike = &testTaskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) TestTaskIdNotilike(testTaskIdNotilike string) ApiGetJobsRequest {
	r.testTaskIdNotilike = &testTaskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) TestTaskIdDesc(testTaskIdDesc string) ApiGetJobsRequest {
	r.testTaskIdDesc = &testTaskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) TestTaskIdAsc(testTaskIdAsc string) ApiGetJobsRequest {
	r.testTaskIdAsc = &testTaskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) TestTaskIdObjectDesc(testTaskIdObjectDesc string) ApiGetJobsRequest {
	r.testTaskIdObjectDesc = &testTaskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) TestTaskIdObjectAsc(testTaskIdObjectAsc string) ApiGetJobsRequest {
	r.testTaskIdObjectAsc = &testTaskIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) PublishTaskIdEq(publishTaskIdEq string) ApiGetJobsRequest {
	r.publishTaskIdEq = &publishTaskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) PublishTaskIdNe(publishTaskIdNe string) ApiGetJobsRequest {
	r.publishTaskIdNe = &publishTaskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) PublishTaskIdGt(publishTaskIdGt string) ApiGetJobsRequest {
	r.publishTaskIdGt = &publishTaskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) PublishTaskIdGte(publishTaskIdGte string) ApiGetJobsRequest {
	r.publishTaskIdGte = &publishTaskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) PublishTaskIdLt(publishTaskIdLt string) ApiGetJobsRequest {
	r.publishTaskIdLt = &publishTaskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) PublishTaskIdLte(publishTaskIdLte string) ApiGetJobsRequest {
	r.publishTaskIdLte = &publishTaskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) PublishTaskIdIn(publishTaskIdIn string) ApiGetJobsRequest {
	r.publishTaskIdIn = &publishTaskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) PublishTaskIdNotin(publishTaskIdNotin string) ApiGetJobsRequest {
	r.publishTaskIdNotin = &publishTaskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) PublishTaskIdLike(publishTaskIdLike string) ApiGetJobsRequest {
	r.publishTaskIdLike = &publishTaskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) PublishTaskIdNotlike(publishTaskIdNotlike string) ApiGetJobsRequest {
	r.publishTaskIdNotlike = &publishTaskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) PublishTaskIdIlike(publishTaskIdIlike string) ApiGetJobsRequest {
	r.publishTaskIdIlike = &publishTaskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) PublishTaskIdNotilike(publishTaskIdNotilike string) ApiGetJobsRequest {
	r.publishTaskIdNotilike = &publishTaskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) PublishTaskIdDesc(publishTaskIdDesc string) ApiGetJobsRequest {
	r.publishTaskIdDesc = &publishTaskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) PublishTaskIdAsc(publishTaskIdAsc string) ApiGetJobsRequest {
	r.publishTaskIdAsc = &publishTaskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) PublishTaskIdObjectDesc(publishTaskIdObjectDesc string) ApiGetJobsRequest {
	r.publishTaskIdObjectDesc = &publishTaskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) PublishTaskIdObjectAsc(publishTaskIdObjectAsc string) ApiGetJobsRequest {
	r.publishTaskIdObjectAsc = &publishTaskIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) DeployTaskIdEq(deployTaskIdEq string) ApiGetJobsRequest {
	r.deployTaskIdEq = &deployTaskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) DeployTaskIdNe(deployTaskIdNe string) ApiGetJobsRequest {
	r.deployTaskIdNe = &deployTaskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeployTaskIdGt(deployTaskIdGt string) ApiGetJobsRequest {
	r.deployTaskIdGt = &deployTaskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeployTaskIdGte(deployTaskIdGte string) ApiGetJobsRequest {
	r.deployTaskIdGte = &deployTaskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeployTaskIdLt(deployTaskIdLt string) ApiGetJobsRequest {
	r.deployTaskIdLt = &deployTaskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) DeployTaskIdLte(deployTaskIdLte string) ApiGetJobsRequest {
	r.deployTaskIdLte = &deployTaskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) DeployTaskIdIn(deployTaskIdIn string) ApiGetJobsRequest {
	r.deployTaskIdIn = &deployTaskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) DeployTaskIdNotin(deployTaskIdNotin string) ApiGetJobsRequest {
	r.deployTaskIdNotin = &deployTaskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeployTaskIdLike(deployTaskIdLike string) ApiGetJobsRequest {
	r.deployTaskIdLike = &deployTaskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeployTaskIdNotlike(deployTaskIdNotlike string) ApiGetJobsRequest {
	r.deployTaskIdNotlike = &deployTaskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeployTaskIdIlike(deployTaskIdIlike string) ApiGetJobsRequest {
	r.deployTaskIdIlike = &deployTaskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) DeployTaskIdNotilike(deployTaskIdNotilike string) ApiGetJobsRequest {
	r.deployTaskIdNotilike = &deployTaskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeployTaskIdDesc(deployTaskIdDesc string) ApiGetJobsRequest {
	r.deployTaskIdDesc = &deployTaskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeployTaskIdAsc(deployTaskIdAsc string) ApiGetJobsRequest {
	r.deployTaskIdAsc = &deployTaskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeployTaskIdObjectDesc(deployTaskIdObjectDesc string) ApiGetJobsRequest {
	r.deployTaskIdObjectDesc = &deployTaskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) DeployTaskIdObjectAsc(deployTaskIdObjectAsc string) ApiGetJobsRequest {
	r.deployTaskIdObjectAsc = &deployTaskIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetJobsRequest) ValidateTaskIdEq(validateTaskIdEq string) ApiGetJobsRequest {
	r.validateTaskIdEq = &validateTaskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetJobsRequest) ValidateTaskIdNe(validateTaskIdNe string) ApiGetJobsRequest {
	r.validateTaskIdNe = &validateTaskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetJobsRequest) ValidateTaskIdGt(validateTaskIdGt string) ApiGetJobsRequest {
	r.validateTaskIdGt = &validateTaskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) ValidateTaskIdGte(validateTaskIdGte string) ApiGetJobsRequest {
	r.validateTaskIdGte = &validateTaskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetJobsRequest) ValidateTaskIdLt(validateTaskIdLt string) ApiGetJobsRequest {
	r.validateTaskIdLt = &validateTaskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetJobsRequest) ValidateTaskIdLte(validateTaskIdLte string) ApiGetJobsRequest {
	r.validateTaskIdLte = &validateTaskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) ValidateTaskIdIn(validateTaskIdIn string) ApiGetJobsRequest {
	r.validateTaskIdIn = &validateTaskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetJobsRequest) ValidateTaskIdNotin(validateTaskIdNotin string) ApiGetJobsRequest {
	r.validateTaskIdNotin = &validateTaskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) ValidateTaskIdLike(validateTaskIdLike string) ApiGetJobsRequest {
	r.validateTaskIdLike = &validateTaskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) ValidateTaskIdNotlike(validateTaskIdNotlike string) ApiGetJobsRequest {
	r.validateTaskIdNotlike = &validateTaskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) ValidateTaskIdIlike(validateTaskIdIlike string) ApiGetJobsRequest {
	r.validateTaskIdIlike = &validateTaskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetJobsRequest) ValidateTaskIdNotilike(validateTaskIdNotilike string) ApiGetJobsRequest {
	r.validateTaskIdNotilike = &validateTaskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ValidateTaskIdDesc(validateTaskIdDesc string) ApiGetJobsRequest {
	r.validateTaskIdDesc = &validateTaskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ValidateTaskIdAsc(validateTaskIdAsc string) ApiGetJobsRequest {
	r.validateTaskIdAsc = &validateTaskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ValidateTaskIdObjectDesc(validateTaskIdObjectDesc string) ApiGetJobsRequest {
	r.validateTaskIdObjectDesc = &validateTaskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ValidateTaskIdObjectAsc(validateTaskIdObjectAsc string) ApiGetJobsRequest {
	r.validateTaskIdObjectAsc = &validateTaskIdObjectAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ReferencedByRuleRequiresJobJobIdObjectsDesc(referencedByRuleRequiresJobJobIdObjectsDesc string) ApiGetJobsRequest {
	r.referencedByRuleRequiresJobJobIdObjectsDesc = &referencedByRuleRequiresJobJobIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ReferencedByRuleRequiresJobJobIdObjectsAsc(referencedByRuleRequiresJobJobIdObjectsAsc string) ApiGetJobsRequest {
	r.referencedByRuleRequiresJobJobIdObjectsAsc = &referencedByRuleRequiresJobJobIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ReferencedByExecutionJobIdObjectsDesc(referencedByExecutionJobIdObjectsDesc string) ApiGetJobsRequest {
	r.referencedByExecutionJobIdObjectsDesc = &referencedByExecutionJobIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetJobsRequest) ReferencedByExecutionJobIdObjectsAsc(referencedByExecutionJobIdObjectsAsc string) ApiGetJobsRequest {
	r.referencedByExecutionJobIdObjectsAsc = &referencedByExecutionJobIdObjectsAsc
	return r
}

func (r ApiGetJobsRequest) Execute() (*ResponseWithGenericOfJob, *http.Response, error) {
	return r.ApiService.GetJobsExecute(r)
}

/*
GetJobs Method for GetJobs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetJobsRequest
*/
func (a *JobAPIService) GetJobs(ctx context.Context) ApiGetJobsRequest {
	return ApiGetJobsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfJob
func (a *JobAPIService) GetJobsExecute(r ApiGetJobsRequest) (*ResponseWithGenericOfJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.GetJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.nameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__eq", r.nameEq, "form", "")
	}
	if r.nameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__ne", r.nameNe, "form", "")
	}
	if r.nameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__gt", r.nameGt, "form", "")
	}
	if r.nameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__gte", r.nameGte, "form", "")
	}
	if r.nameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__lt", r.nameLt, "form", "")
	}
	if r.nameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__lte", r.nameLte, "form", "")
	}
	if r.nameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__in", r.nameIn, "form", "")
	}
	if r.nameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notin", r.nameNotin, "form", "")
	}
	if r.nameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__like", r.nameLike, "form", "")
	}
	if r.nameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notlike", r.nameNotlike, "form", "")
	}
	if r.nameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__ilike", r.nameIlike, "form", "")
	}
	if r.nameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__notilike", r.nameNotilike, "form", "")
	}
	if r.nameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__desc", r.nameDesc, "form", "")
	}
	if r.nameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "name__asc", r.nameAsc, "form", "")
	}
	if r.jobExecutorClaimedUntilEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__eq", r.jobExecutorClaimedUntilEq, "form", "")
	}
	if r.jobExecutorClaimedUntilNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__ne", r.jobExecutorClaimedUntilNe, "form", "")
	}
	if r.jobExecutorClaimedUntilGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__gt", r.jobExecutorClaimedUntilGt, "form", "")
	}
	if r.jobExecutorClaimedUntilGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__gte", r.jobExecutorClaimedUntilGte, "form", "")
	}
	if r.jobExecutorClaimedUntilLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__lt", r.jobExecutorClaimedUntilLt, "form", "")
	}
	if r.jobExecutorClaimedUntilLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__lte", r.jobExecutorClaimedUntilLte, "form", "")
	}
	if r.jobExecutorClaimedUntilIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__in", r.jobExecutorClaimedUntilIn, "form", "")
	}
	if r.jobExecutorClaimedUntilNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notin", r.jobExecutorClaimedUntilNotin, "form", "")
	}
	if r.jobExecutorClaimedUntilLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__like", r.jobExecutorClaimedUntilLike, "form", "")
	}
	if r.jobExecutorClaimedUntilNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notlike", r.jobExecutorClaimedUntilNotlike, "form", "")
	}
	if r.jobExecutorClaimedUntilIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__ilike", r.jobExecutorClaimedUntilIlike, "form", "")
	}
	if r.jobExecutorClaimedUntilNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notilike", r.jobExecutorClaimedUntilNotilike, "form", "")
	}
	if r.jobExecutorClaimedUntilDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__desc", r.jobExecutorClaimedUntilDesc, "form", "")
	}
	if r.jobExecutorClaimedUntilAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__asc", r.jobExecutorClaimedUntilAsc, "form", "")
	}
	if r.ruleIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__eq", r.ruleIdEq, "form", "")
	}
	if r.ruleIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ne", r.ruleIdNe, "form", "")
	}
	if r.ruleIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gt", r.ruleIdGt, "form", "")
	}
	if r.ruleIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gte", r.ruleIdGte, "form", "")
	}
	if r.ruleIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lt", r.ruleIdLt, "form", "")
	}
	if r.ruleIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lte", r.ruleIdLte, "form", "")
	}
	if r.ruleIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__in", r.ruleIdIn, "form", "")
	}
	if r.ruleIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notin", r.ruleIdNotin, "form", "")
	}
	if r.ruleIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__like", r.ruleIdLike, "form", "")
	}
	if r.ruleIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notlike", r.ruleIdNotlike, "form", "")
	}
	if r.ruleIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ilike", r.ruleIdIlike, "form", "")
	}
	if r.ruleIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notilike", r.ruleIdNotilike, "form", "")
	}
	if r.ruleIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__desc", r.ruleIdDesc, "form", "")
	}
	if r.ruleIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__asc", r.ruleIdAsc, "form", "")
	}
	if r.ruleIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__desc", r.ruleIdObjectDesc, "form", "")
	}
	if r.ruleIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__asc", r.ruleIdObjectAsc, "form", "")
	}
	if r.buildTaskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__eq", r.buildTaskIdEq, "form", "")
	}
	if r.buildTaskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__ne", r.buildTaskIdNe, "form", "")
	}
	if r.buildTaskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__gt", r.buildTaskIdGt, "form", "")
	}
	if r.buildTaskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__gte", r.buildTaskIdGte, "form", "")
	}
	if r.buildTaskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__lt", r.buildTaskIdLt, "form", "")
	}
	if r.buildTaskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__lte", r.buildTaskIdLte, "form", "")
	}
	if r.buildTaskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__in", r.buildTaskIdIn, "form", "")
	}
	if r.buildTaskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__notin", r.buildTaskIdNotin, "form", "")
	}
	if r.buildTaskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__like", r.buildTaskIdLike, "form", "")
	}
	if r.buildTaskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__notlike", r.buildTaskIdNotlike, "form", "")
	}
	if r.buildTaskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__ilike", r.buildTaskIdIlike, "form", "")
	}
	if r.buildTaskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__notilike", r.buildTaskIdNotilike, "form", "")
	}
	if r.buildTaskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__desc", r.buildTaskIdDesc, "form", "")
	}
	if r.buildTaskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id__asc", r.buildTaskIdAsc, "form", "")
	}
	if r.buildTaskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id_object__desc", r.buildTaskIdObjectDesc, "form", "")
	}
	if r.buildTaskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_task_id_object__asc", r.buildTaskIdObjectAsc, "form", "")
	}
	if r.testTaskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__eq", r.testTaskIdEq, "form", "")
	}
	if r.testTaskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__ne", r.testTaskIdNe, "form", "")
	}
	if r.testTaskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__gt", r.testTaskIdGt, "form", "")
	}
	if r.testTaskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__gte", r.testTaskIdGte, "form", "")
	}
	if r.testTaskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__lt", r.testTaskIdLt, "form", "")
	}
	if r.testTaskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__lte", r.testTaskIdLte, "form", "")
	}
	if r.testTaskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__in", r.testTaskIdIn, "form", "")
	}
	if r.testTaskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__notin", r.testTaskIdNotin, "form", "")
	}
	if r.testTaskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__like", r.testTaskIdLike, "form", "")
	}
	if r.testTaskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__notlike", r.testTaskIdNotlike, "form", "")
	}
	if r.testTaskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__ilike", r.testTaskIdIlike, "form", "")
	}
	if r.testTaskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__notilike", r.testTaskIdNotilike, "form", "")
	}
	if r.testTaskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__desc", r.testTaskIdDesc, "form", "")
	}
	if r.testTaskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id__asc", r.testTaskIdAsc, "form", "")
	}
	if r.testTaskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id_object__desc", r.testTaskIdObjectDesc, "form", "")
	}
	if r.testTaskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_task_id_object__asc", r.testTaskIdObjectAsc, "form", "")
	}
	if r.publishTaskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__eq", r.publishTaskIdEq, "form", "")
	}
	if r.publishTaskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__ne", r.publishTaskIdNe, "form", "")
	}
	if r.publishTaskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__gt", r.publishTaskIdGt, "form", "")
	}
	if r.publishTaskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__gte", r.publishTaskIdGte, "form", "")
	}
	if r.publishTaskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__lt", r.publishTaskIdLt, "form", "")
	}
	if r.publishTaskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__lte", r.publishTaskIdLte, "form", "")
	}
	if r.publishTaskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__in", r.publishTaskIdIn, "form", "")
	}
	if r.publishTaskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__notin", r.publishTaskIdNotin, "form", "")
	}
	if r.publishTaskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__like", r.publishTaskIdLike, "form", "")
	}
	if r.publishTaskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__notlike", r.publishTaskIdNotlike, "form", "")
	}
	if r.publishTaskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__ilike", r.publishTaskIdIlike, "form", "")
	}
	if r.publishTaskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__notilike", r.publishTaskIdNotilike, "form", "")
	}
	if r.publishTaskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__desc", r.publishTaskIdDesc, "form", "")
	}
	if r.publishTaskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id__asc", r.publishTaskIdAsc, "form", "")
	}
	if r.publishTaskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id_object__desc", r.publishTaskIdObjectDesc, "form", "")
	}
	if r.publishTaskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_task_id_object__asc", r.publishTaskIdObjectAsc, "form", "")
	}
	if r.deployTaskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__eq", r.deployTaskIdEq, "form", "")
	}
	if r.deployTaskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__ne", r.deployTaskIdNe, "form", "")
	}
	if r.deployTaskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__gt", r.deployTaskIdGt, "form", "")
	}
	if r.deployTaskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__gte", r.deployTaskIdGte, "form", "")
	}
	if r.deployTaskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__lt", r.deployTaskIdLt, "form", "")
	}
	if r.deployTaskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__lte", r.deployTaskIdLte, "form", "")
	}
	if r.deployTaskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__in", r.deployTaskIdIn, "form", "")
	}
	if r.deployTaskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__notin", r.deployTaskIdNotin, "form", "")
	}
	if r.deployTaskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__like", r.deployTaskIdLike, "form", "")
	}
	if r.deployTaskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__notlike", r.deployTaskIdNotlike, "form", "")
	}
	if r.deployTaskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__ilike", r.deployTaskIdIlike, "form", "")
	}
	if r.deployTaskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__notilike", r.deployTaskIdNotilike, "form", "")
	}
	if r.deployTaskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__desc", r.deployTaskIdDesc, "form", "")
	}
	if r.deployTaskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id__asc", r.deployTaskIdAsc, "form", "")
	}
	if r.deployTaskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id_object__desc", r.deployTaskIdObjectDesc, "form", "")
	}
	if r.deployTaskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_task_id_object__asc", r.deployTaskIdObjectAsc, "form", "")
	}
	if r.validateTaskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__eq", r.validateTaskIdEq, "form", "")
	}
	if r.validateTaskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__ne", r.validateTaskIdNe, "form", "")
	}
	if r.validateTaskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__gt", r.validateTaskIdGt, "form", "")
	}
	if r.validateTaskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__gte", r.validateTaskIdGte, "form", "")
	}
	if r.validateTaskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__lt", r.validateTaskIdLt, "form", "")
	}
	if r.validateTaskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__lte", r.validateTaskIdLte, "form", "")
	}
	if r.validateTaskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__in", r.validateTaskIdIn, "form", "")
	}
	if r.validateTaskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__notin", r.validateTaskIdNotin, "form", "")
	}
	if r.validateTaskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__like", r.validateTaskIdLike, "form", "")
	}
	if r.validateTaskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__notlike", r.validateTaskIdNotlike, "form", "")
	}
	if r.validateTaskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__ilike", r.validateTaskIdIlike, "form", "")
	}
	if r.validateTaskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__notilike", r.validateTaskIdNotilike, "form", "")
	}
	if r.validateTaskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__desc", r.validateTaskIdDesc, "form", "")
	}
	if r.validateTaskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id__asc", r.validateTaskIdAsc, "form", "")
	}
	if r.validateTaskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id_object__desc", r.validateTaskIdObjectDesc, "form", "")
	}
	if r.validateTaskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_task_id_object__asc", r.validateTaskIdObjectAsc, "form", "")
	}
	if r.referencedByRuleRequiresJobJobIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_rule_requires_job_job_id_objects__desc", r.referencedByRuleRequiresJobJobIdObjectsDesc, "form", "")
	}
	if r.referencedByRuleRequiresJobJobIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_rule_requires_job_job_id_objects__asc", r.referencedByRuleRequiresJobJobIdObjectsAsc, "form", "")
	}
	if r.referencedByExecutionJobIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_job_id_objects__desc", r.referencedByExecutionJobIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionJobIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_job_id_objects__asc", r.referencedByExecutionJobIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchJobRequest struct {
	ctx        context.Context
	ApiService *JobAPIService
	primaryKey string
	job        *Job
	depth      *int64
}

func (r ApiPatchJobRequest) Job(job Job) ApiPatchJobRequest {
	r.job = &job
	return r
}

// Query parameter depth
func (r ApiPatchJobRequest) Depth(depth int64) ApiPatchJobRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchJobRequest) Execute() (*ResponseWithGenericOfJob, *http.Response, error) {
	return r.ApiService.PatchJobExecute(r)
}

/*
PatchJob Method for PatchJob

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiPatchJobRequest
*/
func (a *JobAPIService) PatchJob(ctx context.Context, primaryKey string) ApiPatchJobRequest {
	return ApiPatchJobRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfJob
func (a *JobAPIService) PatchJobExecute(r ApiPatchJobRequest) (*ResponseWithGenericOfJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.PatchJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.job == nil {
		return localVarReturnValue, nil, reportError("job is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.job
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostJobsRequest struct {
	ctx        context.Context
	ApiService *JobAPIService
	job        *[]Job
	depth      *int64
}

func (r ApiPostJobsRequest) Job(job []Job) ApiPostJobsRequest {
	r.job = &job
	return r
}

// Query parameter depth
func (r ApiPostJobsRequest) Depth(depth int64) ApiPostJobsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostJobsRequest) Execute() (*ResponseWithGenericOfJob, *http.Response, error) {
	return r.ApiService.PostJobsExecute(r)
}

/*
PostJobs Method for PostJobs

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostJobsRequest
*/
func (a *JobAPIService) PostJobs(ctx context.Context) ApiPostJobsRequest {
	return ApiPostJobsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfJob
func (a *JobAPIService) PostJobsExecute(r ApiPostJobsRequest) (*ResponseWithGenericOfJob, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobAPIService.PostJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.job == nil {
		return localVarReturnValue, nil, reportError("job is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.job
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
