/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// TriggerHasExecutionAPIService TriggerHasExecutionAPI service
type TriggerHasExecutionAPIService service

type ApiDeleteTriggerHasExecutionRequest struct {
	ctx context.Context
	ApiService *TriggerHasExecutionAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteTriggerHasExecutionRequest) Depth(depth int64) ApiDeleteTriggerHasExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteTriggerHasExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTriggerHasExecutionExecute(r)
}

/*
DeleteTriggerHasExecution Method for DeleteTriggerHasExecution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteTriggerHasExecutionRequest
*/
func (a *TriggerHasExecutionAPIService) DeleteTriggerHasExecution(ctx context.Context, primaryKey string) ApiDeleteTriggerHasExecutionRequest {
	return ApiDeleteTriggerHasExecutionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *TriggerHasExecutionAPIService) DeleteTriggerHasExecutionExecute(r ApiDeleteTriggerHasExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerHasExecutionAPIService.DeleteTriggerHasExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/trigger-has-executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTriggerHasExecutionRequest struct {
	ctx context.Context
	ApiService *TriggerHasExecutionAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetTriggerHasExecutionRequest) Depth(depth int64) ApiGetTriggerHasExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiGetTriggerHasExecutionRequest) Execute() (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	return r.ApiService.GetTriggerHasExecutionExecute(r)
}

/*
GetTriggerHasExecution Method for GetTriggerHasExecution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetTriggerHasExecutionRequest
*/
func (a *TriggerHasExecutionAPIService) GetTriggerHasExecution(ctx context.Context, primaryKey string) ApiGetTriggerHasExecutionRequest {
	return ApiGetTriggerHasExecutionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTriggerHasExecution
func (a *TriggerHasExecutionAPIService) GetTriggerHasExecutionExecute(r ApiGetTriggerHasExecutionRequest) (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTriggerHasExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerHasExecutionAPIService.GetTriggerHasExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/trigger-has-executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTriggerHasExecutionsRequest struct {
	ctx context.Context
	ApiService *TriggerHasExecutionAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	triggerIdEq *string
	triggerIdNe *string
	triggerIdGt *string
	triggerIdGte *string
	triggerIdLt *string
	triggerIdLte *string
	triggerIdIn *string
	triggerIdNotin *string
	triggerIdLike *string
	triggerIdNotlike *string
	triggerIdIlike *string
	triggerIdNotilike *string
	triggerIdDesc *string
	triggerIdAsc *string
	triggerIdObjectDesc *string
	triggerIdObjectAsc *string
	executionIdEq *string
	executionIdNe *string
	executionIdGt *string
	executionIdGte *string
	executionIdLt *string
	executionIdLte *string
	executionIdIn *string
	executionIdNotin *string
	executionIdLike *string
	executionIdNotlike *string
	executionIdIlike *string
	executionIdNotilike *string
	executionIdDesc *string
	executionIdAsc *string
	executionIdObjectDesc *string
	executionIdObjectAsc *string
}

// SQL LIMIT operator
func (r ApiGetTriggerHasExecutionsRequest) Limit(limit int32) ApiGetTriggerHasExecutionsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetTriggerHasExecutionsRequest) Offset(offset int32) ApiGetTriggerHasExecutionsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetTriggerHasExecutionsRequest) Depth(depth int32) ApiGetTriggerHasExecutionsRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) IdEq(idEq string) ApiGetTriggerHasExecutionsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) IdNe(idNe string) ApiGetTriggerHasExecutionsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) IdGt(idGt string) ApiGetTriggerHasExecutionsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) IdGte(idGte string) ApiGetTriggerHasExecutionsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) IdLt(idLt string) ApiGetTriggerHasExecutionsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) IdLte(idLte string) ApiGetTriggerHasExecutionsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) IdIn(idIn string) ApiGetTriggerHasExecutionsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) IdNotin(idNotin string) ApiGetTriggerHasExecutionsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) IdLike(idLike string) ApiGetTriggerHasExecutionsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) IdNotlike(idNotlike string) ApiGetTriggerHasExecutionsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) IdIlike(idIlike string) ApiGetTriggerHasExecutionsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) IdNotilike(idNotilike string) ApiGetTriggerHasExecutionsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) IdDesc(idDesc string) ApiGetTriggerHasExecutionsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) IdAsc(idAsc string) ApiGetTriggerHasExecutionsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtDesc(createdAtDesc string) ApiGetTriggerHasExecutionsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) CreatedAtAsc(createdAtAsc string) ApiGetTriggerHasExecutionsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetTriggerHasExecutionsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetTriggerHasExecutionsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdEq(triggerIdEq string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdEq = &triggerIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdNe(triggerIdNe string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdNe = &triggerIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdGt(triggerIdGt string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdGt = &triggerIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdGte(triggerIdGte string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdGte = &triggerIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdLt(triggerIdLt string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdLt = &triggerIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdLte(triggerIdLte string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdLte = &triggerIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdIn(triggerIdIn string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdIn = &triggerIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdNotin(triggerIdNotin string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdNotin = &triggerIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdLike(triggerIdLike string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdLike = &triggerIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdNotlike(triggerIdNotlike string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdNotlike = &triggerIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdIlike(triggerIdIlike string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdIlike = &triggerIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdNotilike(triggerIdNotilike string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdNotilike = &triggerIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdDesc(triggerIdDesc string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdDesc = &triggerIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdAsc(triggerIdAsc string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdAsc = &triggerIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdObjectDesc(triggerIdObjectDesc string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdObjectDesc = &triggerIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) TriggerIdObjectAsc(triggerIdObjectAsc string) ApiGetTriggerHasExecutionsRequest {
	r.triggerIdObjectAsc = &triggerIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdEq(executionIdEq string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdEq = &executionIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdNe(executionIdNe string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdNe = &executionIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdGt(executionIdGt string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdGt = &executionIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdGte(executionIdGte string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdGte = &executionIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdLt(executionIdLt string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdLt = &executionIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdLte(executionIdLte string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdLte = &executionIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdIn(executionIdIn string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdIn = &executionIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdNotin(executionIdNotin string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdNotin = &executionIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdLike(executionIdLike string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdLike = &executionIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdNotlike(executionIdNotlike string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdNotlike = &executionIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdIlike(executionIdIlike string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdIlike = &executionIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdNotilike(executionIdNotilike string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdNotilike = &executionIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdDesc(executionIdDesc string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdDesc = &executionIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdAsc(executionIdAsc string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdAsc = &executionIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdObjectDesc(executionIdObjectDesc string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdObjectDesc = &executionIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggerHasExecutionsRequest) ExecutionIdObjectAsc(executionIdObjectAsc string) ApiGetTriggerHasExecutionsRequest {
	r.executionIdObjectAsc = &executionIdObjectAsc
	return r
}

func (r ApiGetTriggerHasExecutionsRequest) Execute() (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	return r.ApiService.GetTriggerHasExecutionsExecute(r)
}

/*
GetTriggerHasExecutions Method for GetTriggerHasExecutions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTriggerHasExecutionsRequest
*/
func (a *TriggerHasExecutionAPIService) GetTriggerHasExecutions(ctx context.Context) ApiGetTriggerHasExecutionsRequest {
	return ApiGetTriggerHasExecutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTriggerHasExecution
func (a *TriggerHasExecutionAPIService) GetTriggerHasExecutionsExecute(r ApiGetTriggerHasExecutionsRequest) (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTriggerHasExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerHasExecutionAPIService.GetTriggerHasExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/trigger-has-executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.triggerIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__eq", r.triggerIdEq, "form", "")
	}
	if r.triggerIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__ne", r.triggerIdNe, "form", "")
	}
	if r.triggerIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__gt", r.triggerIdGt, "form", "")
	}
	if r.triggerIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__gte", r.triggerIdGte, "form", "")
	}
	if r.triggerIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__lt", r.triggerIdLt, "form", "")
	}
	if r.triggerIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__lte", r.triggerIdLte, "form", "")
	}
	if r.triggerIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__in", r.triggerIdIn, "form", "")
	}
	if r.triggerIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notin", r.triggerIdNotin, "form", "")
	}
	if r.triggerIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__like", r.triggerIdLike, "form", "")
	}
	if r.triggerIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notlike", r.triggerIdNotlike, "form", "")
	}
	if r.triggerIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__ilike", r.triggerIdIlike, "form", "")
	}
	if r.triggerIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notilike", r.triggerIdNotilike, "form", "")
	}
	if r.triggerIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__desc", r.triggerIdDesc, "form", "")
	}
	if r.triggerIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__asc", r.triggerIdAsc, "form", "")
	}
	if r.triggerIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id_object__desc", r.triggerIdObjectDesc, "form", "")
	}
	if r.triggerIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id_object__asc", r.triggerIdObjectAsc, "form", "")
	}
	if r.executionIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__eq", r.executionIdEq, "form", "")
	}
	if r.executionIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__ne", r.executionIdNe, "form", "")
	}
	if r.executionIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__gt", r.executionIdGt, "form", "")
	}
	if r.executionIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__gte", r.executionIdGte, "form", "")
	}
	if r.executionIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__lt", r.executionIdLt, "form", "")
	}
	if r.executionIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__lte", r.executionIdLte, "form", "")
	}
	if r.executionIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__in", r.executionIdIn, "form", "")
	}
	if r.executionIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__notin", r.executionIdNotin, "form", "")
	}
	if r.executionIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__like", r.executionIdLike, "form", "")
	}
	if r.executionIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__notlike", r.executionIdNotlike, "form", "")
	}
	if r.executionIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__ilike", r.executionIdIlike, "form", "")
	}
	if r.executionIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__notilike", r.executionIdNotilike, "form", "")
	}
	if r.executionIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__desc", r.executionIdDesc, "form", "")
	}
	if r.executionIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id__asc", r.executionIdAsc, "form", "")
	}
	if r.executionIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id_object__desc", r.executionIdObjectDesc, "form", "")
	}
	if r.executionIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "execution_id_object__asc", r.executionIdObjectAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTriggerHasExecutionRequest struct {
	ctx context.Context
	ApiService *TriggerHasExecutionAPIService
	primaryKey string
	triggerHasExecution *TriggerHasExecution
	depth *int64
}

func (r ApiPatchTriggerHasExecutionRequest) TriggerHasExecution(triggerHasExecution TriggerHasExecution) ApiPatchTriggerHasExecutionRequest {
	r.triggerHasExecution = &triggerHasExecution
	return r
}

// Query parameter depth
func (r ApiPatchTriggerHasExecutionRequest) Depth(depth int64) ApiPatchTriggerHasExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchTriggerHasExecutionRequest) Execute() (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	return r.ApiService.PatchTriggerHasExecutionExecute(r)
}

/*
PatchTriggerHasExecution Method for PatchTriggerHasExecution

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchTriggerHasExecutionRequest
*/
func (a *TriggerHasExecutionAPIService) PatchTriggerHasExecution(ctx context.Context, primaryKey string) ApiPatchTriggerHasExecutionRequest {
	return ApiPatchTriggerHasExecutionRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTriggerHasExecution
func (a *TriggerHasExecutionAPIService) PatchTriggerHasExecutionExecute(r ApiPatchTriggerHasExecutionRequest) (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTriggerHasExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerHasExecutionAPIService.PatchTriggerHasExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/trigger-has-executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.triggerHasExecution == nil {
		return localVarReturnValue, nil, reportError("triggerHasExecution is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.triggerHasExecution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTriggerHasExecutionsRequest struct {
	ctx context.Context
	ApiService *TriggerHasExecutionAPIService
	triggerHasExecution *[]TriggerHasExecution
	depth *int64
}

func (r ApiPostTriggerHasExecutionsRequest) TriggerHasExecution(triggerHasExecution []TriggerHasExecution) ApiPostTriggerHasExecutionsRequest {
	r.triggerHasExecution = &triggerHasExecution
	return r
}

// Query parameter depth
func (r ApiPostTriggerHasExecutionsRequest) Depth(depth int64) ApiPostTriggerHasExecutionsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostTriggerHasExecutionsRequest) Execute() (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	return r.ApiService.PostTriggerHasExecutionsExecute(r)
}

/*
PostTriggerHasExecutions Method for PostTriggerHasExecutions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTriggerHasExecutionsRequest
*/
func (a *TriggerHasExecutionAPIService) PostTriggerHasExecutions(ctx context.Context) ApiPostTriggerHasExecutionsRequest {
	return ApiPostTriggerHasExecutionsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTriggerHasExecution
func (a *TriggerHasExecutionAPIService) PostTriggerHasExecutionsExecute(r ApiPostTriggerHasExecutionsRequest) (*ResponseWithGenericOfTriggerHasExecution, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTriggerHasExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerHasExecutionAPIService.PostTriggerHasExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/trigger-has-executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.triggerHasExecution == nil {
		return localVarReturnValue, nil, reportError("triggerHasExecution is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.triggerHasExecution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
