/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"time"
)

// checks if the Repository type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Repository{}

// Repository struct for Repository
type Repository struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	Id *string `json:"id,omitempty"`
	LastSynced *time.Time `json:"last_synced,omitempty"`
	Password *string `json:"password,omitempty"`
	ReferencedByChangeRepositoryIdObjects []Change `json:"referenced_by_change_repository_id_objects,omitempty"`
	ReferencedByRuleRepositoryIdObjects []Rule `json:"referenced_by_rule_repository_id_objects,omitempty"`
	SshKey *string `json:"ssh_key,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Url *string `json:"url,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewRepository instantiates a new Repository object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepository() *Repository {
	this := Repository{}
	return &this
}

// NewRepositoryWithDefaults instantiates a new Repository object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryWithDefaults() *Repository {
	this := Repository{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Repository) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Repository) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Repository) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Repository) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Repository) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *Repository) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Repository) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Repository) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Repository) SetId(v string) {
	o.Id = &v
}

// GetLastSynced returns the LastSynced field value if set, zero value otherwise.
func (o *Repository) GetLastSynced() time.Time {
	if o == nil || IsNil(o.LastSynced) {
		var ret time.Time
		return ret
	}
	return *o.LastSynced
}

// GetLastSyncedOk returns a tuple with the LastSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetLastSyncedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastSynced) {
		return nil, false
	}
	return o.LastSynced, true
}

// HasLastSynced returns a boolean if a field has been set.
func (o *Repository) HasLastSynced() bool {
	if o != nil && !IsNil(o.LastSynced) {
		return true
	}

	return false
}

// SetLastSynced gets a reference to the given time.Time and assigns it to the LastSynced field.
func (o *Repository) SetLastSynced(v time.Time) {
	o.LastSynced = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *Repository) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *Repository) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *Repository) SetPassword(v string) {
	o.Password = &v
}

// GetReferencedByChangeRepositoryIdObjects returns the ReferencedByChangeRepositoryIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetReferencedByChangeRepositoryIdObjects() []Change {
	if o == nil {
		var ret []Change
		return ret
	}
	return o.ReferencedByChangeRepositoryIdObjects
}

// GetReferencedByChangeRepositoryIdObjectsOk returns a tuple with the ReferencedByChangeRepositoryIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetReferencedByChangeRepositoryIdObjectsOk() ([]Change, bool) {
	if o == nil || IsNil(o.ReferencedByChangeRepositoryIdObjects) {
		return nil, false
	}
	return o.ReferencedByChangeRepositoryIdObjects, true
}

// HasReferencedByChangeRepositoryIdObjects returns a boolean if a field has been set.
func (o *Repository) HasReferencedByChangeRepositoryIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByChangeRepositoryIdObjects) {
		return true
	}

	return false
}

// SetReferencedByChangeRepositoryIdObjects gets a reference to the given []Change and assigns it to the ReferencedByChangeRepositoryIdObjects field.
func (o *Repository) SetReferencedByChangeRepositoryIdObjects(v []Change) {
	o.ReferencedByChangeRepositoryIdObjects = v
}

// GetReferencedByRuleRepositoryIdObjects returns the ReferencedByRuleRepositoryIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Repository) GetReferencedByRuleRepositoryIdObjects() []Rule {
	if o == nil {
		var ret []Rule
		return ret
	}
	return o.ReferencedByRuleRepositoryIdObjects
}

// GetReferencedByRuleRepositoryIdObjectsOk returns a tuple with the ReferencedByRuleRepositoryIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Repository) GetReferencedByRuleRepositoryIdObjectsOk() ([]Rule, bool) {
	if o == nil || IsNil(o.ReferencedByRuleRepositoryIdObjects) {
		return nil, false
	}
	return o.ReferencedByRuleRepositoryIdObjects, true
}

// HasReferencedByRuleRepositoryIdObjects returns a boolean if a field has been set.
func (o *Repository) HasReferencedByRuleRepositoryIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByRuleRepositoryIdObjects) {
		return true
	}

	return false
}

// SetReferencedByRuleRepositoryIdObjects gets a reference to the given []Rule and assigns it to the ReferencedByRuleRepositoryIdObjects field.
func (o *Repository) SetReferencedByRuleRepositoryIdObjects(v []Rule) {
	o.ReferencedByRuleRepositoryIdObjects = v
}

// GetSshKey returns the SshKey field value if set, zero value otherwise.
func (o *Repository) GetSshKey() string {
	if o == nil || IsNil(o.SshKey) {
		var ret string
		return ret
	}
	return *o.SshKey
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetSshKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SshKey) {
		return nil, false
	}
	return o.SshKey, true
}

// HasSshKey returns a boolean if a field has been set.
func (o *Repository) HasSshKey() bool {
	if o != nil && !IsNil(o.SshKey) {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given string and assigns it to the SshKey field.
func (o *Repository) SetSshKey(v string) {
	o.SshKey = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Repository) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Repository) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Repository) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *Repository) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *Repository) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *Repository) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *Repository) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Repository) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *Repository) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *Repository) SetUsername(v string) {
	o.Username = &v
}

func (o Repository) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Repository) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LastSynced) {
		toSerialize["last_synced"] = o.LastSynced
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if o.ReferencedByChangeRepositoryIdObjects != nil {
		toSerialize["referenced_by_change_repository_id_objects"] = o.ReferencedByChangeRepositoryIdObjects
	}
	if o.ReferencedByRuleRepositoryIdObjects != nil {
		toSerialize["referenced_by_rule_repository_id_objects"] = o.ReferencedByRuleRepositoryIdObjects
	}
	if !IsNil(o.SshKey) {
		toSerialize["ssh_key"] = o.SshKey
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableRepository struct {
	value *Repository
	isSet bool
}

func (v NullableRepository) Get() *Repository {
	return v.value
}

func (v *NullableRepository) Set(val *Repository) {
	v.value = val
	v.isSet = true
}

func (v NullableRepository) IsSet() bool {
	return v.isSet
}

func (v *NullableRepository) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepository(val *Repository) *NullableRepository {
	return &NullableRepository{value: val, isSet: true}
}

func (v NullableRepository) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepository) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


