/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// TriggerAPIService TriggerAPI service
type TriggerAPIService service

type ApiDeleteTriggerRequest struct {
	ctx context.Context
	ApiService *TriggerAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteTriggerRequest) Depth(depth int64) ApiDeleteTriggerRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteTriggerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTriggerExecute(r)
}

/*
DeleteTrigger Method for DeleteTrigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteTriggerRequest
*/
func (a *TriggerAPIService) DeleteTrigger(ctx context.Context, primaryKey string) ApiDeleteTriggerRequest {
	return ApiDeleteTriggerRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *TriggerAPIService) DeleteTriggerExecute(r ApiDeleteTriggerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerAPIService.DeleteTrigger")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/triggers/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTriggerRequest struct {
	ctx context.Context
	ApiService *TriggerAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetTriggerRequest) Depth(depth int64) ApiGetTriggerRequest {
	r.depth = &depth
	return r
}

func (r ApiGetTriggerRequest) Execute() (*ResponseWithGenericOfTrigger, *http.Response, error) {
	return r.ApiService.GetTriggerExecute(r)
}

/*
GetTrigger Method for GetTrigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetTriggerRequest
*/
func (a *TriggerAPIService) GetTrigger(ctx context.Context, primaryKey string) ApiGetTriggerRequest {
	return ApiGetTriggerRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTrigger
func (a *TriggerAPIService) GetTriggerExecute(r ApiGetTriggerRequest) (*ResponseWithGenericOfTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerAPIService.GetTrigger")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/triggers/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTriggersRequest struct {
	ctx context.Context
	ApiService *TriggerAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	jobExecutorClaimedUntilEq *time.Time
	jobExecutorClaimedUntilNe *time.Time
	jobExecutorClaimedUntilGt *time.Time
	jobExecutorClaimedUntilGte *time.Time
	jobExecutorClaimedUntilLt *time.Time
	jobExecutorClaimedUntilLte *time.Time
	jobExecutorClaimedUntilIn *time.Time
	jobExecutorClaimedUntilNotin *time.Time
	jobExecutorClaimedUntilLike *time.Time
	jobExecutorClaimedUntilNotlike *time.Time
	jobExecutorClaimedUntilIlike *time.Time
	jobExecutorClaimedUntilNotilike *time.Time
	jobExecutorClaimedUntilDesc *string
	jobExecutorClaimedUntilAsc *string
	jobExecutionStartedAtEq *time.Time
	jobExecutionStartedAtNe *time.Time
	jobExecutionStartedAtGt *time.Time
	jobExecutionStartedAtGte *time.Time
	jobExecutionStartedAtLt *time.Time
	jobExecutionStartedAtLte *time.Time
	jobExecutionStartedAtIn *time.Time
	jobExecutionStartedAtNotin *time.Time
	jobExecutionStartedAtLike *time.Time
	jobExecutionStartedAtNotlike *time.Time
	jobExecutionStartedAtIlike *time.Time
	jobExecutionStartedAtNotilike *time.Time
	jobExecutionStartedAtDesc *string
	jobExecutionStartedAtAsc *string
	ruleIdEq *string
	ruleIdNe *string
	ruleIdGt *string
	ruleIdGte *string
	ruleIdLt *string
	ruleIdLte *string
	ruleIdIn *string
	ruleIdNotin *string
	ruleIdLike *string
	ruleIdNotlike *string
	ruleIdIlike *string
	ruleIdNotilike *string
	ruleIdDesc *string
	ruleIdAsc *string
	ruleIdObjectDesc *string
	ruleIdObjectAsc *string
	changeIdEq *string
	changeIdNe *string
	changeIdGt *string
	changeIdGte *string
	changeIdLt *string
	changeIdLte *string
	changeIdIn *string
	changeIdNotin *string
	changeIdLike *string
	changeIdNotlike *string
	changeIdIlike *string
	changeIdNotilike *string
	changeIdDesc *string
	changeIdAsc *string
	changeIdObjectDesc *string
	changeIdObjectAsc *string
	referencedByExecutionTriggerIdObjectsDesc *string
	referencedByExecutionTriggerIdObjectsAsc *string
	referencedByTriggerHasExecutionTriggerIdObjectsDesc *string
	referencedByTriggerHasExecutionTriggerIdObjectsAsc *string
}

// SQL LIMIT operator
func (r ApiGetTriggersRequest) Limit(limit int32) ApiGetTriggersRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetTriggersRequest) Offset(offset int32) ApiGetTriggersRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetTriggersRequest) Depth(depth int32) ApiGetTriggersRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) IdEq(idEq string) ApiGetTriggersRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) IdNe(idNe string) ApiGetTriggersRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) IdGt(idGt string) ApiGetTriggersRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) IdGte(idGte string) ApiGetTriggersRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) IdLt(idLt string) ApiGetTriggersRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) IdLte(idLte string) ApiGetTriggersRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) IdIn(idIn string) ApiGetTriggersRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) IdNotin(idNotin string) ApiGetTriggersRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) IdLike(idLike string) ApiGetTriggersRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) IdNotlike(idNotlike string) ApiGetTriggersRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) IdIlike(idIlike string) ApiGetTriggersRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) IdNotilike(idNotilike string) ApiGetTriggersRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) IdDesc(idDesc string) ApiGetTriggersRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) IdAsc(idAsc string) ApiGetTriggersRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) CreatedAtEq(createdAtEq time.Time) ApiGetTriggersRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) CreatedAtNe(createdAtNe time.Time) ApiGetTriggersRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) CreatedAtGt(createdAtGt time.Time) ApiGetTriggersRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) CreatedAtGte(createdAtGte time.Time) ApiGetTriggersRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) CreatedAtLt(createdAtLt time.Time) ApiGetTriggersRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) CreatedAtLte(createdAtLte time.Time) ApiGetTriggersRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) CreatedAtIn(createdAtIn time.Time) ApiGetTriggersRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetTriggersRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) CreatedAtLike(createdAtLike time.Time) ApiGetTriggersRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetTriggersRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetTriggersRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetTriggersRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) CreatedAtDesc(createdAtDesc string) ApiGetTriggersRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) CreatedAtAsc(createdAtAsc string) ApiGetTriggersRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetTriggersRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetTriggersRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetTriggersRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetTriggersRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetTriggersRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetTriggersRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetTriggersRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetTriggersRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetTriggersRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetTriggersRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetTriggersRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetTriggersRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetTriggersRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetTriggersRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetTriggersRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetTriggersRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetTriggersRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetTriggersRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetTriggersRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetTriggersRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetTriggersRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetTriggersRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetTriggersRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetTriggersRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetTriggersRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetTriggersRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) DeletedAtDesc(deletedAtDesc string) ApiGetTriggersRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) DeletedAtAsc(deletedAtAsc string) ApiGetTriggersRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilEq(jobExecutorClaimedUntilEq time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilEq = &jobExecutorClaimedUntilEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilNe(jobExecutorClaimedUntilNe time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilNe = &jobExecutorClaimedUntilNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilGt(jobExecutorClaimedUntilGt time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilGt = &jobExecutorClaimedUntilGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilGte(jobExecutorClaimedUntilGte time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilGte = &jobExecutorClaimedUntilGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilLt(jobExecutorClaimedUntilLt time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilLt = &jobExecutorClaimedUntilLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilLte(jobExecutorClaimedUntilLte time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilLte = &jobExecutorClaimedUntilLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilIn(jobExecutorClaimedUntilIn time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilIn = &jobExecutorClaimedUntilIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilNotin(jobExecutorClaimedUntilNotin time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilNotin = &jobExecutorClaimedUntilNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilLike(jobExecutorClaimedUntilLike time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilLike = &jobExecutorClaimedUntilLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilNotlike(jobExecutorClaimedUntilNotlike time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilNotlike = &jobExecutorClaimedUntilNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilIlike(jobExecutorClaimedUntilIlike time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilIlike = &jobExecutorClaimedUntilIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilNotilike(jobExecutorClaimedUntilNotilike time.Time) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilNotilike = &jobExecutorClaimedUntilNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilDesc(jobExecutorClaimedUntilDesc string) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilDesc = &jobExecutorClaimedUntilDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) JobExecutorClaimedUntilAsc(jobExecutorClaimedUntilAsc string) ApiGetTriggersRequest {
	r.jobExecutorClaimedUntilAsc = &jobExecutorClaimedUntilAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) JobExecutionStartedAtEq(jobExecutionStartedAtEq time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtEq = &jobExecutionStartedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) JobExecutionStartedAtNe(jobExecutionStartedAtNe time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtNe = &jobExecutionStartedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutionStartedAtGt(jobExecutionStartedAtGt time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtGt = &jobExecutionStartedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutionStartedAtGte(jobExecutionStartedAtGte time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtGte = &jobExecutionStartedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutionStartedAtLt(jobExecutionStartedAtLt time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtLt = &jobExecutionStartedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) JobExecutionStartedAtLte(jobExecutionStartedAtLte time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtLte = &jobExecutionStartedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) JobExecutionStartedAtIn(jobExecutionStartedAtIn time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtIn = &jobExecutionStartedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) JobExecutionStartedAtNotin(jobExecutionStartedAtNotin time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtNotin = &jobExecutionStartedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutionStartedAtLike(jobExecutionStartedAtLike time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtLike = &jobExecutionStartedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutionStartedAtNotlike(jobExecutionStartedAtNotlike time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtNotlike = &jobExecutionStartedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutionStartedAtIlike(jobExecutionStartedAtIlike time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtIlike = &jobExecutionStartedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) JobExecutionStartedAtNotilike(jobExecutionStartedAtNotilike time.Time) ApiGetTriggersRequest {
	r.jobExecutionStartedAtNotilike = &jobExecutionStartedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) JobExecutionStartedAtDesc(jobExecutionStartedAtDesc string) ApiGetTriggersRequest {
	r.jobExecutionStartedAtDesc = &jobExecutionStartedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) JobExecutionStartedAtAsc(jobExecutionStartedAtAsc string) ApiGetTriggersRequest {
	r.jobExecutionStartedAtAsc = &jobExecutionStartedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) RuleIdEq(ruleIdEq string) ApiGetTriggersRequest {
	r.ruleIdEq = &ruleIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) RuleIdNe(ruleIdNe string) ApiGetTriggersRequest {
	r.ruleIdNe = &ruleIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) RuleIdGt(ruleIdGt string) ApiGetTriggersRequest {
	r.ruleIdGt = &ruleIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) RuleIdGte(ruleIdGte string) ApiGetTriggersRequest {
	r.ruleIdGte = &ruleIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) RuleIdLt(ruleIdLt string) ApiGetTriggersRequest {
	r.ruleIdLt = &ruleIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) RuleIdLte(ruleIdLte string) ApiGetTriggersRequest {
	r.ruleIdLte = &ruleIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) RuleIdIn(ruleIdIn string) ApiGetTriggersRequest {
	r.ruleIdIn = &ruleIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) RuleIdNotin(ruleIdNotin string) ApiGetTriggersRequest {
	r.ruleIdNotin = &ruleIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) RuleIdLike(ruleIdLike string) ApiGetTriggersRequest {
	r.ruleIdLike = &ruleIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) RuleIdNotlike(ruleIdNotlike string) ApiGetTriggersRequest {
	r.ruleIdNotlike = &ruleIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) RuleIdIlike(ruleIdIlike string) ApiGetTriggersRequest {
	r.ruleIdIlike = &ruleIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) RuleIdNotilike(ruleIdNotilike string) ApiGetTriggersRequest {
	r.ruleIdNotilike = &ruleIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) RuleIdDesc(ruleIdDesc string) ApiGetTriggersRequest {
	r.ruleIdDesc = &ruleIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) RuleIdAsc(ruleIdAsc string) ApiGetTriggersRequest {
	r.ruleIdAsc = &ruleIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) RuleIdObjectDesc(ruleIdObjectDesc string) ApiGetTriggersRequest {
	r.ruleIdObjectDesc = &ruleIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) RuleIdObjectAsc(ruleIdObjectAsc string) ApiGetTriggersRequest {
	r.ruleIdObjectAsc = &ruleIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetTriggersRequest) ChangeIdEq(changeIdEq string) ApiGetTriggersRequest {
	r.changeIdEq = &changeIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetTriggersRequest) ChangeIdNe(changeIdNe string) ApiGetTriggersRequest {
	r.changeIdNe = &changeIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) ChangeIdGt(changeIdGt string) ApiGetTriggersRequest {
	r.changeIdGt = &changeIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) ChangeIdGte(changeIdGte string) ApiGetTriggersRequest {
	r.changeIdGte = &changeIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetTriggersRequest) ChangeIdLt(changeIdLt string) ApiGetTriggersRequest {
	r.changeIdLt = &changeIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetTriggersRequest) ChangeIdLte(changeIdLte string) ApiGetTriggersRequest {
	r.changeIdLte = &changeIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) ChangeIdIn(changeIdIn string) ApiGetTriggersRequest {
	r.changeIdIn = &changeIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetTriggersRequest) ChangeIdNotin(changeIdNotin string) ApiGetTriggersRequest {
	r.changeIdNotin = &changeIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) ChangeIdLike(changeIdLike string) ApiGetTriggersRequest {
	r.changeIdLike = &changeIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) ChangeIdNotlike(changeIdNotlike string) ApiGetTriggersRequest {
	r.changeIdNotlike = &changeIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) ChangeIdIlike(changeIdIlike string) ApiGetTriggersRequest {
	r.changeIdIlike = &changeIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetTriggersRequest) ChangeIdNotilike(changeIdNotilike string) ApiGetTriggersRequest {
	r.changeIdNotilike = &changeIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ChangeIdDesc(changeIdDesc string) ApiGetTriggersRequest {
	r.changeIdDesc = &changeIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ChangeIdAsc(changeIdAsc string) ApiGetTriggersRequest {
	r.changeIdAsc = &changeIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ChangeIdObjectDesc(changeIdObjectDesc string) ApiGetTriggersRequest {
	r.changeIdObjectDesc = &changeIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ChangeIdObjectAsc(changeIdObjectAsc string) ApiGetTriggersRequest {
	r.changeIdObjectAsc = &changeIdObjectAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ReferencedByExecutionTriggerIdObjectsDesc(referencedByExecutionTriggerIdObjectsDesc string) ApiGetTriggersRequest {
	r.referencedByExecutionTriggerIdObjectsDesc = &referencedByExecutionTriggerIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ReferencedByExecutionTriggerIdObjectsAsc(referencedByExecutionTriggerIdObjectsAsc string) ApiGetTriggersRequest {
	r.referencedByExecutionTriggerIdObjectsAsc = &referencedByExecutionTriggerIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ReferencedByTriggerHasExecutionTriggerIdObjectsDesc(referencedByTriggerHasExecutionTriggerIdObjectsDesc string) ApiGetTriggersRequest {
	r.referencedByTriggerHasExecutionTriggerIdObjectsDesc = &referencedByTriggerHasExecutionTriggerIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetTriggersRequest) ReferencedByTriggerHasExecutionTriggerIdObjectsAsc(referencedByTriggerHasExecutionTriggerIdObjectsAsc string) ApiGetTriggersRequest {
	r.referencedByTriggerHasExecutionTriggerIdObjectsAsc = &referencedByTriggerHasExecutionTriggerIdObjectsAsc
	return r
}

func (r ApiGetTriggersRequest) Execute() (*ResponseWithGenericOfTrigger, *http.Response, error) {
	return r.ApiService.GetTriggersExecute(r)
}

/*
GetTriggers Method for GetTriggers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTriggersRequest
*/
func (a *TriggerAPIService) GetTriggers(ctx context.Context) ApiGetTriggersRequest {
	return ApiGetTriggersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTrigger
func (a *TriggerAPIService) GetTriggersExecute(r ApiGetTriggersRequest) (*ResponseWithGenericOfTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerAPIService.GetTriggers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/triggers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.jobExecutorClaimedUntilEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__eq", r.jobExecutorClaimedUntilEq, "form", "")
	}
	if r.jobExecutorClaimedUntilNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__ne", r.jobExecutorClaimedUntilNe, "form", "")
	}
	if r.jobExecutorClaimedUntilGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__gt", r.jobExecutorClaimedUntilGt, "form", "")
	}
	if r.jobExecutorClaimedUntilGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__gte", r.jobExecutorClaimedUntilGte, "form", "")
	}
	if r.jobExecutorClaimedUntilLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__lt", r.jobExecutorClaimedUntilLt, "form", "")
	}
	if r.jobExecutorClaimedUntilLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__lte", r.jobExecutorClaimedUntilLte, "form", "")
	}
	if r.jobExecutorClaimedUntilIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__in", r.jobExecutorClaimedUntilIn, "form", "")
	}
	if r.jobExecutorClaimedUntilNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notin", r.jobExecutorClaimedUntilNotin, "form", "")
	}
	if r.jobExecutorClaimedUntilLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__like", r.jobExecutorClaimedUntilLike, "form", "")
	}
	if r.jobExecutorClaimedUntilNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notlike", r.jobExecutorClaimedUntilNotlike, "form", "")
	}
	if r.jobExecutorClaimedUntilIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__ilike", r.jobExecutorClaimedUntilIlike, "form", "")
	}
	if r.jobExecutorClaimedUntilNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__notilike", r.jobExecutorClaimedUntilNotilike, "form", "")
	}
	if r.jobExecutorClaimedUntilDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__desc", r.jobExecutorClaimedUntilDesc, "form", "")
	}
	if r.jobExecutorClaimedUntilAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_executor_claimed_until__asc", r.jobExecutorClaimedUntilAsc, "form", "")
	}
	if r.jobExecutionStartedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__eq", r.jobExecutionStartedAtEq, "form", "")
	}
	if r.jobExecutionStartedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__ne", r.jobExecutionStartedAtNe, "form", "")
	}
	if r.jobExecutionStartedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__gt", r.jobExecutionStartedAtGt, "form", "")
	}
	if r.jobExecutionStartedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__gte", r.jobExecutionStartedAtGte, "form", "")
	}
	if r.jobExecutionStartedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__lt", r.jobExecutionStartedAtLt, "form", "")
	}
	if r.jobExecutionStartedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__lte", r.jobExecutionStartedAtLte, "form", "")
	}
	if r.jobExecutionStartedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__in", r.jobExecutionStartedAtIn, "form", "")
	}
	if r.jobExecutionStartedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__notin", r.jobExecutionStartedAtNotin, "form", "")
	}
	if r.jobExecutionStartedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__like", r.jobExecutionStartedAtLike, "form", "")
	}
	if r.jobExecutionStartedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__notlike", r.jobExecutionStartedAtNotlike, "form", "")
	}
	if r.jobExecutionStartedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__ilike", r.jobExecutionStartedAtIlike, "form", "")
	}
	if r.jobExecutionStartedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__notilike", r.jobExecutionStartedAtNotilike, "form", "")
	}
	if r.jobExecutionStartedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__desc", r.jobExecutionStartedAtDesc, "form", "")
	}
	if r.jobExecutionStartedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_execution_started_at__asc", r.jobExecutionStartedAtAsc, "form", "")
	}
	if r.ruleIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__eq", r.ruleIdEq, "form", "")
	}
	if r.ruleIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ne", r.ruleIdNe, "form", "")
	}
	if r.ruleIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gt", r.ruleIdGt, "form", "")
	}
	if r.ruleIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gte", r.ruleIdGte, "form", "")
	}
	if r.ruleIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lt", r.ruleIdLt, "form", "")
	}
	if r.ruleIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lte", r.ruleIdLte, "form", "")
	}
	if r.ruleIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__in", r.ruleIdIn, "form", "")
	}
	if r.ruleIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notin", r.ruleIdNotin, "form", "")
	}
	if r.ruleIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__like", r.ruleIdLike, "form", "")
	}
	if r.ruleIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notlike", r.ruleIdNotlike, "form", "")
	}
	if r.ruleIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ilike", r.ruleIdIlike, "form", "")
	}
	if r.ruleIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notilike", r.ruleIdNotilike, "form", "")
	}
	if r.ruleIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__desc", r.ruleIdDesc, "form", "")
	}
	if r.ruleIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__asc", r.ruleIdAsc, "form", "")
	}
	if r.ruleIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__desc", r.ruleIdObjectDesc, "form", "")
	}
	if r.ruleIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__asc", r.ruleIdObjectAsc, "form", "")
	}
	if r.changeIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__eq", r.changeIdEq, "form", "")
	}
	if r.changeIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__ne", r.changeIdNe, "form", "")
	}
	if r.changeIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__gt", r.changeIdGt, "form", "")
	}
	if r.changeIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__gte", r.changeIdGte, "form", "")
	}
	if r.changeIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__lt", r.changeIdLt, "form", "")
	}
	if r.changeIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__lte", r.changeIdLte, "form", "")
	}
	if r.changeIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__in", r.changeIdIn, "form", "")
	}
	if r.changeIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__notin", r.changeIdNotin, "form", "")
	}
	if r.changeIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__like", r.changeIdLike, "form", "")
	}
	if r.changeIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__notlike", r.changeIdNotlike, "form", "")
	}
	if r.changeIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__ilike", r.changeIdIlike, "form", "")
	}
	if r.changeIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__notilike", r.changeIdNotilike, "form", "")
	}
	if r.changeIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__desc", r.changeIdDesc, "form", "")
	}
	if r.changeIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id__asc", r.changeIdAsc, "form", "")
	}
	if r.changeIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id_object__desc", r.changeIdObjectDesc, "form", "")
	}
	if r.changeIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "change_id_object__asc", r.changeIdObjectAsc, "form", "")
	}
	if r.referencedByExecutionTriggerIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_trigger_id_objects__desc", r.referencedByExecutionTriggerIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionTriggerIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_trigger_id_objects__asc", r.referencedByExecutionTriggerIdObjectsAsc, "form", "")
	}
	if r.referencedByTriggerHasExecutionTriggerIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_has_execution_trigger_id_objects__desc", r.referencedByTriggerHasExecutionTriggerIdObjectsDesc, "form", "")
	}
	if r.referencedByTriggerHasExecutionTriggerIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_has_execution_trigger_id_objects__asc", r.referencedByTriggerHasExecutionTriggerIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchTriggerRequest struct {
	ctx context.Context
	ApiService *TriggerAPIService
	primaryKey string
	trigger *Trigger
	depth *int64
}

func (r ApiPatchTriggerRequest) Trigger(trigger Trigger) ApiPatchTriggerRequest {
	r.trigger = &trigger
	return r
}

// Query parameter depth
func (r ApiPatchTriggerRequest) Depth(depth int64) ApiPatchTriggerRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchTriggerRequest) Execute() (*ResponseWithGenericOfTrigger, *http.Response, error) {
	return r.ApiService.PatchTriggerExecute(r)
}

/*
PatchTrigger Method for PatchTrigger

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchTriggerRequest
*/
func (a *TriggerAPIService) PatchTrigger(ctx context.Context, primaryKey string) ApiPatchTriggerRequest {
	return ApiPatchTriggerRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTrigger
func (a *TriggerAPIService) PatchTriggerExecute(r ApiPatchTriggerRequest) (*ResponseWithGenericOfTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerAPIService.PatchTrigger")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/triggers/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.trigger == nil {
		return localVarReturnValue, nil, reportError("trigger is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.trigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostTriggersRequest struct {
	ctx context.Context
	ApiService *TriggerAPIService
	trigger *[]Trigger
	depth *int64
}

func (r ApiPostTriggersRequest) Trigger(trigger []Trigger) ApiPostTriggersRequest {
	r.trigger = &trigger
	return r
}

// Query parameter depth
func (r ApiPostTriggersRequest) Depth(depth int64) ApiPostTriggersRequest {
	r.depth = &depth
	return r
}

func (r ApiPostTriggersRequest) Execute() (*ResponseWithGenericOfTrigger, *http.Response, error) {
	return r.ApiService.PostTriggersExecute(r)
}

/*
PostTriggers Method for PostTriggers

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostTriggersRequest
*/
func (a *TriggerAPIService) PostTriggers(ctx context.Context) ApiPostTriggersRequest {
	return ApiPostTriggersRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfTrigger
func (a *TriggerAPIService) PostTriggersExecute(r ApiPostTriggersRequest) (*ResponseWithGenericOfTrigger, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfTrigger
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TriggerAPIService.PostTriggers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/triggers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.trigger == nil {
		return localVarReturnValue, nil, reportError("trigger is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.trigger
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
