/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// ChangeAPIService ChangeAPI service
type ChangeAPIService service

type ApiDeleteChangeRequest struct {
	ctx context.Context
	ApiService *ChangeAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteChangeRequest) Depth(depth int64) ApiDeleteChangeRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteChangeRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteChangeExecute(r)
}

/*
DeleteChange Method for DeleteChange

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteChangeRequest
*/
func (a *ChangeAPIService) DeleteChange(ctx context.Context, primaryKey string) ApiDeleteChangeRequest {
	return ApiDeleteChangeRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *ChangeAPIService) DeleteChangeExecute(r ApiDeleteChangeRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeAPIService.DeleteChange")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/changes/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetChangeRequest struct {
	ctx context.Context
	ApiService *ChangeAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetChangeRequest) Depth(depth int64) ApiGetChangeRequest {
	r.depth = &depth
	return r
}

func (r ApiGetChangeRequest) Execute() (*ResponseWithGenericOfChange, *http.Response, error) {
	return r.ApiService.GetChangeExecute(r)
}

/*
GetChange Method for GetChange

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetChangeRequest
*/
func (a *ChangeAPIService) GetChange(ctx context.Context, primaryKey string) ApiGetChangeRequest {
	return ApiGetChangeRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfChange
func (a *ChangeAPIService) GetChangeExecute(r ApiGetChangeRequest) (*ResponseWithGenericOfChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeAPIService.GetChange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/changes/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetChangesRequest struct {
	ctx context.Context
	ApiService *ChangeAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	branchNameEq *string
	branchNameNe *string
	branchNameGt *string
	branchNameGte *string
	branchNameLt *string
	branchNameLte *string
	branchNameIn *string
	branchNameNotin *string
	branchNameLike *string
	branchNameNotlike *string
	branchNameIlike *string
	branchNameNotilike *string
	branchNameDesc *string
	branchNameAsc *string
	commitHashEq *string
	commitHashNe *string
	commitHashGt *string
	commitHashGte *string
	commitHashLt *string
	commitHashLte *string
	commitHashIn *string
	commitHashNotin *string
	commitHashLike *string
	commitHashNotlike *string
	commitHashIlike *string
	commitHashNotilike *string
	commitHashDesc *string
	commitHashAsc *string
	messageEq *string
	messageNe *string
	messageGt *string
	messageGte *string
	messageLt *string
	messageLte *string
	messageIn *string
	messageNotin *string
	messageLike *string
	messageNotlike *string
	messageIlike *string
	messageNotilike *string
	messageDesc *string
	messageAsc *string
	authoredByEq *string
	authoredByNe *string
	authoredByGt *string
	authoredByGte *string
	authoredByLt *string
	authoredByLte *string
	authoredByIn *string
	authoredByNotin *string
	authoredByLike *string
	authoredByNotlike *string
	authoredByIlike *string
	authoredByNotilike *string
	authoredByDesc *string
	authoredByAsc *string
	authoredAtEq *time.Time
	authoredAtNe *time.Time
	authoredAtGt *time.Time
	authoredAtGte *time.Time
	authoredAtLt *time.Time
	authoredAtLte *time.Time
	authoredAtIn *time.Time
	authoredAtNotin *time.Time
	authoredAtLike *time.Time
	authoredAtNotlike *time.Time
	authoredAtIlike *time.Time
	authoredAtNotilike *time.Time
	authoredAtDesc *string
	authoredAtAsc *string
	committedByEq *string
	committedByNe *string
	committedByGt *string
	committedByGte *string
	committedByLt *string
	committedByLte *string
	committedByIn *string
	committedByNotin *string
	committedByLike *string
	committedByNotlike *string
	committedByIlike *string
	committedByNotilike *string
	committedByDesc *string
	committedByAsc *string
	committedAtEq *time.Time
	committedAtNe *time.Time
	committedAtGt *time.Time
	committedAtGte *time.Time
	committedAtLt *time.Time
	committedAtLte *time.Time
	committedAtIn *time.Time
	committedAtNotin *time.Time
	committedAtLike *time.Time
	committedAtNotlike *time.Time
	committedAtIlike *time.Time
	committedAtNotilike *time.Time
	committedAtDesc *string
	committedAtAsc *string
	triggerProducedAtEq *time.Time
	triggerProducedAtNe *time.Time
	triggerProducedAtGt *time.Time
	triggerProducedAtGte *time.Time
	triggerProducedAtLt *time.Time
	triggerProducedAtLte *time.Time
	triggerProducedAtIn *time.Time
	triggerProducedAtNotin *time.Time
	triggerProducedAtLike *time.Time
	triggerProducedAtNotlike *time.Time
	triggerProducedAtIlike *time.Time
	triggerProducedAtNotilike *time.Time
	triggerProducedAtDesc *string
	triggerProducedAtAsc *string
	repositoryIdEq *string
	repositoryIdNe *string
	repositoryIdGt *string
	repositoryIdGte *string
	repositoryIdLt *string
	repositoryIdLte *string
	repositoryIdIn *string
	repositoryIdNotin *string
	repositoryIdLike *string
	repositoryIdNotlike *string
	repositoryIdIlike *string
	repositoryIdNotilike *string
	repositoryIdDesc *string
	repositoryIdAsc *string
	repositoryIdObjectDesc *string
	repositoryIdObjectAsc *string
	referencedByTriggerChangeIdObjectsDesc *string
	referencedByTriggerChangeIdObjectsAsc *string
}

// SQL LIMIT operator
func (r ApiGetChangesRequest) Limit(limit int32) ApiGetChangesRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetChangesRequest) Offset(offset int32) ApiGetChangesRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetChangesRequest) Depth(depth int32) ApiGetChangesRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) IdEq(idEq string) ApiGetChangesRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) IdNe(idNe string) ApiGetChangesRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) IdGt(idGt string) ApiGetChangesRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) IdGte(idGte string) ApiGetChangesRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) IdLt(idLt string) ApiGetChangesRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) IdLte(idLte string) ApiGetChangesRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) IdIn(idIn string) ApiGetChangesRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) IdNotin(idNotin string) ApiGetChangesRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) IdLike(idLike string) ApiGetChangesRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) IdNotlike(idNotlike string) ApiGetChangesRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) IdIlike(idIlike string) ApiGetChangesRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) IdNotilike(idNotilike string) ApiGetChangesRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) IdDesc(idDesc string) ApiGetChangesRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) IdAsc(idAsc string) ApiGetChangesRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) CreatedAtEq(createdAtEq time.Time) ApiGetChangesRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) CreatedAtNe(createdAtNe time.Time) ApiGetChangesRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CreatedAtGt(createdAtGt time.Time) ApiGetChangesRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CreatedAtGte(createdAtGte time.Time) ApiGetChangesRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CreatedAtLt(createdAtLt time.Time) ApiGetChangesRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CreatedAtLte(createdAtLte time.Time) ApiGetChangesRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CreatedAtIn(createdAtIn time.Time) ApiGetChangesRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetChangesRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CreatedAtLike(createdAtLike time.Time) ApiGetChangesRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetChangesRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetChangesRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetChangesRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CreatedAtDesc(createdAtDesc string) ApiGetChangesRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CreatedAtAsc(createdAtAsc string) ApiGetChangesRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetChangesRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetChangesRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetChangesRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetChangesRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetChangesRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetChangesRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetChangesRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetChangesRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetChangesRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetChangesRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetChangesRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetChangesRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetChangesRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetChangesRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetChangesRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetChangesRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetChangesRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetChangesRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetChangesRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetChangesRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetChangesRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetChangesRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetChangesRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetChangesRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetChangesRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetChangesRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) DeletedAtDesc(deletedAtDesc string) ApiGetChangesRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) DeletedAtAsc(deletedAtAsc string) ApiGetChangesRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) BranchNameEq(branchNameEq string) ApiGetChangesRequest {
	r.branchNameEq = &branchNameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) BranchNameNe(branchNameNe string) ApiGetChangesRequest {
	r.branchNameNe = &branchNameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) BranchNameGt(branchNameGt string) ApiGetChangesRequest {
	r.branchNameGt = &branchNameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) BranchNameGte(branchNameGte string) ApiGetChangesRequest {
	r.branchNameGte = &branchNameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) BranchNameLt(branchNameLt string) ApiGetChangesRequest {
	r.branchNameLt = &branchNameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) BranchNameLte(branchNameLte string) ApiGetChangesRequest {
	r.branchNameLte = &branchNameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) BranchNameIn(branchNameIn string) ApiGetChangesRequest {
	r.branchNameIn = &branchNameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) BranchNameNotin(branchNameNotin string) ApiGetChangesRequest {
	r.branchNameNotin = &branchNameNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) BranchNameLike(branchNameLike string) ApiGetChangesRequest {
	r.branchNameLike = &branchNameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) BranchNameNotlike(branchNameNotlike string) ApiGetChangesRequest {
	r.branchNameNotlike = &branchNameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) BranchNameIlike(branchNameIlike string) ApiGetChangesRequest {
	r.branchNameIlike = &branchNameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) BranchNameNotilike(branchNameNotilike string) ApiGetChangesRequest {
	r.branchNameNotilike = &branchNameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) BranchNameDesc(branchNameDesc string) ApiGetChangesRequest {
	r.branchNameDesc = &branchNameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) BranchNameAsc(branchNameAsc string) ApiGetChangesRequest {
	r.branchNameAsc = &branchNameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) CommitHashEq(commitHashEq string) ApiGetChangesRequest {
	r.commitHashEq = &commitHashEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) CommitHashNe(commitHashNe string) ApiGetChangesRequest {
	r.commitHashNe = &commitHashNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommitHashGt(commitHashGt string) ApiGetChangesRequest {
	r.commitHashGt = &commitHashGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommitHashGte(commitHashGte string) ApiGetChangesRequest {
	r.commitHashGte = &commitHashGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommitHashLt(commitHashLt string) ApiGetChangesRequest {
	r.commitHashLt = &commitHashLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommitHashLte(commitHashLte string) ApiGetChangesRequest {
	r.commitHashLte = &commitHashLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommitHashIn(commitHashIn string) ApiGetChangesRequest {
	r.commitHashIn = &commitHashIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommitHashNotin(commitHashNotin string) ApiGetChangesRequest {
	r.commitHashNotin = &commitHashNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommitHashLike(commitHashLike string) ApiGetChangesRequest {
	r.commitHashLike = &commitHashLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommitHashNotlike(commitHashNotlike string) ApiGetChangesRequest {
	r.commitHashNotlike = &commitHashNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommitHashIlike(commitHashIlike string) ApiGetChangesRequest {
	r.commitHashIlike = &commitHashIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommitHashNotilike(commitHashNotilike string) ApiGetChangesRequest {
	r.commitHashNotilike = &commitHashNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommitHashDesc(commitHashDesc string) ApiGetChangesRequest {
	r.commitHashDesc = &commitHashDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommitHashAsc(commitHashAsc string) ApiGetChangesRequest {
	r.commitHashAsc = &commitHashAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) MessageEq(messageEq string) ApiGetChangesRequest {
	r.messageEq = &messageEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) MessageNe(messageNe string) ApiGetChangesRequest {
	r.messageNe = &messageNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) MessageGt(messageGt string) ApiGetChangesRequest {
	r.messageGt = &messageGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) MessageGte(messageGte string) ApiGetChangesRequest {
	r.messageGte = &messageGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) MessageLt(messageLt string) ApiGetChangesRequest {
	r.messageLt = &messageLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) MessageLte(messageLte string) ApiGetChangesRequest {
	r.messageLte = &messageLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) MessageIn(messageIn string) ApiGetChangesRequest {
	r.messageIn = &messageIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) MessageNotin(messageNotin string) ApiGetChangesRequest {
	r.messageNotin = &messageNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) MessageLike(messageLike string) ApiGetChangesRequest {
	r.messageLike = &messageLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) MessageNotlike(messageNotlike string) ApiGetChangesRequest {
	r.messageNotlike = &messageNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) MessageIlike(messageIlike string) ApiGetChangesRequest {
	r.messageIlike = &messageIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) MessageNotilike(messageNotilike string) ApiGetChangesRequest {
	r.messageNotilike = &messageNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) MessageDesc(messageDesc string) ApiGetChangesRequest {
	r.messageDesc = &messageDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) MessageAsc(messageAsc string) ApiGetChangesRequest {
	r.messageAsc = &messageAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) AuthoredByEq(authoredByEq string) ApiGetChangesRequest {
	r.authoredByEq = &authoredByEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) AuthoredByNe(authoredByNe string) ApiGetChangesRequest {
	r.authoredByNe = &authoredByNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredByGt(authoredByGt string) ApiGetChangesRequest {
	r.authoredByGt = &authoredByGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredByGte(authoredByGte string) ApiGetChangesRequest {
	r.authoredByGte = &authoredByGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredByLt(authoredByLt string) ApiGetChangesRequest {
	r.authoredByLt = &authoredByLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredByLte(authoredByLte string) ApiGetChangesRequest {
	r.authoredByLte = &authoredByLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) AuthoredByIn(authoredByIn string) ApiGetChangesRequest {
	r.authoredByIn = &authoredByIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) AuthoredByNotin(authoredByNotin string) ApiGetChangesRequest {
	r.authoredByNotin = &authoredByNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredByLike(authoredByLike string) ApiGetChangesRequest {
	r.authoredByLike = &authoredByLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredByNotlike(authoredByNotlike string) ApiGetChangesRequest {
	r.authoredByNotlike = &authoredByNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredByIlike(authoredByIlike string) ApiGetChangesRequest {
	r.authoredByIlike = &authoredByIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredByNotilike(authoredByNotilike string) ApiGetChangesRequest {
	r.authoredByNotilike = &authoredByNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) AuthoredByDesc(authoredByDesc string) ApiGetChangesRequest {
	r.authoredByDesc = &authoredByDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) AuthoredByAsc(authoredByAsc string) ApiGetChangesRequest {
	r.authoredByAsc = &authoredByAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) AuthoredAtEq(authoredAtEq time.Time) ApiGetChangesRequest {
	r.authoredAtEq = &authoredAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) AuthoredAtNe(authoredAtNe time.Time) ApiGetChangesRequest {
	r.authoredAtNe = &authoredAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredAtGt(authoredAtGt time.Time) ApiGetChangesRequest {
	r.authoredAtGt = &authoredAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredAtGte(authoredAtGte time.Time) ApiGetChangesRequest {
	r.authoredAtGte = &authoredAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredAtLt(authoredAtLt time.Time) ApiGetChangesRequest {
	r.authoredAtLt = &authoredAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) AuthoredAtLte(authoredAtLte time.Time) ApiGetChangesRequest {
	r.authoredAtLte = &authoredAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) AuthoredAtIn(authoredAtIn time.Time) ApiGetChangesRequest {
	r.authoredAtIn = &authoredAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) AuthoredAtNotin(authoredAtNotin time.Time) ApiGetChangesRequest {
	r.authoredAtNotin = &authoredAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredAtLike(authoredAtLike time.Time) ApiGetChangesRequest {
	r.authoredAtLike = &authoredAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredAtNotlike(authoredAtNotlike time.Time) ApiGetChangesRequest {
	r.authoredAtNotlike = &authoredAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredAtIlike(authoredAtIlike time.Time) ApiGetChangesRequest {
	r.authoredAtIlike = &authoredAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) AuthoredAtNotilike(authoredAtNotilike time.Time) ApiGetChangesRequest {
	r.authoredAtNotilike = &authoredAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) AuthoredAtDesc(authoredAtDesc string) ApiGetChangesRequest {
	r.authoredAtDesc = &authoredAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) AuthoredAtAsc(authoredAtAsc string) ApiGetChangesRequest {
	r.authoredAtAsc = &authoredAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) CommittedByEq(committedByEq string) ApiGetChangesRequest {
	r.committedByEq = &committedByEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) CommittedByNe(committedByNe string) ApiGetChangesRequest {
	r.committedByNe = &committedByNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedByGt(committedByGt string) ApiGetChangesRequest {
	r.committedByGt = &committedByGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedByGte(committedByGte string) ApiGetChangesRequest {
	r.committedByGte = &committedByGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedByLt(committedByLt string) ApiGetChangesRequest {
	r.committedByLt = &committedByLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedByLte(committedByLte string) ApiGetChangesRequest {
	r.committedByLte = &committedByLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommittedByIn(committedByIn string) ApiGetChangesRequest {
	r.committedByIn = &committedByIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommittedByNotin(committedByNotin string) ApiGetChangesRequest {
	r.committedByNotin = &committedByNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedByLike(committedByLike string) ApiGetChangesRequest {
	r.committedByLike = &committedByLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedByNotlike(committedByNotlike string) ApiGetChangesRequest {
	r.committedByNotlike = &committedByNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedByIlike(committedByIlike string) ApiGetChangesRequest {
	r.committedByIlike = &committedByIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedByNotilike(committedByNotilike string) ApiGetChangesRequest {
	r.committedByNotilike = &committedByNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommittedByDesc(committedByDesc string) ApiGetChangesRequest {
	r.committedByDesc = &committedByDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommittedByAsc(committedByAsc string) ApiGetChangesRequest {
	r.committedByAsc = &committedByAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) CommittedAtEq(committedAtEq time.Time) ApiGetChangesRequest {
	r.committedAtEq = &committedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) CommittedAtNe(committedAtNe time.Time) ApiGetChangesRequest {
	r.committedAtNe = &committedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedAtGt(committedAtGt time.Time) ApiGetChangesRequest {
	r.committedAtGt = &committedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedAtGte(committedAtGte time.Time) ApiGetChangesRequest {
	r.committedAtGte = &committedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedAtLt(committedAtLt time.Time) ApiGetChangesRequest {
	r.committedAtLt = &committedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) CommittedAtLte(committedAtLte time.Time) ApiGetChangesRequest {
	r.committedAtLte = &committedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommittedAtIn(committedAtIn time.Time) ApiGetChangesRequest {
	r.committedAtIn = &committedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) CommittedAtNotin(committedAtNotin time.Time) ApiGetChangesRequest {
	r.committedAtNotin = &committedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedAtLike(committedAtLike time.Time) ApiGetChangesRequest {
	r.committedAtLike = &committedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedAtNotlike(committedAtNotlike time.Time) ApiGetChangesRequest {
	r.committedAtNotlike = &committedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedAtIlike(committedAtIlike time.Time) ApiGetChangesRequest {
	r.committedAtIlike = &committedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) CommittedAtNotilike(committedAtNotilike time.Time) ApiGetChangesRequest {
	r.committedAtNotilike = &committedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommittedAtDesc(committedAtDesc string) ApiGetChangesRequest {
	r.committedAtDesc = &committedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) CommittedAtAsc(committedAtAsc string) ApiGetChangesRequest {
	r.committedAtAsc = &committedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) TriggerProducedAtEq(triggerProducedAtEq time.Time) ApiGetChangesRequest {
	r.triggerProducedAtEq = &triggerProducedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) TriggerProducedAtNe(triggerProducedAtNe time.Time) ApiGetChangesRequest {
	r.triggerProducedAtNe = &triggerProducedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) TriggerProducedAtGt(triggerProducedAtGt time.Time) ApiGetChangesRequest {
	r.triggerProducedAtGt = &triggerProducedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) TriggerProducedAtGte(triggerProducedAtGte time.Time) ApiGetChangesRequest {
	r.triggerProducedAtGte = &triggerProducedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) TriggerProducedAtLt(triggerProducedAtLt time.Time) ApiGetChangesRequest {
	r.triggerProducedAtLt = &triggerProducedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) TriggerProducedAtLte(triggerProducedAtLte time.Time) ApiGetChangesRequest {
	r.triggerProducedAtLte = &triggerProducedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) TriggerProducedAtIn(triggerProducedAtIn time.Time) ApiGetChangesRequest {
	r.triggerProducedAtIn = &triggerProducedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) TriggerProducedAtNotin(triggerProducedAtNotin time.Time) ApiGetChangesRequest {
	r.triggerProducedAtNotin = &triggerProducedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) TriggerProducedAtLike(triggerProducedAtLike time.Time) ApiGetChangesRequest {
	r.triggerProducedAtLike = &triggerProducedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) TriggerProducedAtNotlike(triggerProducedAtNotlike time.Time) ApiGetChangesRequest {
	r.triggerProducedAtNotlike = &triggerProducedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) TriggerProducedAtIlike(triggerProducedAtIlike time.Time) ApiGetChangesRequest {
	r.triggerProducedAtIlike = &triggerProducedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) TriggerProducedAtNotilike(triggerProducedAtNotilike time.Time) ApiGetChangesRequest {
	r.triggerProducedAtNotilike = &triggerProducedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) TriggerProducedAtDesc(triggerProducedAtDesc string) ApiGetChangesRequest {
	r.triggerProducedAtDesc = &triggerProducedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) TriggerProducedAtAsc(triggerProducedAtAsc string) ApiGetChangesRequest {
	r.triggerProducedAtAsc = &triggerProducedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetChangesRequest) RepositoryIdEq(repositoryIdEq string) ApiGetChangesRequest {
	r.repositoryIdEq = &repositoryIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetChangesRequest) RepositoryIdNe(repositoryIdNe string) ApiGetChangesRequest {
	r.repositoryIdNe = &repositoryIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetChangesRequest) RepositoryIdGt(repositoryIdGt string) ApiGetChangesRequest {
	r.repositoryIdGt = &repositoryIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) RepositoryIdGte(repositoryIdGte string) ApiGetChangesRequest {
	r.repositoryIdGte = &repositoryIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetChangesRequest) RepositoryIdLt(repositoryIdLt string) ApiGetChangesRequest {
	r.repositoryIdLt = &repositoryIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetChangesRequest) RepositoryIdLte(repositoryIdLte string) ApiGetChangesRequest {
	r.repositoryIdLte = &repositoryIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) RepositoryIdIn(repositoryIdIn string) ApiGetChangesRequest {
	r.repositoryIdIn = &repositoryIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetChangesRequest) RepositoryIdNotin(repositoryIdNotin string) ApiGetChangesRequest {
	r.repositoryIdNotin = &repositoryIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) RepositoryIdLike(repositoryIdLike string) ApiGetChangesRequest {
	r.repositoryIdLike = &repositoryIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) RepositoryIdNotlike(repositoryIdNotlike string) ApiGetChangesRequest {
	r.repositoryIdNotlike = &repositoryIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) RepositoryIdIlike(repositoryIdIlike string) ApiGetChangesRequest {
	r.repositoryIdIlike = &repositoryIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetChangesRequest) RepositoryIdNotilike(repositoryIdNotilike string) ApiGetChangesRequest {
	r.repositoryIdNotilike = &repositoryIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) RepositoryIdDesc(repositoryIdDesc string) ApiGetChangesRequest {
	r.repositoryIdDesc = &repositoryIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) RepositoryIdAsc(repositoryIdAsc string) ApiGetChangesRequest {
	r.repositoryIdAsc = &repositoryIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) RepositoryIdObjectDesc(repositoryIdObjectDesc string) ApiGetChangesRequest {
	r.repositoryIdObjectDesc = &repositoryIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) RepositoryIdObjectAsc(repositoryIdObjectAsc string) ApiGetChangesRequest {
	r.repositoryIdObjectAsc = &repositoryIdObjectAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) ReferencedByTriggerChangeIdObjectsDesc(referencedByTriggerChangeIdObjectsDesc string) ApiGetChangesRequest {
	r.referencedByTriggerChangeIdObjectsDesc = &referencedByTriggerChangeIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetChangesRequest) ReferencedByTriggerChangeIdObjectsAsc(referencedByTriggerChangeIdObjectsAsc string) ApiGetChangesRequest {
	r.referencedByTriggerChangeIdObjectsAsc = &referencedByTriggerChangeIdObjectsAsc
	return r
}

func (r ApiGetChangesRequest) Execute() (*ResponseWithGenericOfChange, *http.Response, error) {
	return r.ApiService.GetChangesExecute(r)
}

/*
GetChanges Method for GetChanges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetChangesRequest
*/
func (a *ChangeAPIService) GetChanges(ctx context.Context) ApiGetChangesRequest {
	return ApiGetChangesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfChange
func (a *ChangeAPIService) GetChangesExecute(r ApiGetChangesRequest) (*ResponseWithGenericOfChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeAPIService.GetChanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/changes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.branchNameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__eq", r.branchNameEq, "form", "")
	}
	if r.branchNameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__ne", r.branchNameNe, "form", "")
	}
	if r.branchNameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__gt", r.branchNameGt, "form", "")
	}
	if r.branchNameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__gte", r.branchNameGte, "form", "")
	}
	if r.branchNameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__lt", r.branchNameLt, "form", "")
	}
	if r.branchNameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__lte", r.branchNameLte, "form", "")
	}
	if r.branchNameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__in", r.branchNameIn, "form", "")
	}
	if r.branchNameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__notin", r.branchNameNotin, "form", "")
	}
	if r.branchNameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__like", r.branchNameLike, "form", "")
	}
	if r.branchNameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__notlike", r.branchNameNotlike, "form", "")
	}
	if r.branchNameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__ilike", r.branchNameIlike, "form", "")
	}
	if r.branchNameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__notilike", r.branchNameNotilike, "form", "")
	}
	if r.branchNameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__desc", r.branchNameDesc, "form", "")
	}
	if r.branchNameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "branch_name__asc", r.branchNameAsc, "form", "")
	}
	if r.commitHashEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__eq", r.commitHashEq, "form", "")
	}
	if r.commitHashNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__ne", r.commitHashNe, "form", "")
	}
	if r.commitHashGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__gt", r.commitHashGt, "form", "")
	}
	if r.commitHashGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__gte", r.commitHashGte, "form", "")
	}
	if r.commitHashLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__lt", r.commitHashLt, "form", "")
	}
	if r.commitHashLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__lte", r.commitHashLte, "form", "")
	}
	if r.commitHashIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__in", r.commitHashIn, "form", "")
	}
	if r.commitHashNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__notin", r.commitHashNotin, "form", "")
	}
	if r.commitHashLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__like", r.commitHashLike, "form", "")
	}
	if r.commitHashNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__notlike", r.commitHashNotlike, "form", "")
	}
	if r.commitHashIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__ilike", r.commitHashIlike, "form", "")
	}
	if r.commitHashNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__notilike", r.commitHashNotilike, "form", "")
	}
	if r.commitHashDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__desc", r.commitHashDesc, "form", "")
	}
	if r.commitHashAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "commit_hash__asc", r.commitHashAsc, "form", "")
	}
	if r.messageEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__eq", r.messageEq, "form", "")
	}
	if r.messageNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__ne", r.messageNe, "form", "")
	}
	if r.messageGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__gt", r.messageGt, "form", "")
	}
	if r.messageGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__gte", r.messageGte, "form", "")
	}
	if r.messageLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__lt", r.messageLt, "form", "")
	}
	if r.messageLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__lte", r.messageLte, "form", "")
	}
	if r.messageIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__in", r.messageIn, "form", "")
	}
	if r.messageNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__notin", r.messageNotin, "form", "")
	}
	if r.messageLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__like", r.messageLike, "form", "")
	}
	if r.messageNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__notlike", r.messageNotlike, "form", "")
	}
	if r.messageIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__ilike", r.messageIlike, "form", "")
	}
	if r.messageNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__notilike", r.messageNotilike, "form", "")
	}
	if r.messageDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__desc", r.messageDesc, "form", "")
	}
	if r.messageAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "message__asc", r.messageAsc, "form", "")
	}
	if r.authoredByEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__eq", r.authoredByEq, "form", "")
	}
	if r.authoredByNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__ne", r.authoredByNe, "form", "")
	}
	if r.authoredByGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__gt", r.authoredByGt, "form", "")
	}
	if r.authoredByGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__gte", r.authoredByGte, "form", "")
	}
	if r.authoredByLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__lt", r.authoredByLt, "form", "")
	}
	if r.authoredByLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__lte", r.authoredByLte, "form", "")
	}
	if r.authoredByIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__in", r.authoredByIn, "form", "")
	}
	if r.authoredByNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__notin", r.authoredByNotin, "form", "")
	}
	if r.authoredByLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__like", r.authoredByLike, "form", "")
	}
	if r.authoredByNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__notlike", r.authoredByNotlike, "form", "")
	}
	if r.authoredByIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__ilike", r.authoredByIlike, "form", "")
	}
	if r.authoredByNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__notilike", r.authoredByNotilike, "form", "")
	}
	if r.authoredByDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__desc", r.authoredByDesc, "form", "")
	}
	if r.authoredByAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_by__asc", r.authoredByAsc, "form", "")
	}
	if r.authoredAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__eq", r.authoredAtEq, "form", "")
	}
	if r.authoredAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__ne", r.authoredAtNe, "form", "")
	}
	if r.authoredAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__gt", r.authoredAtGt, "form", "")
	}
	if r.authoredAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__gte", r.authoredAtGte, "form", "")
	}
	if r.authoredAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__lt", r.authoredAtLt, "form", "")
	}
	if r.authoredAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__lte", r.authoredAtLte, "form", "")
	}
	if r.authoredAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__in", r.authoredAtIn, "form", "")
	}
	if r.authoredAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__notin", r.authoredAtNotin, "form", "")
	}
	if r.authoredAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__like", r.authoredAtLike, "form", "")
	}
	if r.authoredAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__notlike", r.authoredAtNotlike, "form", "")
	}
	if r.authoredAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__ilike", r.authoredAtIlike, "form", "")
	}
	if r.authoredAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__notilike", r.authoredAtNotilike, "form", "")
	}
	if r.authoredAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__desc", r.authoredAtDesc, "form", "")
	}
	if r.authoredAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "authored_at__asc", r.authoredAtAsc, "form", "")
	}
	if r.committedByEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__eq", r.committedByEq, "form", "")
	}
	if r.committedByNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__ne", r.committedByNe, "form", "")
	}
	if r.committedByGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__gt", r.committedByGt, "form", "")
	}
	if r.committedByGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__gte", r.committedByGte, "form", "")
	}
	if r.committedByLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__lt", r.committedByLt, "form", "")
	}
	if r.committedByLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__lte", r.committedByLte, "form", "")
	}
	if r.committedByIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__in", r.committedByIn, "form", "")
	}
	if r.committedByNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__notin", r.committedByNotin, "form", "")
	}
	if r.committedByLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__like", r.committedByLike, "form", "")
	}
	if r.committedByNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__notlike", r.committedByNotlike, "form", "")
	}
	if r.committedByIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__ilike", r.committedByIlike, "form", "")
	}
	if r.committedByNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__notilike", r.committedByNotilike, "form", "")
	}
	if r.committedByDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__desc", r.committedByDesc, "form", "")
	}
	if r.committedByAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_by__asc", r.committedByAsc, "form", "")
	}
	if r.committedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__eq", r.committedAtEq, "form", "")
	}
	if r.committedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__ne", r.committedAtNe, "form", "")
	}
	if r.committedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__gt", r.committedAtGt, "form", "")
	}
	if r.committedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__gte", r.committedAtGte, "form", "")
	}
	if r.committedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__lt", r.committedAtLt, "form", "")
	}
	if r.committedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__lte", r.committedAtLte, "form", "")
	}
	if r.committedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__in", r.committedAtIn, "form", "")
	}
	if r.committedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__notin", r.committedAtNotin, "form", "")
	}
	if r.committedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__like", r.committedAtLike, "form", "")
	}
	if r.committedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__notlike", r.committedAtNotlike, "form", "")
	}
	if r.committedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__ilike", r.committedAtIlike, "form", "")
	}
	if r.committedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__notilike", r.committedAtNotilike, "form", "")
	}
	if r.committedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__desc", r.committedAtDesc, "form", "")
	}
	if r.committedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "committed_at__asc", r.committedAtAsc, "form", "")
	}
	if r.triggerProducedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__eq", r.triggerProducedAtEq, "form", "")
	}
	if r.triggerProducedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__ne", r.triggerProducedAtNe, "form", "")
	}
	if r.triggerProducedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__gt", r.triggerProducedAtGt, "form", "")
	}
	if r.triggerProducedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__gte", r.triggerProducedAtGte, "form", "")
	}
	if r.triggerProducedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__lt", r.triggerProducedAtLt, "form", "")
	}
	if r.triggerProducedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__lte", r.triggerProducedAtLte, "form", "")
	}
	if r.triggerProducedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__in", r.triggerProducedAtIn, "form", "")
	}
	if r.triggerProducedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__notin", r.triggerProducedAtNotin, "form", "")
	}
	if r.triggerProducedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__like", r.triggerProducedAtLike, "form", "")
	}
	if r.triggerProducedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__notlike", r.triggerProducedAtNotlike, "form", "")
	}
	if r.triggerProducedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__ilike", r.triggerProducedAtIlike, "form", "")
	}
	if r.triggerProducedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__notilike", r.triggerProducedAtNotilike, "form", "")
	}
	if r.triggerProducedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__desc", r.triggerProducedAtDesc, "form", "")
	}
	if r.triggerProducedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_produced_at__asc", r.triggerProducedAtAsc, "form", "")
	}
	if r.repositoryIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__eq", r.repositoryIdEq, "form", "")
	}
	if r.repositoryIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__ne", r.repositoryIdNe, "form", "")
	}
	if r.repositoryIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__gt", r.repositoryIdGt, "form", "")
	}
	if r.repositoryIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__gte", r.repositoryIdGte, "form", "")
	}
	if r.repositoryIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__lt", r.repositoryIdLt, "form", "")
	}
	if r.repositoryIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__lte", r.repositoryIdLte, "form", "")
	}
	if r.repositoryIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__in", r.repositoryIdIn, "form", "")
	}
	if r.repositoryIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__notin", r.repositoryIdNotin, "form", "")
	}
	if r.repositoryIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__like", r.repositoryIdLike, "form", "")
	}
	if r.repositoryIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__notlike", r.repositoryIdNotlike, "form", "")
	}
	if r.repositoryIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__ilike", r.repositoryIdIlike, "form", "")
	}
	if r.repositoryIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__notilike", r.repositoryIdNotilike, "form", "")
	}
	if r.repositoryIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__desc", r.repositoryIdDesc, "form", "")
	}
	if r.repositoryIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id__asc", r.repositoryIdAsc, "form", "")
	}
	if r.repositoryIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id_object__desc", r.repositoryIdObjectDesc, "form", "")
	}
	if r.repositoryIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "repository_id_object__asc", r.repositoryIdObjectAsc, "form", "")
	}
	if r.referencedByTriggerChangeIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_change_id_objects__desc", r.referencedByTriggerChangeIdObjectsDesc, "form", "")
	}
	if r.referencedByTriggerChangeIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_change_id_objects__asc", r.referencedByTriggerChangeIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchChangeRequest struct {
	ctx context.Context
	ApiService *ChangeAPIService
	primaryKey string
	change *Change
	depth *int64
}

func (r ApiPatchChangeRequest) Change(change Change) ApiPatchChangeRequest {
	r.change = &change
	return r
}

// Query parameter depth
func (r ApiPatchChangeRequest) Depth(depth int64) ApiPatchChangeRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchChangeRequest) Execute() (*ResponseWithGenericOfChange, *http.Response, error) {
	return r.ApiService.PatchChangeExecute(r)
}

/*
PatchChange Method for PatchChange

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchChangeRequest
*/
func (a *ChangeAPIService) PatchChange(ctx context.Context, primaryKey string) ApiPatchChangeRequest {
	return ApiPatchChangeRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfChange
func (a *ChangeAPIService) PatchChangeExecute(r ApiPatchChangeRequest) (*ResponseWithGenericOfChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeAPIService.PatchChange")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/changes/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.change == nil {
		return localVarReturnValue, nil, reportError("change is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.change
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostChangesRequest struct {
	ctx context.Context
	ApiService *ChangeAPIService
	change *[]Change
	depth *int64
}

func (r ApiPostChangesRequest) Change(change []Change) ApiPostChangesRequest {
	r.change = &change
	return r
}

// Query parameter depth
func (r ApiPostChangesRequest) Depth(depth int64) ApiPostChangesRequest {
	r.depth = &depth
	return r
}

func (r ApiPostChangesRequest) Execute() (*ResponseWithGenericOfChange, *http.Response, error) {
	return r.ApiService.PostChangesExecute(r)
}

/*
PostChanges Method for PostChanges

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostChangesRequest
*/
func (a *ChangeAPIService) PostChanges(ctx context.Context) ApiPostChangesRequest {
	return ApiPostChangesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfChange
func (a *ChangeAPIService) PostChangesExecute(r ApiPostChangesRequest) (*ResponseWithGenericOfChange, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfChange
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ChangeAPIService.PostChanges")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/changes"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.change == nil {
		return localVarReturnValue, nil, reportError("change is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.change
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
