/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// RepositoryAPIService RepositoryAPI service
type RepositoryAPIService service

type ApiDeleteRepositoryRequest struct {
	ctx context.Context
	ApiService *RepositoryAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteRepositoryRequest) Depth(depth int64) ApiDeleteRepositoryRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteRepositoryRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRepositoryExecute(r)
}

/*
DeleteRepository Method for DeleteRepository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteRepositoryRequest
*/
func (a *RepositoryAPIService) DeleteRepository(ctx context.Context, primaryKey string) ApiDeleteRepositoryRequest {
	return ApiDeleteRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *RepositoryAPIService) DeleteRepositoryExecute(r ApiDeleteRepositoryRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoryAPIService.DeleteRepository")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/repositories/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRepositoriesRequest struct {
	ctx context.Context
	ApiService *RepositoryAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	lastSyncedEq *time.Time
	lastSyncedNe *time.Time
	lastSyncedGt *time.Time
	lastSyncedGte *time.Time
	lastSyncedLt *time.Time
	lastSyncedLte *time.Time
	lastSyncedIn *time.Time
	lastSyncedNotin *time.Time
	lastSyncedLike *time.Time
	lastSyncedNotlike *time.Time
	lastSyncedIlike *time.Time
	lastSyncedNotilike *time.Time
	lastSyncedDesc *string
	lastSyncedAsc *string
	urlEq *string
	urlNe *string
	urlGt *string
	urlGte *string
	urlLt *string
	urlLte *string
	urlIn *string
	urlNotin *string
	urlLike *string
	urlNotlike *string
	urlIlike *string
	urlNotilike *string
	urlDesc *string
	urlAsc *string
	usernameEq *string
	usernameNe *string
	usernameGt *string
	usernameGte *string
	usernameLt *string
	usernameLte *string
	usernameIn *string
	usernameNotin *string
	usernameLike *string
	usernameNotlike *string
	usernameIlike *string
	usernameNotilike *string
	usernameDesc *string
	usernameAsc *string
	passwordEq *string
	passwordNe *string
	passwordGt *string
	passwordGte *string
	passwordLt *string
	passwordLte *string
	passwordIn *string
	passwordNotin *string
	passwordLike *string
	passwordNotlike *string
	passwordIlike *string
	passwordNotilike *string
	passwordDesc *string
	passwordAsc *string
	sshKeyEq *string
	sshKeyNe *string
	sshKeyGt *string
	sshKeyGte *string
	sshKeyLt *string
	sshKeyLte *string
	sshKeyIn *string
	sshKeyNotin *string
	sshKeyLike *string
	sshKeyNotlike *string
	sshKeyIlike *string
	sshKeyNotilike *string
	sshKeyDesc *string
	sshKeyAsc *string
	referencedByRuleRepositoryIdObjectsDesc *string
	referencedByRuleRepositoryIdObjectsAsc *string
	referencedByChangeRepositoryIdObjectsDesc *string
	referencedByChangeRepositoryIdObjectsAsc *string
}

// SQL LIMIT operator
func (r ApiGetRepositoriesRequest) Limit(limit int32) ApiGetRepositoriesRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetRepositoriesRequest) Offset(offset int32) ApiGetRepositoriesRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetRepositoriesRequest) Depth(depth int32) ApiGetRepositoriesRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) IdEq(idEq string) ApiGetRepositoriesRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) IdNe(idNe string) ApiGetRepositoriesRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) IdGt(idGt string) ApiGetRepositoriesRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) IdGte(idGte string) ApiGetRepositoriesRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) IdLt(idLt string) ApiGetRepositoriesRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) IdLte(idLte string) ApiGetRepositoriesRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) IdIn(idIn string) ApiGetRepositoriesRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) IdNotin(idNotin string) ApiGetRepositoriesRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) IdLike(idLike string) ApiGetRepositoriesRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) IdNotlike(idNotlike string) ApiGetRepositoriesRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) IdIlike(idIlike string) ApiGetRepositoriesRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) IdNotilike(idNotilike string) ApiGetRepositoriesRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) IdDesc(idDesc string) ApiGetRepositoriesRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) IdAsc(idAsc string) ApiGetRepositoriesRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) CreatedAtEq(createdAtEq time.Time) ApiGetRepositoriesRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) CreatedAtNe(createdAtNe time.Time) ApiGetRepositoriesRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) CreatedAtGt(createdAtGt time.Time) ApiGetRepositoriesRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) CreatedAtGte(createdAtGte time.Time) ApiGetRepositoriesRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) CreatedAtLt(createdAtLt time.Time) ApiGetRepositoriesRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) CreatedAtLte(createdAtLte time.Time) ApiGetRepositoriesRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) CreatedAtIn(createdAtIn time.Time) ApiGetRepositoriesRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetRepositoriesRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) CreatedAtLike(createdAtLike time.Time) ApiGetRepositoriesRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetRepositoriesRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetRepositoriesRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetRepositoriesRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) CreatedAtDesc(createdAtDesc string) ApiGetRepositoriesRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) CreatedAtAsc(createdAtAsc string) ApiGetRepositoriesRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetRepositoriesRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetRepositoriesRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetRepositoriesRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetRepositoriesRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetRepositoriesRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetRepositoriesRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetRepositoriesRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetRepositoriesRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetRepositoriesRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetRepositoriesRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetRepositoriesRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetRepositoriesRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetRepositoriesRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetRepositoriesRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetRepositoriesRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetRepositoriesRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetRepositoriesRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetRepositoriesRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetRepositoriesRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetRepositoriesRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetRepositoriesRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetRepositoriesRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetRepositoriesRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetRepositoriesRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetRepositoriesRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetRepositoriesRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) DeletedAtDesc(deletedAtDesc string) ApiGetRepositoriesRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) DeletedAtAsc(deletedAtAsc string) ApiGetRepositoriesRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) LastSyncedEq(lastSyncedEq time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedEq = &lastSyncedEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) LastSyncedNe(lastSyncedNe time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedNe = &lastSyncedNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) LastSyncedGt(lastSyncedGt time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedGt = &lastSyncedGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) LastSyncedGte(lastSyncedGte time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedGte = &lastSyncedGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) LastSyncedLt(lastSyncedLt time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedLt = &lastSyncedLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) LastSyncedLte(lastSyncedLte time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedLte = &lastSyncedLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) LastSyncedIn(lastSyncedIn time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedIn = &lastSyncedIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) LastSyncedNotin(lastSyncedNotin time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedNotin = &lastSyncedNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) LastSyncedLike(lastSyncedLike time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedLike = &lastSyncedLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) LastSyncedNotlike(lastSyncedNotlike time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedNotlike = &lastSyncedNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) LastSyncedIlike(lastSyncedIlike time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedIlike = &lastSyncedIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) LastSyncedNotilike(lastSyncedNotilike time.Time) ApiGetRepositoriesRequest {
	r.lastSyncedNotilike = &lastSyncedNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) LastSyncedDesc(lastSyncedDesc string) ApiGetRepositoriesRequest {
	r.lastSyncedDesc = &lastSyncedDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) LastSyncedAsc(lastSyncedAsc string) ApiGetRepositoriesRequest {
	r.lastSyncedAsc = &lastSyncedAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) UrlEq(urlEq string) ApiGetRepositoriesRequest {
	r.urlEq = &urlEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) UrlNe(urlNe string) ApiGetRepositoriesRequest {
	r.urlNe = &urlNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UrlGt(urlGt string) ApiGetRepositoriesRequest {
	r.urlGt = &urlGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UrlGte(urlGte string) ApiGetRepositoriesRequest {
	r.urlGte = &urlGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UrlLt(urlLt string) ApiGetRepositoriesRequest {
	r.urlLt = &urlLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UrlLte(urlLte string) ApiGetRepositoriesRequest {
	r.urlLte = &urlLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UrlIn(urlIn string) ApiGetRepositoriesRequest {
	r.urlIn = &urlIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UrlNotin(urlNotin string) ApiGetRepositoriesRequest {
	r.urlNotin = &urlNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UrlLike(urlLike string) ApiGetRepositoriesRequest {
	r.urlLike = &urlLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UrlNotlike(urlNotlike string) ApiGetRepositoriesRequest {
	r.urlNotlike = &urlNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UrlIlike(urlIlike string) ApiGetRepositoriesRequest {
	r.urlIlike = &urlIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UrlNotilike(urlNotilike string) ApiGetRepositoriesRequest {
	r.urlNotilike = &urlNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UrlDesc(urlDesc string) ApiGetRepositoriesRequest {
	r.urlDesc = &urlDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UrlAsc(urlAsc string) ApiGetRepositoriesRequest {
	r.urlAsc = &urlAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) UsernameEq(usernameEq string) ApiGetRepositoriesRequest {
	r.usernameEq = &usernameEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) UsernameNe(usernameNe string) ApiGetRepositoriesRequest {
	r.usernameNe = &usernameNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UsernameGt(usernameGt string) ApiGetRepositoriesRequest {
	r.usernameGt = &usernameGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UsernameGte(usernameGte string) ApiGetRepositoriesRequest {
	r.usernameGte = &usernameGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UsernameLt(usernameLt string) ApiGetRepositoriesRequest {
	r.usernameLt = &usernameLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) UsernameLte(usernameLte string) ApiGetRepositoriesRequest {
	r.usernameLte = &usernameLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UsernameIn(usernameIn string) ApiGetRepositoriesRequest {
	r.usernameIn = &usernameIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) UsernameNotin(usernameNotin string) ApiGetRepositoriesRequest {
	r.usernameNotin = &usernameNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UsernameLike(usernameLike string) ApiGetRepositoriesRequest {
	r.usernameLike = &usernameLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UsernameNotlike(usernameNotlike string) ApiGetRepositoriesRequest {
	r.usernameNotlike = &usernameNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UsernameIlike(usernameIlike string) ApiGetRepositoriesRequest {
	r.usernameIlike = &usernameIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) UsernameNotilike(usernameNotilike string) ApiGetRepositoriesRequest {
	r.usernameNotilike = &usernameNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UsernameDesc(usernameDesc string) ApiGetRepositoriesRequest {
	r.usernameDesc = &usernameDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) UsernameAsc(usernameAsc string) ApiGetRepositoriesRequest {
	r.usernameAsc = &usernameAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) PasswordEq(passwordEq string) ApiGetRepositoriesRequest {
	r.passwordEq = &passwordEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) PasswordNe(passwordNe string) ApiGetRepositoriesRequest {
	r.passwordNe = &passwordNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) PasswordGt(passwordGt string) ApiGetRepositoriesRequest {
	r.passwordGt = &passwordGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) PasswordGte(passwordGte string) ApiGetRepositoriesRequest {
	r.passwordGte = &passwordGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) PasswordLt(passwordLt string) ApiGetRepositoriesRequest {
	r.passwordLt = &passwordLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) PasswordLte(passwordLte string) ApiGetRepositoriesRequest {
	r.passwordLte = &passwordLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) PasswordIn(passwordIn string) ApiGetRepositoriesRequest {
	r.passwordIn = &passwordIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) PasswordNotin(passwordNotin string) ApiGetRepositoriesRequest {
	r.passwordNotin = &passwordNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) PasswordLike(passwordLike string) ApiGetRepositoriesRequest {
	r.passwordLike = &passwordLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) PasswordNotlike(passwordNotlike string) ApiGetRepositoriesRequest {
	r.passwordNotlike = &passwordNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) PasswordIlike(passwordIlike string) ApiGetRepositoriesRequest {
	r.passwordIlike = &passwordIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) PasswordNotilike(passwordNotilike string) ApiGetRepositoriesRequest {
	r.passwordNotilike = &passwordNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) PasswordDesc(passwordDesc string) ApiGetRepositoriesRequest {
	r.passwordDesc = &passwordDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) PasswordAsc(passwordAsc string) ApiGetRepositoriesRequest {
	r.passwordAsc = &passwordAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRepositoriesRequest) SshKeyEq(sshKeyEq string) ApiGetRepositoriesRequest {
	r.sshKeyEq = &sshKeyEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRepositoriesRequest) SshKeyNe(sshKeyNe string) ApiGetRepositoriesRequest {
	r.sshKeyNe = &sshKeyNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) SshKeyGt(sshKeyGt string) ApiGetRepositoriesRequest {
	r.sshKeyGt = &sshKeyGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) SshKeyGte(sshKeyGte string) ApiGetRepositoriesRequest {
	r.sshKeyGte = &sshKeyGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) SshKeyLt(sshKeyLt string) ApiGetRepositoriesRequest {
	r.sshKeyLt = &sshKeyLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRepositoriesRequest) SshKeyLte(sshKeyLte string) ApiGetRepositoriesRequest {
	r.sshKeyLte = &sshKeyLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) SshKeyIn(sshKeyIn string) ApiGetRepositoriesRequest {
	r.sshKeyIn = &sshKeyIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRepositoriesRequest) SshKeyNotin(sshKeyNotin string) ApiGetRepositoriesRequest {
	r.sshKeyNotin = &sshKeyNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) SshKeyLike(sshKeyLike string) ApiGetRepositoriesRequest {
	r.sshKeyLike = &sshKeyLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) SshKeyNotlike(sshKeyNotlike string) ApiGetRepositoriesRequest {
	r.sshKeyNotlike = &sshKeyNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) SshKeyIlike(sshKeyIlike string) ApiGetRepositoriesRequest {
	r.sshKeyIlike = &sshKeyIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRepositoriesRequest) SshKeyNotilike(sshKeyNotilike string) ApiGetRepositoriesRequest {
	r.sshKeyNotilike = &sshKeyNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) SshKeyDesc(sshKeyDesc string) ApiGetRepositoriesRequest {
	r.sshKeyDesc = &sshKeyDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) SshKeyAsc(sshKeyAsc string) ApiGetRepositoriesRequest {
	r.sshKeyAsc = &sshKeyAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) ReferencedByRuleRepositoryIdObjectsDesc(referencedByRuleRepositoryIdObjectsDesc string) ApiGetRepositoriesRequest {
	r.referencedByRuleRepositoryIdObjectsDesc = &referencedByRuleRepositoryIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) ReferencedByRuleRepositoryIdObjectsAsc(referencedByRuleRepositoryIdObjectsAsc string) ApiGetRepositoriesRequest {
	r.referencedByRuleRepositoryIdObjectsAsc = &referencedByRuleRepositoryIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) ReferencedByChangeRepositoryIdObjectsDesc(referencedByChangeRepositoryIdObjectsDesc string) ApiGetRepositoriesRequest {
	r.referencedByChangeRepositoryIdObjectsDesc = &referencedByChangeRepositoryIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRepositoriesRequest) ReferencedByChangeRepositoryIdObjectsAsc(referencedByChangeRepositoryIdObjectsAsc string) ApiGetRepositoriesRequest {
	r.referencedByChangeRepositoryIdObjectsAsc = &referencedByChangeRepositoryIdObjectsAsc
	return r
}

func (r ApiGetRepositoriesRequest) Execute() (*ResponseWithGenericOfRepository, *http.Response, error) {
	return r.ApiService.GetRepositoriesExecute(r)
}

/*
GetRepositories Method for GetRepositories

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRepositoriesRequest
*/
func (a *RepositoryAPIService) GetRepositories(ctx context.Context) ApiGetRepositoriesRequest {
	return ApiGetRepositoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRepository
func (a *RepositoryAPIService) GetRepositoriesExecute(r ApiGetRepositoriesRequest) (*ResponseWithGenericOfRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoryAPIService.GetRepositories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/repositories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.lastSyncedEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__eq", r.lastSyncedEq, "form", "")
	}
	if r.lastSyncedNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__ne", r.lastSyncedNe, "form", "")
	}
	if r.lastSyncedGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gt", r.lastSyncedGt, "form", "")
	}
	if r.lastSyncedGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__gte", r.lastSyncedGte, "form", "")
	}
	if r.lastSyncedLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lt", r.lastSyncedLt, "form", "")
	}
	if r.lastSyncedLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__lte", r.lastSyncedLte, "form", "")
	}
	if r.lastSyncedIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__in", r.lastSyncedIn, "form", "")
	}
	if r.lastSyncedNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__notin", r.lastSyncedNotin, "form", "")
	}
	if r.lastSyncedLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__like", r.lastSyncedLike, "form", "")
	}
	if r.lastSyncedNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__notlike", r.lastSyncedNotlike, "form", "")
	}
	if r.lastSyncedIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__ilike", r.lastSyncedIlike, "form", "")
	}
	if r.lastSyncedNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__notilike", r.lastSyncedNotilike, "form", "")
	}
	if r.lastSyncedDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__desc", r.lastSyncedDesc, "form", "")
	}
	if r.lastSyncedAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "last_synced__asc", r.lastSyncedAsc, "form", "")
	}
	if r.urlEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__eq", r.urlEq, "form", "")
	}
	if r.urlNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__ne", r.urlNe, "form", "")
	}
	if r.urlGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__gt", r.urlGt, "form", "")
	}
	if r.urlGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__gte", r.urlGte, "form", "")
	}
	if r.urlLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__lt", r.urlLt, "form", "")
	}
	if r.urlLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__lte", r.urlLte, "form", "")
	}
	if r.urlIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__in", r.urlIn, "form", "")
	}
	if r.urlNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__notin", r.urlNotin, "form", "")
	}
	if r.urlLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__like", r.urlLike, "form", "")
	}
	if r.urlNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__notlike", r.urlNotlike, "form", "")
	}
	if r.urlIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__ilike", r.urlIlike, "form", "")
	}
	if r.urlNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__notilike", r.urlNotilike, "form", "")
	}
	if r.urlDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__desc", r.urlDesc, "form", "")
	}
	if r.urlAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "url__asc", r.urlAsc, "form", "")
	}
	if r.usernameEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__eq", r.usernameEq, "form", "")
	}
	if r.usernameNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__ne", r.usernameNe, "form", "")
	}
	if r.usernameGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__gt", r.usernameGt, "form", "")
	}
	if r.usernameGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__gte", r.usernameGte, "form", "")
	}
	if r.usernameLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__lt", r.usernameLt, "form", "")
	}
	if r.usernameLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__lte", r.usernameLte, "form", "")
	}
	if r.usernameIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__in", r.usernameIn, "form", "")
	}
	if r.usernameNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__notin", r.usernameNotin, "form", "")
	}
	if r.usernameLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__like", r.usernameLike, "form", "")
	}
	if r.usernameNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__notlike", r.usernameNotlike, "form", "")
	}
	if r.usernameIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__ilike", r.usernameIlike, "form", "")
	}
	if r.usernameNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__notilike", r.usernameNotilike, "form", "")
	}
	if r.usernameDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__desc", r.usernameDesc, "form", "")
	}
	if r.usernameAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "username__asc", r.usernameAsc, "form", "")
	}
	if r.passwordEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__eq", r.passwordEq, "form", "")
	}
	if r.passwordNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__ne", r.passwordNe, "form", "")
	}
	if r.passwordGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__gt", r.passwordGt, "form", "")
	}
	if r.passwordGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__gte", r.passwordGte, "form", "")
	}
	if r.passwordLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__lt", r.passwordLt, "form", "")
	}
	if r.passwordLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__lte", r.passwordLte, "form", "")
	}
	if r.passwordIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__in", r.passwordIn, "form", "")
	}
	if r.passwordNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__notin", r.passwordNotin, "form", "")
	}
	if r.passwordLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__like", r.passwordLike, "form", "")
	}
	if r.passwordNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__notlike", r.passwordNotlike, "form", "")
	}
	if r.passwordIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__ilike", r.passwordIlike, "form", "")
	}
	if r.passwordNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__notilike", r.passwordNotilike, "form", "")
	}
	if r.passwordDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__desc", r.passwordDesc, "form", "")
	}
	if r.passwordAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "password__asc", r.passwordAsc, "form", "")
	}
	if r.sshKeyEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__eq", r.sshKeyEq, "form", "")
	}
	if r.sshKeyNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__ne", r.sshKeyNe, "form", "")
	}
	if r.sshKeyGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__gt", r.sshKeyGt, "form", "")
	}
	if r.sshKeyGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__gte", r.sshKeyGte, "form", "")
	}
	if r.sshKeyLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__lt", r.sshKeyLt, "form", "")
	}
	if r.sshKeyLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__lte", r.sshKeyLte, "form", "")
	}
	if r.sshKeyIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__in", r.sshKeyIn, "form", "")
	}
	if r.sshKeyNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__notin", r.sshKeyNotin, "form", "")
	}
	if r.sshKeyLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__like", r.sshKeyLike, "form", "")
	}
	if r.sshKeyNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__notlike", r.sshKeyNotlike, "form", "")
	}
	if r.sshKeyIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__ilike", r.sshKeyIlike, "form", "")
	}
	if r.sshKeyNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__notilike", r.sshKeyNotilike, "form", "")
	}
	if r.sshKeyDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__desc", r.sshKeyDesc, "form", "")
	}
	if r.sshKeyAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ssh_key__asc", r.sshKeyAsc, "form", "")
	}
	if r.referencedByRuleRepositoryIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_rule_repository_id_objects__desc", r.referencedByRuleRepositoryIdObjectsDesc, "form", "")
	}
	if r.referencedByRuleRepositoryIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_rule_repository_id_objects__asc", r.referencedByRuleRepositoryIdObjectsAsc, "form", "")
	}
	if r.referencedByChangeRepositoryIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_change_repository_id_objects__desc", r.referencedByChangeRepositoryIdObjectsDesc, "form", "")
	}
	if r.referencedByChangeRepositoryIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_change_repository_id_objects__asc", r.referencedByChangeRepositoryIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRepositoryRequest struct {
	ctx context.Context
	ApiService *RepositoryAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetRepositoryRequest) Depth(depth int64) ApiGetRepositoryRequest {
	r.depth = &depth
	return r
}

func (r ApiGetRepositoryRequest) Execute() (*ResponseWithGenericOfRepository, *http.Response, error) {
	return r.ApiService.GetRepositoryExecute(r)
}

/*
GetRepository Method for GetRepository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetRepositoryRequest
*/
func (a *RepositoryAPIService) GetRepository(ctx context.Context, primaryKey string) ApiGetRepositoryRequest {
	return ApiGetRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRepository
func (a *RepositoryAPIService) GetRepositoryExecute(r ApiGetRepositoryRequest) (*ResponseWithGenericOfRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoryAPIService.GetRepository")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/repositories/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRepositoryRequest struct {
	ctx context.Context
	ApiService *RepositoryAPIService
	primaryKey string
	repository *Repository
	depth *int64
}

func (r ApiPatchRepositoryRequest) Repository(repository Repository) ApiPatchRepositoryRequest {
	r.repository = &repository
	return r
}

// Query parameter depth
func (r ApiPatchRepositoryRequest) Depth(depth int64) ApiPatchRepositoryRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchRepositoryRequest) Execute() (*ResponseWithGenericOfRepository, *http.Response, error) {
	return r.ApiService.PatchRepositoryExecute(r)
}

/*
PatchRepository Method for PatchRepository

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchRepositoryRequest
*/
func (a *RepositoryAPIService) PatchRepository(ctx context.Context, primaryKey string) ApiPatchRepositoryRequest {
	return ApiPatchRepositoryRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRepository
func (a *RepositoryAPIService) PatchRepositoryExecute(r ApiPatchRepositoryRequest) (*ResponseWithGenericOfRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoryAPIService.PatchRepository")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/repositories/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repository == nil {
		return localVarReturnValue, nil, reportError("repository is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRepositoriesRequest struct {
	ctx context.Context
	ApiService *RepositoryAPIService
	repository *[]Repository
	depth *int64
}

func (r ApiPostRepositoriesRequest) Repository(repository []Repository) ApiPostRepositoriesRequest {
	r.repository = &repository
	return r
}

// Query parameter depth
func (r ApiPostRepositoriesRequest) Depth(depth int64) ApiPostRepositoriesRequest {
	r.depth = &depth
	return r
}

func (r ApiPostRepositoriesRequest) Execute() (*ResponseWithGenericOfRepository, *http.Response, error) {
	return r.ApiService.PostRepositoriesExecute(r)
}

/*
PostRepositories Method for PostRepositories

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRepositoriesRequest
*/
func (a *RepositoryAPIService) PostRepositories(ctx context.Context) ApiPostRepositoriesRequest {
	return ApiPostRepositoriesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRepository
func (a *RepositoryAPIService) PostRepositoriesExecute(r ApiPostRepositoriesRequest) (*ResponseWithGenericOfRepository, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRepository
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RepositoryAPIService.PostRepositories")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/repositories"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.repository == nil {
		return localVarReturnValue, nil, reportError("repository is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.repository
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
