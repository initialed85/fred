/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// OutputAPIService OutputAPI service
type OutputAPIService service

type ApiDeleteOutputRequest struct {
	ctx context.Context
	ApiService *OutputAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteOutputRequest) Depth(depth int64) ApiDeleteOutputRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteOutputRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOutputExecute(r)
}

/*
DeleteOutput Method for DeleteOutput

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteOutputRequest
*/
func (a *OutputAPIService) DeleteOutput(ctx context.Context, primaryKey string) ApiDeleteOutputRequest {
	return ApiDeleteOutputRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *OutputAPIService) DeleteOutputExecute(r ApiDeleteOutputRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutputAPIService.DeleteOutput")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/outputs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOutputRequest struct {
	ctx context.Context
	ApiService *OutputAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetOutputRequest) Depth(depth int64) ApiGetOutputRequest {
	r.depth = &depth
	return r
}

func (r ApiGetOutputRequest) Execute() (*ResponseWithGenericOfOutput, *http.Response, error) {
	return r.ApiService.GetOutputExecute(r)
}

/*
GetOutput Method for GetOutput

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetOutputRequest
*/
func (a *OutputAPIService) GetOutput(ctx context.Context, primaryKey string) ApiGetOutputRequest {
	return ApiGetOutputRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfOutput
func (a *OutputAPIService) GetOutputExecute(r ApiGetOutputRequest) (*ResponseWithGenericOfOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutputAPIService.GetOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/outputs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetOutputsRequest struct {
	ctx context.Context
	ApiService *OutputAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	statusEq *string
	statusNe *string
	statusGt *string
	statusGte *string
	statusLt *string
	statusLte *string
	statusIn *string
	statusNotin *string
	statusLike *string
	statusNotlike *string
	statusIlike *string
	statusNotilike *string
	statusDesc *string
	statusAsc *string
	exitStatusEq *int64
	exitStatusNe *int64
	exitStatusGt *int64
	exitStatusGte *int64
	exitStatusLt *int64
	exitStatusLte *int64
	exitStatusIn *int64
	exitStatusNotin *int64
	exitStatusDesc *string
	exitStatusAsc *string
	bufferEq *string
	bufferNe *string
	bufferGt *string
	bufferGte *string
	bufferLt *string
	bufferLte *string
	bufferIn *string
	bufferNotin *string
	bufferLike *string
	bufferNotlike *string
	bufferIlike *string
	bufferNotilike *string
	bufferDesc *string
	bufferAsc *string
	errorEq *string
	errorNe *string
	errorGt *string
	errorGte *string
	errorLt *string
	errorLte *string
	errorIn *string
	errorNotin *string
	errorLike *string
	errorNotlike *string
	errorIlike *string
	errorNotilike *string
	errorDesc *string
	errorAsc *string
	taskIdEq *string
	taskIdNe *string
	taskIdGt *string
	taskIdGte *string
	taskIdLt *string
	taskIdLte *string
	taskIdIn *string
	taskIdNotin *string
	taskIdLike *string
	taskIdNotlike *string
	taskIdIlike *string
	taskIdNotilike *string
	taskIdDesc *string
	taskIdAsc *string
	taskIdObjectDesc *string
	taskIdObjectAsc *string
	referencedByExecutionBuildOutputIdObjectsDesc *string
	referencedByExecutionBuildOutputIdObjectsAsc *string
	referencedByExecutionTestOutputIdObjectsDesc *string
	referencedByExecutionTestOutputIdObjectsAsc *string
	referencedByExecutionPublishOutputIdObjectsDesc *string
	referencedByExecutionPublishOutputIdObjectsAsc *string
	referencedByExecutionDeployOutputIdObjectsDesc *string
	referencedByExecutionDeployOutputIdObjectsAsc *string
	referencedByExecutionValidateOutputIdObjectsDesc *string
	referencedByExecutionValidateOutputIdObjectsAsc *string
}

// SQL LIMIT operator
func (r ApiGetOutputsRequest) Limit(limit int32) ApiGetOutputsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetOutputsRequest) Offset(offset int32) ApiGetOutputsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetOutputsRequest) Depth(depth int32) ApiGetOutputsRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) IdEq(idEq string) ApiGetOutputsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) IdNe(idNe string) ApiGetOutputsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) IdGt(idGt string) ApiGetOutputsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) IdGte(idGte string) ApiGetOutputsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) IdLt(idLt string) ApiGetOutputsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) IdLte(idLte string) ApiGetOutputsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) IdIn(idIn string) ApiGetOutputsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) IdNotin(idNotin string) ApiGetOutputsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) IdLike(idLike string) ApiGetOutputsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) IdNotlike(idNotlike string) ApiGetOutputsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) IdIlike(idIlike string) ApiGetOutputsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) IdNotilike(idNotilike string) ApiGetOutputsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) IdDesc(idDesc string) ApiGetOutputsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) IdAsc(idAsc string) ApiGetOutputsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetOutputsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetOutputsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetOutputsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetOutputsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetOutputsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetOutputsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetOutputsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetOutputsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetOutputsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetOutputsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetOutputsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetOutputsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) CreatedAtDesc(createdAtDesc string) ApiGetOutputsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) CreatedAtAsc(createdAtAsc string) ApiGetOutputsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetOutputsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetOutputsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetOutputsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetOutputsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetOutputsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetOutputsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetOutputsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetOutputsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetOutputsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetOutputsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetOutputsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetOutputsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetOutputsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetOutputsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetOutputsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetOutputsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetOutputsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetOutputsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetOutputsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetOutputsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetOutputsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetOutputsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetOutputsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetOutputsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetOutputsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetOutputsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetOutputsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetOutputsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) StatusEq(statusEq string) ApiGetOutputsRequest {
	r.statusEq = &statusEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) StatusNe(statusNe string) ApiGetOutputsRequest {
	r.statusNe = &statusNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) StatusGt(statusGt string) ApiGetOutputsRequest {
	r.statusGt = &statusGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) StatusGte(statusGte string) ApiGetOutputsRequest {
	r.statusGte = &statusGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) StatusLt(statusLt string) ApiGetOutputsRequest {
	r.statusLt = &statusLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) StatusLte(statusLte string) ApiGetOutputsRequest {
	r.statusLte = &statusLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) StatusIn(statusIn string) ApiGetOutputsRequest {
	r.statusIn = &statusIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) StatusNotin(statusNotin string) ApiGetOutputsRequest {
	r.statusNotin = &statusNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) StatusLike(statusLike string) ApiGetOutputsRequest {
	r.statusLike = &statusLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) StatusNotlike(statusNotlike string) ApiGetOutputsRequest {
	r.statusNotlike = &statusNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) StatusIlike(statusIlike string) ApiGetOutputsRequest {
	r.statusIlike = &statusIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) StatusNotilike(statusNotilike string) ApiGetOutputsRequest {
	r.statusNotilike = &statusNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) StatusDesc(statusDesc string) ApiGetOutputsRequest {
	r.statusDesc = &statusDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) StatusAsc(statusAsc string) ApiGetOutputsRequest {
	r.statusAsc = &statusAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) ExitStatusEq(exitStatusEq int64) ApiGetOutputsRequest {
	r.exitStatusEq = &exitStatusEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) ExitStatusNe(exitStatusNe int64) ApiGetOutputsRequest {
	r.exitStatusNe = &exitStatusNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ExitStatusGt(exitStatusGt int64) ApiGetOutputsRequest {
	r.exitStatusGt = &exitStatusGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ExitStatusGte(exitStatusGte int64) ApiGetOutputsRequest {
	r.exitStatusGte = &exitStatusGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ExitStatusLt(exitStatusLt int64) ApiGetOutputsRequest {
	r.exitStatusLt = &exitStatusLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ExitStatusLte(exitStatusLte int64) ApiGetOutputsRequest {
	r.exitStatusLte = &exitStatusLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) ExitStatusIn(exitStatusIn int64) ApiGetOutputsRequest {
	r.exitStatusIn = &exitStatusIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) ExitStatusNotin(exitStatusNotin int64) ApiGetOutputsRequest {
	r.exitStatusNotin = &exitStatusNotin
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ExitStatusDesc(exitStatusDesc string) ApiGetOutputsRequest {
	r.exitStatusDesc = &exitStatusDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ExitStatusAsc(exitStatusAsc string) ApiGetOutputsRequest {
	r.exitStatusAsc = &exitStatusAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) BufferEq(bufferEq string) ApiGetOutputsRequest {
	r.bufferEq = &bufferEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) BufferNe(bufferNe string) ApiGetOutputsRequest {
	r.bufferNe = &bufferNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) BufferGt(bufferGt string) ApiGetOutputsRequest {
	r.bufferGt = &bufferGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) BufferGte(bufferGte string) ApiGetOutputsRequest {
	r.bufferGte = &bufferGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) BufferLt(bufferLt string) ApiGetOutputsRequest {
	r.bufferLt = &bufferLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) BufferLte(bufferLte string) ApiGetOutputsRequest {
	r.bufferLte = &bufferLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) BufferIn(bufferIn string) ApiGetOutputsRequest {
	r.bufferIn = &bufferIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) BufferNotin(bufferNotin string) ApiGetOutputsRequest {
	r.bufferNotin = &bufferNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) BufferLike(bufferLike string) ApiGetOutputsRequest {
	r.bufferLike = &bufferLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) BufferNotlike(bufferNotlike string) ApiGetOutputsRequest {
	r.bufferNotlike = &bufferNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) BufferIlike(bufferIlike string) ApiGetOutputsRequest {
	r.bufferIlike = &bufferIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) BufferNotilike(bufferNotilike string) ApiGetOutputsRequest {
	r.bufferNotilike = &bufferNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) BufferDesc(bufferDesc string) ApiGetOutputsRequest {
	r.bufferDesc = &bufferDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) BufferAsc(bufferAsc string) ApiGetOutputsRequest {
	r.bufferAsc = &bufferAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) ErrorEq(errorEq string) ApiGetOutputsRequest {
	r.errorEq = &errorEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) ErrorNe(errorNe string) ApiGetOutputsRequest {
	r.errorNe = &errorNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ErrorGt(errorGt string) ApiGetOutputsRequest {
	r.errorGt = &errorGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ErrorGte(errorGte string) ApiGetOutputsRequest {
	r.errorGte = &errorGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ErrorLt(errorLt string) ApiGetOutputsRequest {
	r.errorLt = &errorLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) ErrorLte(errorLte string) ApiGetOutputsRequest {
	r.errorLte = &errorLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) ErrorIn(errorIn string) ApiGetOutputsRequest {
	r.errorIn = &errorIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) ErrorNotin(errorNotin string) ApiGetOutputsRequest {
	r.errorNotin = &errorNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) ErrorLike(errorLike string) ApiGetOutputsRequest {
	r.errorLike = &errorLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) ErrorNotlike(errorNotlike string) ApiGetOutputsRequest {
	r.errorNotlike = &errorNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) ErrorIlike(errorIlike string) ApiGetOutputsRequest {
	r.errorIlike = &errorIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) ErrorNotilike(errorNotilike string) ApiGetOutputsRequest {
	r.errorNotilike = &errorNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ErrorDesc(errorDesc string) ApiGetOutputsRequest {
	r.errorDesc = &errorDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ErrorAsc(errorAsc string) ApiGetOutputsRequest {
	r.errorAsc = &errorAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetOutputsRequest) TaskIdEq(taskIdEq string) ApiGetOutputsRequest {
	r.taskIdEq = &taskIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetOutputsRequest) TaskIdNe(taskIdNe string) ApiGetOutputsRequest {
	r.taskIdNe = &taskIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) TaskIdGt(taskIdGt string) ApiGetOutputsRequest {
	r.taskIdGt = &taskIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) TaskIdGte(taskIdGte string) ApiGetOutputsRequest {
	r.taskIdGte = &taskIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetOutputsRequest) TaskIdLt(taskIdLt string) ApiGetOutputsRequest {
	r.taskIdLt = &taskIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetOutputsRequest) TaskIdLte(taskIdLte string) ApiGetOutputsRequest {
	r.taskIdLte = &taskIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) TaskIdIn(taskIdIn string) ApiGetOutputsRequest {
	r.taskIdIn = &taskIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetOutputsRequest) TaskIdNotin(taskIdNotin string) ApiGetOutputsRequest {
	r.taskIdNotin = &taskIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) TaskIdLike(taskIdLike string) ApiGetOutputsRequest {
	r.taskIdLike = &taskIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) TaskIdNotlike(taskIdNotlike string) ApiGetOutputsRequest {
	r.taskIdNotlike = &taskIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) TaskIdIlike(taskIdIlike string) ApiGetOutputsRequest {
	r.taskIdIlike = &taskIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetOutputsRequest) TaskIdNotilike(taskIdNotilike string) ApiGetOutputsRequest {
	r.taskIdNotilike = &taskIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) TaskIdDesc(taskIdDesc string) ApiGetOutputsRequest {
	r.taskIdDesc = &taskIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) TaskIdAsc(taskIdAsc string) ApiGetOutputsRequest {
	r.taskIdAsc = &taskIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) TaskIdObjectDesc(taskIdObjectDesc string) ApiGetOutputsRequest {
	r.taskIdObjectDesc = &taskIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) TaskIdObjectAsc(taskIdObjectAsc string) ApiGetOutputsRequest {
	r.taskIdObjectAsc = &taskIdObjectAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionBuildOutputIdObjectsDesc(referencedByExecutionBuildOutputIdObjectsDesc string) ApiGetOutputsRequest {
	r.referencedByExecutionBuildOutputIdObjectsDesc = &referencedByExecutionBuildOutputIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionBuildOutputIdObjectsAsc(referencedByExecutionBuildOutputIdObjectsAsc string) ApiGetOutputsRequest {
	r.referencedByExecutionBuildOutputIdObjectsAsc = &referencedByExecutionBuildOutputIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionTestOutputIdObjectsDesc(referencedByExecutionTestOutputIdObjectsDesc string) ApiGetOutputsRequest {
	r.referencedByExecutionTestOutputIdObjectsDesc = &referencedByExecutionTestOutputIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionTestOutputIdObjectsAsc(referencedByExecutionTestOutputIdObjectsAsc string) ApiGetOutputsRequest {
	r.referencedByExecutionTestOutputIdObjectsAsc = &referencedByExecutionTestOutputIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionPublishOutputIdObjectsDesc(referencedByExecutionPublishOutputIdObjectsDesc string) ApiGetOutputsRequest {
	r.referencedByExecutionPublishOutputIdObjectsDesc = &referencedByExecutionPublishOutputIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionPublishOutputIdObjectsAsc(referencedByExecutionPublishOutputIdObjectsAsc string) ApiGetOutputsRequest {
	r.referencedByExecutionPublishOutputIdObjectsAsc = &referencedByExecutionPublishOutputIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionDeployOutputIdObjectsDesc(referencedByExecutionDeployOutputIdObjectsDesc string) ApiGetOutputsRequest {
	r.referencedByExecutionDeployOutputIdObjectsDesc = &referencedByExecutionDeployOutputIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionDeployOutputIdObjectsAsc(referencedByExecutionDeployOutputIdObjectsAsc string) ApiGetOutputsRequest {
	r.referencedByExecutionDeployOutputIdObjectsAsc = &referencedByExecutionDeployOutputIdObjectsAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionValidateOutputIdObjectsDesc(referencedByExecutionValidateOutputIdObjectsDesc string) ApiGetOutputsRequest {
	r.referencedByExecutionValidateOutputIdObjectsDesc = &referencedByExecutionValidateOutputIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetOutputsRequest) ReferencedByExecutionValidateOutputIdObjectsAsc(referencedByExecutionValidateOutputIdObjectsAsc string) ApiGetOutputsRequest {
	r.referencedByExecutionValidateOutputIdObjectsAsc = &referencedByExecutionValidateOutputIdObjectsAsc
	return r
}

func (r ApiGetOutputsRequest) Execute() (*ResponseWithGenericOfOutput, *http.Response, error) {
	return r.ApiService.GetOutputsExecute(r)
}

/*
GetOutputs Method for GetOutputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetOutputsRequest
*/
func (a *OutputAPIService) GetOutputs(ctx context.Context) ApiGetOutputsRequest {
	return ApiGetOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfOutput
func (a *OutputAPIService) GetOutputsExecute(r ApiGetOutputsRequest) (*ResponseWithGenericOfOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutputAPIService.GetOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/outputs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.statusEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__eq", r.statusEq, "form", "")
	}
	if r.statusNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__ne", r.statusNe, "form", "")
	}
	if r.statusGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__gt", r.statusGt, "form", "")
	}
	if r.statusGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__gte", r.statusGte, "form", "")
	}
	if r.statusLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__lt", r.statusLt, "form", "")
	}
	if r.statusLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__lte", r.statusLte, "form", "")
	}
	if r.statusIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__in", r.statusIn, "form", "")
	}
	if r.statusNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notin", r.statusNotin, "form", "")
	}
	if r.statusLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__like", r.statusLike, "form", "")
	}
	if r.statusNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notlike", r.statusNotlike, "form", "")
	}
	if r.statusIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__ilike", r.statusIlike, "form", "")
	}
	if r.statusNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__notilike", r.statusNotilike, "form", "")
	}
	if r.statusDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__desc", r.statusDesc, "form", "")
	}
	if r.statusAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "status__asc", r.statusAsc, "form", "")
	}
	if r.exitStatusEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__eq", r.exitStatusEq, "form", "")
	}
	if r.exitStatusNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__ne", r.exitStatusNe, "form", "")
	}
	if r.exitStatusGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__gt", r.exitStatusGt, "form", "")
	}
	if r.exitStatusGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__gte", r.exitStatusGte, "form", "")
	}
	if r.exitStatusLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__lt", r.exitStatusLt, "form", "")
	}
	if r.exitStatusLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__lte", r.exitStatusLte, "form", "")
	}
	if r.exitStatusIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__in", r.exitStatusIn, "form", "")
	}
	if r.exitStatusNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__notin", r.exitStatusNotin, "form", "")
	}
	if r.exitStatusDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__desc", r.exitStatusDesc, "form", "")
	}
	if r.exitStatusAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "exit_status__asc", r.exitStatusAsc, "form", "")
	}
	if r.bufferEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__eq", r.bufferEq, "form", "")
	}
	if r.bufferNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__ne", r.bufferNe, "form", "")
	}
	if r.bufferGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__gt", r.bufferGt, "form", "")
	}
	if r.bufferGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__gte", r.bufferGte, "form", "")
	}
	if r.bufferLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__lt", r.bufferLt, "form", "")
	}
	if r.bufferLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__lte", r.bufferLte, "form", "")
	}
	if r.bufferIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__in", r.bufferIn, "form", "")
	}
	if r.bufferNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__notin", r.bufferNotin, "form", "")
	}
	if r.bufferLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__like", r.bufferLike, "form", "")
	}
	if r.bufferNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__notlike", r.bufferNotlike, "form", "")
	}
	if r.bufferIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__ilike", r.bufferIlike, "form", "")
	}
	if r.bufferNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__notilike", r.bufferNotilike, "form", "")
	}
	if r.bufferDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__desc", r.bufferDesc, "form", "")
	}
	if r.bufferAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "buffer__asc", r.bufferAsc, "form", "")
	}
	if r.errorEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__eq", r.errorEq, "form", "")
	}
	if r.errorNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__ne", r.errorNe, "form", "")
	}
	if r.errorGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__gt", r.errorGt, "form", "")
	}
	if r.errorGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__gte", r.errorGte, "form", "")
	}
	if r.errorLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__lt", r.errorLt, "form", "")
	}
	if r.errorLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__lte", r.errorLte, "form", "")
	}
	if r.errorIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__in", r.errorIn, "form", "")
	}
	if r.errorNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__notin", r.errorNotin, "form", "")
	}
	if r.errorLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__like", r.errorLike, "form", "")
	}
	if r.errorNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__notlike", r.errorNotlike, "form", "")
	}
	if r.errorIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__ilike", r.errorIlike, "form", "")
	}
	if r.errorNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__notilike", r.errorNotilike, "form", "")
	}
	if r.errorDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__desc", r.errorDesc, "form", "")
	}
	if r.errorAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "error__asc", r.errorAsc, "form", "")
	}
	if r.taskIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__eq", r.taskIdEq, "form", "")
	}
	if r.taskIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__ne", r.taskIdNe, "form", "")
	}
	if r.taskIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__gt", r.taskIdGt, "form", "")
	}
	if r.taskIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__gte", r.taskIdGte, "form", "")
	}
	if r.taskIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__lt", r.taskIdLt, "form", "")
	}
	if r.taskIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__lte", r.taskIdLte, "form", "")
	}
	if r.taskIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__in", r.taskIdIn, "form", "")
	}
	if r.taskIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__notin", r.taskIdNotin, "form", "")
	}
	if r.taskIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__like", r.taskIdLike, "form", "")
	}
	if r.taskIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__notlike", r.taskIdNotlike, "form", "")
	}
	if r.taskIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__ilike", r.taskIdIlike, "form", "")
	}
	if r.taskIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__notilike", r.taskIdNotilike, "form", "")
	}
	if r.taskIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__desc", r.taskIdDesc, "form", "")
	}
	if r.taskIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id__asc", r.taskIdAsc, "form", "")
	}
	if r.taskIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id_object__desc", r.taskIdObjectDesc, "form", "")
	}
	if r.taskIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "task_id_object__asc", r.taskIdObjectAsc, "form", "")
	}
	if r.referencedByExecutionBuildOutputIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_build_output_id_objects__desc", r.referencedByExecutionBuildOutputIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionBuildOutputIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_build_output_id_objects__asc", r.referencedByExecutionBuildOutputIdObjectsAsc, "form", "")
	}
	if r.referencedByExecutionTestOutputIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_test_output_id_objects__desc", r.referencedByExecutionTestOutputIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionTestOutputIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_test_output_id_objects__asc", r.referencedByExecutionTestOutputIdObjectsAsc, "form", "")
	}
	if r.referencedByExecutionPublishOutputIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_publish_output_id_objects__desc", r.referencedByExecutionPublishOutputIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionPublishOutputIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_publish_output_id_objects__asc", r.referencedByExecutionPublishOutputIdObjectsAsc, "form", "")
	}
	if r.referencedByExecutionDeployOutputIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_deploy_output_id_objects__desc", r.referencedByExecutionDeployOutputIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionDeployOutputIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_deploy_output_id_objects__asc", r.referencedByExecutionDeployOutputIdObjectsAsc, "form", "")
	}
	if r.referencedByExecutionValidateOutputIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_validate_output_id_objects__desc", r.referencedByExecutionValidateOutputIdObjectsDesc, "form", "")
	}
	if r.referencedByExecutionValidateOutputIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_execution_validate_output_id_objects__asc", r.referencedByExecutionValidateOutputIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchOutputRequest struct {
	ctx context.Context
	ApiService *OutputAPIService
	primaryKey string
	output *Output
	depth *int64
}

func (r ApiPatchOutputRequest) Output(output Output) ApiPatchOutputRequest {
	r.output = &output
	return r
}

// Query parameter depth
func (r ApiPatchOutputRequest) Depth(depth int64) ApiPatchOutputRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchOutputRequest) Execute() (*ResponseWithGenericOfOutput, *http.Response, error) {
	return r.ApiService.PatchOutputExecute(r)
}

/*
PatchOutput Method for PatchOutput

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchOutputRequest
*/
func (a *OutputAPIService) PatchOutput(ctx context.Context, primaryKey string) ApiPatchOutputRequest {
	return ApiPatchOutputRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfOutput
func (a *OutputAPIService) PatchOutputExecute(r ApiPatchOutputRequest) (*ResponseWithGenericOfOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutputAPIService.PatchOutput")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/outputs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.output == nil {
		return localVarReturnValue, nil, reportError("output is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.output
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostOutputsRequest struct {
	ctx context.Context
	ApiService *OutputAPIService
	output *[]Output
	depth *int64
}

func (r ApiPostOutputsRequest) Output(output []Output) ApiPostOutputsRequest {
	r.output = &output
	return r
}

// Query parameter depth
func (r ApiPostOutputsRequest) Depth(depth int64) ApiPostOutputsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostOutputsRequest) Execute() (*ResponseWithGenericOfOutput, *http.Response, error) {
	return r.ApiService.PostOutputsExecute(r)
}

/*
PostOutputs Method for PostOutputs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostOutputsRequest
*/
func (a *OutputAPIService) PostOutputs(ctx context.Context) ApiPostOutputsRequest {
	return ApiPostOutputsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfOutput
func (a *OutputAPIService) PostOutputsExecute(r ApiPostOutputsRequest) (*ResponseWithGenericOfOutput, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfOutput
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OutputAPIService.PostOutputs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/outputs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.output == nil {
		return localVarReturnValue, nil, reportError("output is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.output
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
