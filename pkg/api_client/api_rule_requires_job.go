/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)


// RuleRequiresJobAPIService RuleRequiresJobAPI service
type RuleRequiresJobAPIService service

type ApiDeleteRuleRequiresJobRequest struct {
	ctx context.Context
	ApiService *RuleRequiresJobAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiDeleteRuleRequiresJobRequest) Depth(depth int64) ApiDeleteRuleRequiresJobRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteRuleRequiresJobRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteRuleRequiresJobExecute(r)
}

/*
DeleteRuleRequiresJob Method for DeleteRuleRequiresJob

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiDeleteRuleRequiresJobRequest
*/
func (a *RuleRequiresJobAPIService) DeleteRuleRequiresJob(ctx context.Context, primaryKey string) ApiDeleteRuleRequiresJobRequest {
	return ApiDeleteRuleRequiresJobRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *RuleRequiresJobAPIService) DeleteRuleRequiresJobExecute(r ApiDeleteRuleRequiresJobRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleRequiresJobAPIService.DeleteRuleRequiresJob")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rule-requires-jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetRuleRequiresJobRequest struct {
	ctx context.Context
	ApiService *RuleRequiresJobAPIService
	primaryKey string
	depth *int64
}

// Query parameter depth
func (r ApiGetRuleRequiresJobRequest) Depth(depth int64) ApiGetRuleRequiresJobRequest {
	r.depth = &depth
	return r
}

func (r ApiGetRuleRequiresJobRequest) Execute() (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	return r.ApiService.GetRuleRequiresJobExecute(r)
}

/*
GetRuleRequiresJob Method for GetRuleRequiresJob

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiGetRuleRequiresJobRequest
*/
func (a *RuleRequiresJobAPIService) GetRuleRequiresJob(ctx context.Context, primaryKey string) ApiGetRuleRequiresJobRequest {
	return ApiGetRuleRequiresJobRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRuleRequiresJob
func (a *RuleRequiresJobAPIService) GetRuleRequiresJobExecute(r ApiGetRuleRequiresJobRequest) (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRuleRequiresJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleRequiresJobAPIService.GetRuleRequiresJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rule-requires-jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetRuleRequiresJobsRequest struct {
	ctx context.Context
	ApiService *RuleRequiresJobAPIService
	limit *int32
	offset *int32
	depth *int32
	idEq *string
	idNe *string
	idGt *string
	idGte *string
	idLt *string
	idLte *string
	idIn *string
	idNotin *string
	idLike *string
	idNotlike *string
	idIlike *string
	idNotilike *string
	idDesc *string
	idAsc *string
	createdAtEq *time.Time
	createdAtNe *time.Time
	createdAtGt *time.Time
	createdAtGte *time.Time
	createdAtLt *time.Time
	createdAtLte *time.Time
	createdAtIn *time.Time
	createdAtNotin *time.Time
	createdAtLike *time.Time
	createdAtNotlike *time.Time
	createdAtIlike *time.Time
	createdAtNotilike *time.Time
	createdAtDesc *string
	createdAtAsc *string
	updatedAtEq *time.Time
	updatedAtNe *time.Time
	updatedAtGt *time.Time
	updatedAtGte *time.Time
	updatedAtLt *time.Time
	updatedAtLte *time.Time
	updatedAtIn *time.Time
	updatedAtNotin *time.Time
	updatedAtLike *time.Time
	updatedAtNotlike *time.Time
	updatedAtIlike *time.Time
	updatedAtNotilike *time.Time
	updatedAtDesc *string
	updatedAtAsc *string
	deletedAtEq *time.Time
	deletedAtNe *time.Time
	deletedAtGt *time.Time
	deletedAtGte *time.Time
	deletedAtLt *time.Time
	deletedAtLte *time.Time
	deletedAtIn *time.Time
	deletedAtNotin *time.Time
	deletedAtLike *time.Time
	deletedAtNotlike *time.Time
	deletedAtIlike *time.Time
	deletedAtNotilike *time.Time
	deletedAtDesc *string
	deletedAtAsc *string
	ruleIdEq *string
	ruleIdNe *string
	ruleIdGt *string
	ruleIdGte *string
	ruleIdLt *string
	ruleIdLte *string
	ruleIdIn *string
	ruleIdNotin *string
	ruleIdLike *string
	ruleIdNotlike *string
	ruleIdIlike *string
	ruleIdNotilike *string
	ruleIdDesc *string
	ruleIdAsc *string
	ruleIdObjectDesc *string
	ruleIdObjectAsc *string
	jobIdEq *string
	jobIdNe *string
	jobIdGt *string
	jobIdGte *string
	jobIdLt *string
	jobIdLte *string
	jobIdIn *string
	jobIdNotin *string
	jobIdLike *string
	jobIdNotlike *string
	jobIdIlike *string
	jobIdNotilike *string
	jobIdDesc *string
	jobIdAsc *string
	jobIdObjectDesc *string
	jobIdObjectAsc *string
}

// SQL LIMIT operator
func (r ApiGetRuleRequiresJobsRequest) Limit(limit int32) ApiGetRuleRequiresJobsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetRuleRequiresJobsRequest) Offset(offset int32) ApiGetRuleRequiresJobsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetRuleRequiresJobsRequest) Depth(depth int32) ApiGetRuleRequiresJobsRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) IdEq(idEq string) ApiGetRuleRequiresJobsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) IdNe(idNe string) ApiGetRuleRequiresJobsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) IdGt(idGt string) ApiGetRuleRequiresJobsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) IdGte(idGte string) ApiGetRuleRequiresJobsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) IdLt(idLt string) ApiGetRuleRequiresJobsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) IdLte(idLte string) ApiGetRuleRequiresJobsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) IdIn(idIn string) ApiGetRuleRequiresJobsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) IdNotin(idNotin string) ApiGetRuleRequiresJobsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) IdLike(idLike string) ApiGetRuleRequiresJobsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) IdNotlike(idNotlike string) ApiGetRuleRequiresJobsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) IdIlike(idIlike string) ApiGetRuleRequiresJobsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) IdNotilike(idNotilike string) ApiGetRuleRequiresJobsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) IdDesc(idDesc string) ApiGetRuleRequiresJobsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) IdAsc(idAsc string) ApiGetRuleRequiresJobsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetRuleRequiresJobsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) CreatedAtDesc(createdAtDesc string) ApiGetRuleRequiresJobsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) CreatedAtAsc(createdAtAsc string) ApiGetRuleRequiresJobsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetRuleRequiresJobsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetRuleRequiresJobsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetRuleRequiresJobsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetRuleRequiresJobsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetRuleRequiresJobsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetRuleRequiresJobsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) RuleIdEq(ruleIdEq string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdEq = &ruleIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) RuleIdNe(ruleIdNe string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdNe = &ruleIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) RuleIdGt(ruleIdGt string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdGt = &ruleIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) RuleIdGte(ruleIdGte string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdGte = &ruleIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) RuleIdLt(ruleIdLt string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdLt = &ruleIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) RuleIdLte(ruleIdLte string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdLte = &ruleIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) RuleIdIn(ruleIdIn string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdIn = &ruleIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) RuleIdNotin(ruleIdNotin string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdNotin = &ruleIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) RuleIdLike(ruleIdLike string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdLike = &ruleIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) RuleIdNotlike(ruleIdNotlike string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdNotlike = &ruleIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) RuleIdIlike(ruleIdIlike string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdIlike = &ruleIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) RuleIdNotilike(ruleIdNotilike string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdNotilike = &ruleIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) RuleIdDesc(ruleIdDesc string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdDesc = &ruleIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) RuleIdAsc(ruleIdAsc string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdAsc = &ruleIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) RuleIdObjectDesc(ruleIdObjectDesc string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdObjectDesc = &ruleIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) RuleIdObjectAsc(ruleIdObjectAsc string) ApiGetRuleRequiresJobsRequest {
	r.ruleIdObjectAsc = &ruleIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) JobIdEq(jobIdEq string) ApiGetRuleRequiresJobsRequest {
	r.jobIdEq = &jobIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetRuleRequiresJobsRequest) JobIdNe(jobIdNe string) ApiGetRuleRequiresJobsRequest {
	r.jobIdNe = &jobIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) JobIdGt(jobIdGt string) ApiGetRuleRequiresJobsRequest {
	r.jobIdGt = &jobIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) JobIdGte(jobIdGte string) ApiGetRuleRequiresJobsRequest {
	r.jobIdGte = &jobIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) JobIdLt(jobIdLt string) ApiGetRuleRequiresJobsRequest {
	r.jobIdLt = &jobIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetRuleRequiresJobsRequest) JobIdLte(jobIdLte string) ApiGetRuleRequiresJobsRequest {
	r.jobIdLte = &jobIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) JobIdIn(jobIdIn string) ApiGetRuleRequiresJobsRequest {
	r.jobIdIn = &jobIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetRuleRequiresJobsRequest) JobIdNotin(jobIdNotin string) ApiGetRuleRequiresJobsRequest {
	r.jobIdNotin = &jobIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) JobIdLike(jobIdLike string) ApiGetRuleRequiresJobsRequest {
	r.jobIdLike = &jobIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) JobIdNotlike(jobIdNotlike string) ApiGetRuleRequiresJobsRequest {
	r.jobIdNotlike = &jobIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) JobIdIlike(jobIdIlike string) ApiGetRuleRequiresJobsRequest {
	r.jobIdIlike = &jobIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetRuleRequiresJobsRequest) JobIdNotilike(jobIdNotilike string) ApiGetRuleRequiresJobsRequest {
	r.jobIdNotilike = &jobIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) JobIdDesc(jobIdDesc string) ApiGetRuleRequiresJobsRequest {
	r.jobIdDesc = &jobIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) JobIdAsc(jobIdAsc string) ApiGetRuleRequiresJobsRequest {
	r.jobIdAsc = &jobIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) JobIdObjectDesc(jobIdObjectDesc string) ApiGetRuleRequiresJobsRequest {
	r.jobIdObjectDesc = &jobIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetRuleRequiresJobsRequest) JobIdObjectAsc(jobIdObjectAsc string) ApiGetRuleRequiresJobsRequest {
	r.jobIdObjectAsc = &jobIdObjectAsc
	return r
}

func (r ApiGetRuleRequiresJobsRequest) Execute() (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	return r.ApiService.GetRuleRequiresJobsExecute(r)
}

/*
GetRuleRequiresJobs Method for GetRuleRequiresJobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetRuleRequiresJobsRequest
*/
func (a *RuleRequiresJobAPIService) GetRuleRequiresJobs(ctx context.Context) ApiGetRuleRequiresJobsRequest {
	return ApiGetRuleRequiresJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRuleRequiresJob
func (a *RuleRequiresJobAPIService) GetRuleRequiresJobsExecute(r ApiGetRuleRequiresJobsRequest) (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRuleRequiresJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleRequiresJobAPIService.GetRuleRequiresJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rule-requires-jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.ruleIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__eq", r.ruleIdEq, "form", "")
	}
	if r.ruleIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ne", r.ruleIdNe, "form", "")
	}
	if r.ruleIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gt", r.ruleIdGt, "form", "")
	}
	if r.ruleIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__gte", r.ruleIdGte, "form", "")
	}
	if r.ruleIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lt", r.ruleIdLt, "form", "")
	}
	if r.ruleIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__lte", r.ruleIdLte, "form", "")
	}
	if r.ruleIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__in", r.ruleIdIn, "form", "")
	}
	if r.ruleIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notin", r.ruleIdNotin, "form", "")
	}
	if r.ruleIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__like", r.ruleIdLike, "form", "")
	}
	if r.ruleIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notlike", r.ruleIdNotlike, "form", "")
	}
	if r.ruleIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__ilike", r.ruleIdIlike, "form", "")
	}
	if r.ruleIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__notilike", r.ruleIdNotilike, "form", "")
	}
	if r.ruleIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__desc", r.ruleIdDesc, "form", "")
	}
	if r.ruleIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id__asc", r.ruleIdAsc, "form", "")
	}
	if r.ruleIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__desc", r.ruleIdObjectDesc, "form", "")
	}
	if r.ruleIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "rule_id_object__asc", r.ruleIdObjectAsc, "form", "")
	}
	if r.jobIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__eq", r.jobIdEq, "form", "")
	}
	if r.jobIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__ne", r.jobIdNe, "form", "")
	}
	if r.jobIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__gt", r.jobIdGt, "form", "")
	}
	if r.jobIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__gte", r.jobIdGte, "form", "")
	}
	if r.jobIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__lt", r.jobIdLt, "form", "")
	}
	if r.jobIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__lte", r.jobIdLte, "form", "")
	}
	if r.jobIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__in", r.jobIdIn, "form", "")
	}
	if r.jobIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notin", r.jobIdNotin, "form", "")
	}
	if r.jobIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__like", r.jobIdLike, "form", "")
	}
	if r.jobIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notlike", r.jobIdNotlike, "form", "")
	}
	if r.jobIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__ilike", r.jobIdIlike, "form", "")
	}
	if r.jobIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notilike", r.jobIdNotilike, "form", "")
	}
	if r.jobIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__desc", r.jobIdDesc, "form", "")
	}
	if r.jobIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__asc", r.jobIdAsc, "form", "")
	}
	if r.jobIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id_object__desc", r.jobIdObjectDesc, "form", "")
	}
	if r.jobIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id_object__asc", r.jobIdObjectAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchRuleRequiresJobRequest struct {
	ctx context.Context
	ApiService *RuleRequiresJobAPIService
	primaryKey string
	ruleRequiresJob *RuleRequiresJob
	depth *int64
}

func (r ApiPatchRuleRequiresJobRequest) RuleRequiresJob(ruleRequiresJob RuleRequiresJob) ApiPatchRuleRequiresJobRequest {
	r.ruleRequiresJob = &ruleRequiresJob
	return r
}

// Query parameter depth
func (r ApiPatchRuleRequiresJobRequest) Depth(depth int64) ApiPatchRuleRequiresJobRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchRuleRequiresJobRequest) Execute() (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	return r.ApiService.PatchRuleRequiresJobExecute(r)
}

/*
PatchRuleRequiresJob Method for PatchRuleRequiresJob

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param primaryKey Path parameter primaryKey
 @return ApiPatchRuleRequiresJobRequest
*/
func (a *RuleRequiresJobAPIService) PatchRuleRequiresJob(ctx context.Context, primaryKey string) ApiPatchRuleRequiresJobRequest {
	return ApiPatchRuleRequiresJobRequest{
		ApiService: a,
		ctx: ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRuleRequiresJob
func (a *RuleRequiresJobAPIService) PatchRuleRequiresJobExecute(r ApiPatchRuleRequiresJobRequest) (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRuleRequiresJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleRequiresJobAPIService.PatchRuleRequiresJob")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rule-requires-jobs/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ruleRequiresJob == nil {
		return localVarReturnValue, nil, reportError("ruleRequiresJob is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ruleRequiresJob
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostRuleRequiresJobsRequest struct {
	ctx context.Context
	ApiService *RuleRequiresJobAPIService
	ruleRequiresJob *[]RuleRequiresJob
	depth *int64
}

func (r ApiPostRuleRequiresJobsRequest) RuleRequiresJob(ruleRequiresJob []RuleRequiresJob) ApiPostRuleRequiresJobsRequest {
	r.ruleRequiresJob = &ruleRequiresJob
	return r
}

// Query parameter depth
func (r ApiPostRuleRequiresJobsRequest) Depth(depth int64) ApiPostRuleRequiresJobsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostRuleRequiresJobsRequest) Execute() (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	return r.ApiService.PostRuleRequiresJobsExecute(r)
}

/*
PostRuleRequiresJobs Method for PostRuleRequiresJobs

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiPostRuleRequiresJobsRequest
*/
func (a *RuleRequiresJobAPIService) PostRuleRequiresJobs(ctx context.Context) ApiPostRuleRequiresJobsRequest {
	return ApiPostRuleRequiresJobsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ResponseWithGenericOfRuleRequiresJob
func (a *RuleRequiresJobAPIService) PostRuleRequiresJobsExecute(r ApiPostRuleRequiresJobsRequest) (*ResponseWithGenericOfRuleRequiresJob, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ResponseWithGenericOfRuleRequiresJob
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RuleRequiresJobAPIService.PostRuleRequiresJobs")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/rule-requires-jobs"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.ruleRequiresJob == nil {
		return localVarReturnValue, nil, reportError("ruleRequiresJob is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.ruleRequiresJob
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v GetChangesDefaultResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
