/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"time"
)

// checks if the Rule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Rule{}

// Rule struct for Rule
type Rule struct {
	BranchName                               *string           `json:"branch_name,omitempty"`
	CreatedAt                                *time.Time        `json:"created_at,omitempty"`
	DeletedAt                                *time.Time        `json:"deleted_at,omitempty"`
	Id                                       *string           `json:"id,omitempty"`
	ReferencedByJobRuleIdObjects             []Job             `json:"referenced_by_job_rule_id_objects,omitempty"`
	ReferencedByRuleRequiresJobRuleIdObjects []RuleRequiresJob `json:"referenced_by_rule_requires_job_rule_id_objects,omitempty"`
	ReferencedByTriggerRuleIdObjects         []Trigger         `json:"referenced_by_trigger_rule_id_objects,omitempty"`
	RepositoryId                             *string           `json:"repository_id,omitempty"`
	RepositoryIdObject                       *Repository       `json:"repository_id_object,omitempty"`
	UpdatedAt                                *time.Time        `json:"updated_at,omitempty"`
}

// NewRule instantiates a new Rule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRule() *Rule {
	this := Rule{}
	return &this
}

// NewRuleWithDefaults instantiates a new Rule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleWithDefaults() *Rule {
	this := Rule{}
	return &this
}

// GetBranchName returns the BranchName field value if set, zero value otherwise.
func (o *Rule) GetBranchName() string {
	if o == nil || IsNil(o.BranchName) {
		var ret string
		return ret
	}
	return *o.BranchName
}

// GetBranchNameOk returns a tuple with the BranchName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetBranchNameOk() (*string, bool) {
	if o == nil || IsNil(o.BranchName) {
		return nil, false
	}
	return o.BranchName, true
}

// HasBranchName returns a boolean if a field has been set.
func (o *Rule) HasBranchName() bool {
	if o != nil && !IsNil(o.BranchName) {
		return true
	}

	return false
}

// SetBranchName gets a reference to the given string and assigns it to the BranchName field.
func (o *Rule) SetBranchName(v string) {
	o.BranchName = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Rule) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Rule) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Rule) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Rule) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Rule) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *Rule) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Rule) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Rule) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Rule) SetId(v string) {
	o.Id = &v
}

// GetReferencedByJobRuleIdObjects returns the ReferencedByJobRuleIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetReferencedByJobRuleIdObjects() []Job {
	if o == nil {
		var ret []Job
		return ret
	}
	return o.ReferencedByJobRuleIdObjects
}

// GetReferencedByJobRuleIdObjectsOk returns a tuple with the ReferencedByJobRuleIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetReferencedByJobRuleIdObjectsOk() ([]Job, bool) {
	if o == nil || IsNil(o.ReferencedByJobRuleIdObjects) {
		return nil, false
	}
	return o.ReferencedByJobRuleIdObjects, true
}

// HasReferencedByJobRuleIdObjects returns a boolean if a field has been set.
func (o *Rule) HasReferencedByJobRuleIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByJobRuleIdObjects) {
		return true
	}

	return false
}

// SetReferencedByJobRuleIdObjects gets a reference to the given []Job and assigns it to the ReferencedByJobRuleIdObjects field.
func (o *Rule) SetReferencedByJobRuleIdObjects(v []Job) {
	o.ReferencedByJobRuleIdObjects = v
}

// GetReferencedByRuleRequiresJobRuleIdObjects returns the ReferencedByRuleRequiresJobRuleIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetReferencedByRuleRequiresJobRuleIdObjects() []RuleRequiresJob {
	if o == nil {
		var ret []RuleRequiresJob
		return ret
	}
	return o.ReferencedByRuleRequiresJobRuleIdObjects
}

// GetReferencedByRuleRequiresJobRuleIdObjectsOk returns a tuple with the ReferencedByRuleRequiresJobRuleIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetReferencedByRuleRequiresJobRuleIdObjectsOk() ([]RuleRequiresJob, bool) {
	if o == nil || IsNil(o.ReferencedByRuleRequiresJobRuleIdObjects) {
		return nil, false
	}
	return o.ReferencedByRuleRequiresJobRuleIdObjects, true
}

// HasReferencedByRuleRequiresJobRuleIdObjects returns a boolean if a field has been set.
func (o *Rule) HasReferencedByRuleRequiresJobRuleIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByRuleRequiresJobRuleIdObjects) {
		return true
	}

	return false
}

// SetReferencedByRuleRequiresJobRuleIdObjects gets a reference to the given []RuleRequiresJob and assigns it to the ReferencedByRuleRequiresJobRuleIdObjects field.
func (o *Rule) SetReferencedByRuleRequiresJobRuleIdObjects(v []RuleRequiresJob) {
	o.ReferencedByRuleRequiresJobRuleIdObjects = v
}

// GetReferencedByTriggerRuleIdObjects returns the ReferencedByTriggerRuleIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rule) GetReferencedByTriggerRuleIdObjects() []Trigger {
	if o == nil {
		var ret []Trigger
		return ret
	}
	return o.ReferencedByTriggerRuleIdObjects
}

// GetReferencedByTriggerRuleIdObjectsOk returns a tuple with the ReferencedByTriggerRuleIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rule) GetReferencedByTriggerRuleIdObjectsOk() ([]Trigger, bool) {
	if o == nil || IsNil(o.ReferencedByTriggerRuleIdObjects) {
		return nil, false
	}
	return o.ReferencedByTriggerRuleIdObjects, true
}

// HasReferencedByTriggerRuleIdObjects returns a boolean if a field has been set.
func (o *Rule) HasReferencedByTriggerRuleIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByTriggerRuleIdObjects) {
		return true
	}

	return false
}

// SetReferencedByTriggerRuleIdObjects gets a reference to the given []Trigger and assigns it to the ReferencedByTriggerRuleIdObjects field.
func (o *Rule) SetReferencedByTriggerRuleIdObjects(v []Trigger) {
	o.ReferencedByTriggerRuleIdObjects = v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *Rule) GetRepositoryId() string {
	if o == nil || IsNil(o.RepositoryId) {
		var ret string
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetRepositoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *Rule) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given string and assigns it to the RepositoryId field.
func (o *Rule) SetRepositoryId(v string) {
	o.RepositoryId = &v
}

// GetRepositoryIdObject returns the RepositoryIdObject field value if set, zero value otherwise.
func (o *Rule) GetRepositoryIdObject() Repository {
	if o == nil || IsNil(o.RepositoryIdObject) {
		var ret Repository
		return ret
	}
	return *o.RepositoryIdObject
}

// GetRepositoryIdObjectOk returns a tuple with the RepositoryIdObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetRepositoryIdObjectOk() (*Repository, bool) {
	if o == nil || IsNil(o.RepositoryIdObject) {
		return nil, false
	}
	return o.RepositoryIdObject, true
}

// HasRepositoryIdObject returns a boolean if a field has been set.
func (o *Rule) HasRepositoryIdObject() bool {
	if o != nil && !IsNil(o.RepositoryIdObject) {
		return true
	}

	return false
}

// SetRepositoryIdObject gets a reference to the given Repository and assigns it to the RepositoryIdObject field.
func (o *Rule) SetRepositoryIdObject(v Repository) {
	o.RepositoryIdObject = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Rule) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rule) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Rule) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Rule) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Rule) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Rule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BranchName) {
		toSerialize["branch_name"] = o.BranchName
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ReferencedByJobRuleIdObjects != nil {
		toSerialize["referenced_by_job_rule_id_objects"] = o.ReferencedByJobRuleIdObjects
	}
	if o.ReferencedByRuleRequiresJobRuleIdObjects != nil {
		toSerialize["referenced_by_rule_requires_job_rule_id_objects"] = o.ReferencedByRuleRequiresJobRuleIdObjects
	}
	if o.ReferencedByTriggerRuleIdObjects != nil {
		toSerialize["referenced_by_trigger_rule_id_objects"] = o.ReferencedByTriggerRuleIdObjects
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if !IsNil(o.RepositoryIdObject) {
		toSerialize["repository_id_object"] = o.RepositoryIdObject
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableRule struct {
	value *Rule
	isSet bool
}

func (v NullableRule) Get() *Rule {
	return v.value
}

func (v *NullableRule) Set(val *Rule) {
	v.value = val
	v.isSet = true
}

func (v NullableRule) IsSet() bool {
	return v.isSet
}

func (v *NullableRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRule(val *Rule) *NullableRule {
	return &NullableRule{value: val, isSet: true}
}

func (v NullableRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
