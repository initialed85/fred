/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// ExecutionAPIService ExecutionAPI service
type ExecutionAPIService service

type ApiDeleteExecutionRequest struct {
	ctx        context.Context
	ApiService *ExecutionAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiDeleteExecutionRequest) Depth(depth int64) ApiDeleteExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiDeleteExecutionRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteExecutionExecute(r)
}

/*
DeleteExecution Method for DeleteExecution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiDeleteExecutionRequest
*/
func (a *ExecutionAPIService) DeleteExecution(ctx context.Context, primaryKey string) ApiDeleteExecutionRequest {
	return ApiDeleteExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
func (a *ExecutionAPIService) DeleteExecutionExecute(r ApiDeleteExecutionRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionAPIService.DeleteExecution")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetExecutionRequest struct {
	ctx        context.Context
	ApiService *ExecutionAPIService
	primaryKey string
	depth      *int64
}

// Query parameter depth
func (r ApiGetExecutionRequest) Depth(depth int64) ApiGetExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiGetExecutionRequest) Execute() (*ResponseWithGenericOfExecution, *http.Response, error) {
	return r.ApiService.GetExecutionExecute(r)
}

/*
GetExecution Method for GetExecution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiGetExecutionRequest
*/
func (a *ExecutionAPIService) GetExecution(ctx context.Context, primaryKey string) ApiGetExecutionRequest {
	return ApiGetExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfExecution
func (a *ExecutionAPIService) GetExecutionExecute(r ApiGetExecutionRequest) (*ResponseWithGenericOfExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionAPIService.GetExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetExecutionsRequest struct {
	ctx                                                   context.Context
	ApiService                                            *ExecutionAPIService
	limit                                                 *int32
	offset                                                *int32
	depth                                                 *int32
	idEq                                                  *string
	idNe                                                  *string
	idGt                                                  *string
	idGte                                                 *string
	idLt                                                  *string
	idLte                                                 *string
	idIn                                                  *string
	idNotin                                               *string
	idLike                                                *string
	idNotlike                                             *string
	idIlike                                               *string
	idNotilike                                            *string
	idDesc                                                *string
	idAsc                                                 *string
	createdAtEq                                           *time.Time
	createdAtNe                                           *time.Time
	createdAtGt                                           *time.Time
	createdAtGte                                          *time.Time
	createdAtLt                                           *time.Time
	createdAtLte                                          *time.Time
	createdAtIn                                           *time.Time
	createdAtNotin                                        *time.Time
	createdAtLike                                         *time.Time
	createdAtNotlike                                      *time.Time
	createdAtIlike                                        *time.Time
	createdAtNotilike                                     *time.Time
	createdAtDesc                                         *string
	createdAtAsc                                          *string
	updatedAtEq                                           *time.Time
	updatedAtNe                                           *time.Time
	updatedAtGt                                           *time.Time
	updatedAtGte                                          *time.Time
	updatedAtLt                                           *time.Time
	updatedAtLte                                          *time.Time
	updatedAtIn                                           *time.Time
	updatedAtNotin                                        *time.Time
	updatedAtLike                                         *time.Time
	updatedAtNotlike                                      *time.Time
	updatedAtIlike                                        *time.Time
	updatedAtNotilike                                     *time.Time
	updatedAtDesc                                         *string
	updatedAtAsc                                          *string
	deletedAtEq                                           *time.Time
	deletedAtNe                                           *time.Time
	deletedAtGt                                           *time.Time
	deletedAtGte                                          *time.Time
	deletedAtLt                                           *time.Time
	deletedAtLte                                          *time.Time
	deletedAtIn                                           *time.Time
	deletedAtNotin                                        *time.Time
	deletedAtLike                                         *time.Time
	deletedAtNotlike                                      *time.Time
	deletedAtIlike                                        *time.Time
	deletedAtNotilike                                     *time.Time
	deletedAtDesc                                         *string
	deletedAtAsc                                          *string
	triggerIdEq                                           *string
	triggerIdNe                                           *string
	triggerIdGt                                           *string
	triggerIdGte                                          *string
	triggerIdLt                                           *string
	triggerIdLte                                          *string
	triggerIdIn                                           *string
	triggerIdNotin                                        *string
	triggerIdLike                                         *string
	triggerIdNotlike                                      *string
	triggerIdIlike                                        *string
	triggerIdNotilike                                     *string
	triggerIdDesc                                         *string
	triggerIdAsc                                          *string
	triggerIdObjectDesc                                   *string
	triggerIdObjectAsc                                    *string
	buildOutputIdEq                                       *string
	buildOutputIdNe                                       *string
	buildOutputIdGt                                       *string
	buildOutputIdGte                                      *string
	buildOutputIdLt                                       *string
	buildOutputIdLte                                      *string
	buildOutputIdIn                                       *string
	buildOutputIdNotin                                    *string
	buildOutputIdLike                                     *string
	buildOutputIdNotlike                                  *string
	buildOutputIdIlike                                    *string
	buildOutputIdNotilike                                 *string
	buildOutputIdDesc                                     *string
	buildOutputIdAsc                                      *string
	buildOutputIdObjectDesc                               *string
	buildOutputIdObjectAsc                                *string
	testOutputIdEq                                        *string
	testOutputIdNe                                        *string
	testOutputIdGt                                        *string
	testOutputIdGte                                       *string
	testOutputIdLt                                        *string
	testOutputIdLte                                       *string
	testOutputIdIn                                        *string
	testOutputIdNotin                                     *string
	testOutputIdLike                                      *string
	testOutputIdNotlike                                   *string
	testOutputIdIlike                                     *string
	testOutputIdNotilike                                  *string
	testOutputIdDesc                                      *string
	testOutputIdAsc                                       *string
	testOutputIdObjectDesc                                *string
	testOutputIdObjectAsc                                 *string
	publishOutputIdEq                                     *string
	publishOutputIdNe                                     *string
	publishOutputIdGt                                     *string
	publishOutputIdGte                                    *string
	publishOutputIdLt                                     *string
	publishOutputIdLte                                    *string
	publishOutputIdIn                                     *string
	publishOutputIdNotin                                  *string
	publishOutputIdLike                                   *string
	publishOutputIdNotlike                                *string
	publishOutputIdIlike                                  *string
	publishOutputIdNotilike                               *string
	publishOutputIdDesc                                   *string
	publishOutputIdAsc                                    *string
	publishOutputIdObjectDesc                             *string
	publishOutputIdObjectAsc                              *string
	deployOutputIdEq                                      *string
	deployOutputIdNe                                      *string
	deployOutputIdGt                                      *string
	deployOutputIdGte                                     *string
	deployOutputIdLt                                      *string
	deployOutputIdLte                                     *string
	deployOutputIdIn                                      *string
	deployOutputIdNotin                                   *string
	deployOutputIdLike                                    *string
	deployOutputIdNotlike                                 *string
	deployOutputIdIlike                                   *string
	deployOutputIdNotilike                                *string
	deployOutputIdDesc                                    *string
	deployOutputIdAsc                                     *string
	deployOutputIdObjectDesc                              *string
	deployOutputIdObjectAsc                               *string
	validateOutputIdEq                                    *string
	validateOutputIdNe                                    *string
	validateOutputIdGt                                    *string
	validateOutputIdGte                                   *string
	validateOutputIdLt                                    *string
	validateOutputIdLte                                   *string
	validateOutputIdIn                                    *string
	validateOutputIdNotin                                 *string
	validateOutputIdLike                                  *string
	validateOutputIdNotlike                               *string
	validateOutputIdIlike                                 *string
	validateOutputIdNotilike                              *string
	validateOutputIdDesc                                  *string
	validateOutputIdAsc                                   *string
	validateOutputIdObjectDesc                            *string
	validateOutputIdObjectAsc                             *string
	jobIdEq                                               *string
	jobIdNe                                               *string
	jobIdGt                                               *string
	jobIdGte                                              *string
	jobIdLt                                               *string
	jobIdLte                                              *string
	jobIdIn                                               *string
	jobIdNotin                                            *string
	jobIdLike                                             *string
	jobIdNotlike                                          *string
	jobIdIlike                                            *string
	jobIdNotilike                                         *string
	jobIdDesc                                             *string
	jobIdAsc                                              *string
	jobIdObjectDesc                                       *string
	jobIdObjectAsc                                        *string
	referencedByTriggerHasExecutionExecutionIdObjectsDesc *string
	referencedByTriggerHasExecutionExecutionIdObjectsAsc  *string
}

// SQL LIMIT operator
func (r ApiGetExecutionsRequest) Limit(limit int32) ApiGetExecutionsRequest {
	r.limit = &limit
	return r
}

// SQL OFFSET operator
func (r ApiGetExecutionsRequest) Offset(offset int32) ApiGetExecutionsRequest {
	r.offset = &offset
	return r
}

// Max recursion depth for loading foreign objects; default &#x3D; 1  (0 &#x3D; recurse until graph cycle detected, 1 &#x3D; this object only, 2 &#x3D; this object + neighbours, 3 &#x3D; this object + neighbours + their neighbours... etc)
func (r ApiGetExecutionsRequest) Depth(depth int32) ApiGetExecutionsRequest {
	r.depth = &depth
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) IdEq(idEq string) ApiGetExecutionsRequest {
	r.idEq = &idEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) IdNe(idNe string) ApiGetExecutionsRequest {
	r.idNe = &idNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) IdGt(idGt string) ApiGetExecutionsRequest {
	r.idGt = &idGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) IdGte(idGte string) ApiGetExecutionsRequest {
	r.idGte = &idGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) IdLt(idLt string) ApiGetExecutionsRequest {
	r.idLt = &idLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) IdLte(idLte string) ApiGetExecutionsRequest {
	r.idLte = &idLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) IdIn(idIn string) ApiGetExecutionsRequest {
	r.idIn = &idIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) IdNotin(idNotin string) ApiGetExecutionsRequest {
	r.idNotin = &idNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) IdLike(idLike string) ApiGetExecutionsRequest {
	r.idLike = &idLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) IdNotlike(idNotlike string) ApiGetExecutionsRequest {
	r.idNotlike = &idNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) IdIlike(idIlike string) ApiGetExecutionsRequest {
	r.idIlike = &idIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) IdNotilike(idNotilike string) ApiGetExecutionsRequest {
	r.idNotilike = &idNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) IdDesc(idDesc string) ApiGetExecutionsRequest {
	r.idDesc = &idDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) IdAsc(idAsc string) ApiGetExecutionsRequest {
	r.idAsc = &idAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) CreatedAtEq(createdAtEq time.Time) ApiGetExecutionsRequest {
	r.createdAtEq = &createdAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) CreatedAtNe(createdAtNe time.Time) ApiGetExecutionsRequest {
	r.createdAtNe = &createdAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) CreatedAtGt(createdAtGt time.Time) ApiGetExecutionsRequest {
	r.createdAtGt = &createdAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) CreatedAtGte(createdAtGte time.Time) ApiGetExecutionsRequest {
	r.createdAtGte = &createdAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) CreatedAtLt(createdAtLt time.Time) ApiGetExecutionsRequest {
	r.createdAtLt = &createdAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) CreatedAtLte(createdAtLte time.Time) ApiGetExecutionsRequest {
	r.createdAtLte = &createdAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) CreatedAtIn(createdAtIn time.Time) ApiGetExecutionsRequest {
	r.createdAtIn = &createdAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) CreatedAtNotin(createdAtNotin time.Time) ApiGetExecutionsRequest {
	r.createdAtNotin = &createdAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) CreatedAtLike(createdAtLike time.Time) ApiGetExecutionsRequest {
	r.createdAtLike = &createdAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) CreatedAtNotlike(createdAtNotlike time.Time) ApiGetExecutionsRequest {
	r.createdAtNotlike = &createdAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) CreatedAtIlike(createdAtIlike time.Time) ApiGetExecutionsRequest {
	r.createdAtIlike = &createdAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) CreatedAtNotilike(createdAtNotilike time.Time) ApiGetExecutionsRequest {
	r.createdAtNotilike = &createdAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) CreatedAtDesc(createdAtDesc string) ApiGetExecutionsRequest {
	r.createdAtDesc = &createdAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) CreatedAtAsc(createdAtAsc string) ApiGetExecutionsRequest {
	r.createdAtAsc = &createdAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) UpdatedAtEq(updatedAtEq time.Time) ApiGetExecutionsRequest {
	r.updatedAtEq = &updatedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) UpdatedAtNe(updatedAtNe time.Time) ApiGetExecutionsRequest {
	r.updatedAtNe = &updatedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) UpdatedAtGt(updatedAtGt time.Time) ApiGetExecutionsRequest {
	r.updatedAtGt = &updatedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) UpdatedAtGte(updatedAtGte time.Time) ApiGetExecutionsRequest {
	r.updatedAtGte = &updatedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) UpdatedAtLt(updatedAtLt time.Time) ApiGetExecutionsRequest {
	r.updatedAtLt = &updatedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) UpdatedAtLte(updatedAtLte time.Time) ApiGetExecutionsRequest {
	r.updatedAtLte = &updatedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) UpdatedAtIn(updatedAtIn time.Time) ApiGetExecutionsRequest {
	r.updatedAtIn = &updatedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) UpdatedAtNotin(updatedAtNotin time.Time) ApiGetExecutionsRequest {
	r.updatedAtNotin = &updatedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) UpdatedAtLike(updatedAtLike time.Time) ApiGetExecutionsRequest {
	r.updatedAtLike = &updatedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) UpdatedAtNotlike(updatedAtNotlike time.Time) ApiGetExecutionsRequest {
	r.updatedAtNotlike = &updatedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) UpdatedAtIlike(updatedAtIlike time.Time) ApiGetExecutionsRequest {
	r.updatedAtIlike = &updatedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) UpdatedAtNotilike(updatedAtNotilike time.Time) ApiGetExecutionsRequest {
	r.updatedAtNotilike = &updatedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) UpdatedAtDesc(updatedAtDesc string) ApiGetExecutionsRequest {
	r.updatedAtDesc = &updatedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) UpdatedAtAsc(updatedAtAsc string) ApiGetExecutionsRequest {
	r.updatedAtAsc = &updatedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) DeletedAtEq(deletedAtEq time.Time) ApiGetExecutionsRequest {
	r.deletedAtEq = &deletedAtEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) DeletedAtNe(deletedAtNe time.Time) ApiGetExecutionsRequest {
	r.deletedAtNe = &deletedAtNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeletedAtGt(deletedAtGt time.Time) ApiGetExecutionsRequest {
	r.deletedAtGt = &deletedAtGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeletedAtGte(deletedAtGte time.Time) ApiGetExecutionsRequest {
	r.deletedAtGte = &deletedAtGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeletedAtLt(deletedAtLt time.Time) ApiGetExecutionsRequest {
	r.deletedAtLt = &deletedAtLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeletedAtLte(deletedAtLte time.Time) ApiGetExecutionsRequest {
	r.deletedAtLte = &deletedAtLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) DeletedAtIn(deletedAtIn time.Time) ApiGetExecutionsRequest {
	r.deletedAtIn = &deletedAtIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) DeletedAtNotin(deletedAtNotin time.Time) ApiGetExecutionsRequest {
	r.deletedAtNotin = &deletedAtNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeletedAtLike(deletedAtLike time.Time) ApiGetExecutionsRequest {
	r.deletedAtLike = &deletedAtLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeletedAtNotlike(deletedAtNotlike time.Time) ApiGetExecutionsRequest {
	r.deletedAtNotlike = &deletedAtNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeletedAtIlike(deletedAtIlike time.Time) ApiGetExecutionsRequest {
	r.deletedAtIlike = &deletedAtIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeletedAtNotilike(deletedAtNotilike time.Time) ApiGetExecutionsRequest {
	r.deletedAtNotilike = &deletedAtNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeletedAtDesc(deletedAtDesc string) ApiGetExecutionsRequest {
	r.deletedAtDesc = &deletedAtDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeletedAtAsc(deletedAtAsc string) ApiGetExecutionsRequest {
	r.deletedAtAsc = &deletedAtAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) TriggerIdEq(triggerIdEq string) ApiGetExecutionsRequest {
	r.triggerIdEq = &triggerIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) TriggerIdNe(triggerIdNe string) ApiGetExecutionsRequest {
	r.triggerIdNe = &triggerIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TriggerIdGt(triggerIdGt string) ApiGetExecutionsRequest {
	r.triggerIdGt = &triggerIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TriggerIdGte(triggerIdGte string) ApiGetExecutionsRequest {
	r.triggerIdGte = &triggerIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TriggerIdLt(triggerIdLt string) ApiGetExecutionsRequest {
	r.triggerIdLt = &triggerIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TriggerIdLte(triggerIdLte string) ApiGetExecutionsRequest {
	r.triggerIdLte = &triggerIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) TriggerIdIn(triggerIdIn string) ApiGetExecutionsRequest {
	r.triggerIdIn = &triggerIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) TriggerIdNotin(triggerIdNotin string) ApiGetExecutionsRequest {
	r.triggerIdNotin = &triggerIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TriggerIdLike(triggerIdLike string) ApiGetExecutionsRequest {
	r.triggerIdLike = &triggerIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TriggerIdNotlike(triggerIdNotlike string) ApiGetExecutionsRequest {
	r.triggerIdNotlike = &triggerIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TriggerIdIlike(triggerIdIlike string) ApiGetExecutionsRequest {
	r.triggerIdIlike = &triggerIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TriggerIdNotilike(triggerIdNotilike string) ApiGetExecutionsRequest {
	r.triggerIdNotilike = &triggerIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TriggerIdDesc(triggerIdDesc string) ApiGetExecutionsRequest {
	r.triggerIdDesc = &triggerIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TriggerIdAsc(triggerIdAsc string) ApiGetExecutionsRequest {
	r.triggerIdAsc = &triggerIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TriggerIdObjectDesc(triggerIdObjectDesc string) ApiGetExecutionsRequest {
	r.triggerIdObjectDesc = &triggerIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TriggerIdObjectAsc(triggerIdObjectAsc string) ApiGetExecutionsRequest {
	r.triggerIdObjectAsc = &triggerIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) BuildOutputIdEq(buildOutputIdEq string) ApiGetExecutionsRequest {
	r.buildOutputIdEq = &buildOutputIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) BuildOutputIdNe(buildOutputIdNe string) ApiGetExecutionsRequest {
	r.buildOutputIdNe = &buildOutputIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) BuildOutputIdGt(buildOutputIdGt string) ApiGetExecutionsRequest {
	r.buildOutputIdGt = &buildOutputIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) BuildOutputIdGte(buildOutputIdGte string) ApiGetExecutionsRequest {
	r.buildOutputIdGte = &buildOutputIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) BuildOutputIdLt(buildOutputIdLt string) ApiGetExecutionsRequest {
	r.buildOutputIdLt = &buildOutputIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) BuildOutputIdLte(buildOutputIdLte string) ApiGetExecutionsRequest {
	r.buildOutputIdLte = &buildOutputIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) BuildOutputIdIn(buildOutputIdIn string) ApiGetExecutionsRequest {
	r.buildOutputIdIn = &buildOutputIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) BuildOutputIdNotin(buildOutputIdNotin string) ApiGetExecutionsRequest {
	r.buildOutputIdNotin = &buildOutputIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) BuildOutputIdLike(buildOutputIdLike string) ApiGetExecutionsRequest {
	r.buildOutputIdLike = &buildOutputIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) BuildOutputIdNotlike(buildOutputIdNotlike string) ApiGetExecutionsRequest {
	r.buildOutputIdNotlike = &buildOutputIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) BuildOutputIdIlike(buildOutputIdIlike string) ApiGetExecutionsRequest {
	r.buildOutputIdIlike = &buildOutputIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) BuildOutputIdNotilike(buildOutputIdNotilike string) ApiGetExecutionsRequest {
	r.buildOutputIdNotilike = &buildOutputIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) BuildOutputIdDesc(buildOutputIdDesc string) ApiGetExecutionsRequest {
	r.buildOutputIdDesc = &buildOutputIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) BuildOutputIdAsc(buildOutputIdAsc string) ApiGetExecutionsRequest {
	r.buildOutputIdAsc = &buildOutputIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) BuildOutputIdObjectDesc(buildOutputIdObjectDesc string) ApiGetExecutionsRequest {
	r.buildOutputIdObjectDesc = &buildOutputIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) BuildOutputIdObjectAsc(buildOutputIdObjectAsc string) ApiGetExecutionsRequest {
	r.buildOutputIdObjectAsc = &buildOutputIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) TestOutputIdEq(testOutputIdEq string) ApiGetExecutionsRequest {
	r.testOutputIdEq = &testOutputIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) TestOutputIdNe(testOutputIdNe string) ApiGetExecutionsRequest {
	r.testOutputIdNe = &testOutputIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TestOutputIdGt(testOutputIdGt string) ApiGetExecutionsRequest {
	r.testOutputIdGt = &testOutputIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TestOutputIdGte(testOutputIdGte string) ApiGetExecutionsRequest {
	r.testOutputIdGte = &testOutputIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TestOutputIdLt(testOutputIdLt string) ApiGetExecutionsRequest {
	r.testOutputIdLt = &testOutputIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) TestOutputIdLte(testOutputIdLte string) ApiGetExecutionsRequest {
	r.testOutputIdLte = &testOutputIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) TestOutputIdIn(testOutputIdIn string) ApiGetExecutionsRequest {
	r.testOutputIdIn = &testOutputIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) TestOutputIdNotin(testOutputIdNotin string) ApiGetExecutionsRequest {
	r.testOutputIdNotin = &testOutputIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TestOutputIdLike(testOutputIdLike string) ApiGetExecutionsRequest {
	r.testOutputIdLike = &testOutputIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TestOutputIdNotlike(testOutputIdNotlike string) ApiGetExecutionsRequest {
	r.testOutputIdNotlike = &testOutputIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TestOutputIdIlike(testOutputIdIlike string) ApiGetExecutionsRequest {
	r.testOutputIdIlike = &testOutputIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) TestOutputIdNotilike(testOutputIdNotilike string) ApiGetExecutionsRequest {
	r.testOutputIdNotilike = &testOutputIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TestOutputIdDesc(testOutputIdDesc string) ApiGetExecutionsRequest {
	r.testOutputIdDesc = &testOutputIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TestOutputIdAsc(testOutputIdAsc string) ApiGetExecutionsRequest {
	r.testOutputIdAsc = &testOutputIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TestOutputIdObjectDesc(testOutputIdObjectDesc string) ApiGetExecutionsRequest {
	r.testOutputIdObjectDesc = &testOutputIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) TestOutputIdObjectAsc(testOutputIdObjectAsc string) ApiGetExecutionsRequest {
	r.testOutputIdObjectAsc = &testOutputIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) PublishOutputIdEq(publishOutputIdEq string) ApiGetExecutionsRequest {
	r.publishOutputIdEq = &publishOutputIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) PublishOutputIdNe(publishOutputIdNe string) ApiGetExecutionsRequest {
	r.publishOutputIdNe = &publishOutputIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) PublishOutputIdGt(publishOutputIdGt string) ApiGetExecutionsRequest {
	r.publishOutputIdGt = &publishOutputIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) PublishOutputIdGte(publishOutputIdGte string) ApiGetExecutionsRequest {
	r.publishOutputIdGte = &publishOutputIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) PublishOutputIdLt(publishOutputIdLt string) ApiGetExecutionsRequest {
	r.publishOutputIdLt = &publishOutputIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) PublishOutputIdLte(publishOutputIdLte string) ApiGetExecutionsRequest {
	r.publishOutputIdLte = &publishOutputIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) PublishOutputIdIn(publishOutputIdIn string) ApiGetExecutionsRequest {
	r.publishOutputIdIn = &publishOutputIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) PublishOutputIdNotin(publishOutputIdNotin string) ApiGetExecutionsRequest {
	r.publishOutputIdNotin = &publishOutputIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) PublishOutputIdLike(publishOutputIdLike string) ApiGetExecutionsRequest {
	r.publishOutputIdLike = &publishOutputIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) PublishOutputIdNotlike(publishOutputIdNotlike string) ApiGetExecutionsRequest {
	r.publishOutputIdNotlike = &publishOutputIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) PublishOutputIdIlike(publishOutputIdIlike string) ApiGetExecutionsRequest {
	r.publishOutputIdIlike = &publishOutputIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) PublishOutputIdNotilike(publishOutputIdNotilike string) ApiGetExecutionsRequest {
	r.publishOutputIdNotilike = &publishOutputIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) PublishOutputIdDesc(publishOutputIdDesc string) ApiGetExecutionsRequest {
	r.publishOutputIdDesc = &publishOutputIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) PublishOutputIdAsc(publishOutputIdAsc string) ApiGetExecutionsRequest {
	r.publishOutputIdAsc = &publishOutputIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) PublishOutputIdObjectDesc(publishOutputIdObjectDesc string) ApiGetExecutionsRequest {
	r.publishOutputIdObjectDesc = &publishOutputIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) PublishOutputIdObjectAsc(publishOutputIdObjectAsc string) ApiGetExecutionsRequest {
	r.publishOutputIdObjectAsc = &publishOutputIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) DeployOutputIdEq(deployOutputIdEq string) ApiGetExecutionsRequest {
	r.deployOutputIdEq = &deployOutputIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) DeployOutputIdNe(deployOutputIdNe string) ApiGetExecutionsRequest {
	r.deployOutputIdNe = &deployOutputIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeployOutputIdGt(deployOutputIdGt string) ApiGetExecutionsRequest {
	r.deployOutputIdGt = &deployOutputIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeployOutputIdGte(deployOutputIdGte string) ApiGetExecutionsRequest {
	r.deployOutputIdGte = &deployOutputIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeployOutputIdLt(deployOutputIdLt string) ApiGetExecutionsRequest {
	r.deployOutputIdLt = &deployOutputIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) DeployOutputIdLte(deployOutputIdLte string) ApiGetExecutionsRequest {
	r.deployOutputIdLte = &deployOutputIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) DeployOutputIdIn(deployOutputIdIn string) ApiGetExecutionsRequest {
	r.deployOutputIdIn = &deployOutputIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) DeployOutputIdNotin(deployOutputIdNotin string) ApiGetExecutionsRequest {
	r.deployOutputIdNotin = &deployOutputIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeployOutputIdLike(deployOutputIdLike string) ApiGetExecutionsRequest {
	r.deployOutputIdLike = &deployOutputIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeployOutputIdNotlike(deployOutputIdNotlike string) ApiGetExecutionsRequest {
	r.deployOutputIdNotlike = &deployOutputIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeployOutputIdIlike(deployOutputIdIlike string) ApiGetExecutionsRequest {
	r.deployOutputIdIlike = &deployOutputIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) DeployOutputIdNotilike(deployOutputIdNotilike string) ApiGetExecutionsRequest {
	r.deployOutputIdNotilike = &deployOutputIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeployOutputIdDesc(deployOutputIdDesc string) ApiGetExecutionsRequest {
	r.deployOutputIdDesc = &deployOutputIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeployOutputIdAsc(deployOutputIdAsc string) ApiGetExecutionsRequest {
	r.deployOutputIdAsc = &deployOutputIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeployOutputIdObjectDesc(deployOutputIdObjectDesc string) ApiGetExecutionsRequest {
	r.deployOutputIdObjectDesc = &deployOutputIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) DeployOutputIdObjectAsc(deployOutputIdObjectAsc string) ApiGetExecutionsRequest {
	r.deployOutputIdObjectAsc = &deployOutputIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) ValidateOutputIdEq(validateOutputIdEq string) ApiGetExecutionsRequest {
	r.validateOutputIdEq = &validateOutputIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) ValidateOutputIdNe(validateOutputIdNe string) ApiGetExecutionsRequest {
	r.validateOutputIdNe = &validateOutputIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) ValidateOutputIdGt(validateOutputIdGt string) ApiGetExecutionsRequest {
	r.validateOutputIdGt = &validateOutputIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) ValidateOutputIdGte(validateOutputIdGte string) ApiGetExecutionsRequest {
	r.validateOutputIdGte = &validateOutputIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) ValidateOutputIdLt(validateOutputIdLt string) ApiGetExecutionsRequest {
	r.validateOutputIdLt = &validateOutputIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) ValidateOutputIdLte(validateOutputIdLte string) ApiGetExecutionsRequest {
	r.validateOutputIdLte = &validateOutputIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) ValidateOutputIdIn(validateOutputIdIn string) ApiGetExecutionsRequest {
	r.validateOutputIdIn = &validateOutputIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) ValidateOutputIdNotin(validateOutputIdNotin string) ApiGetExecutionsRequest {
	r.validateOutputIdNotin = &validateOutputIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) ValidateOutputIdLike(validateOutputIdLike string) ApiGetExecutionsRequest {
	r.validateOutputIdLike = &validateOutputIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) ValidateOutputIdNotlike(validateOutputIdNotlike string) ApiGetExecutionsRequest {
	r.validateOutputIdNotlike = &validateOutputIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) ValidateOutputIdIlike(validateOutputIdIlike string) ApiGetExecutionsRequest {
	r.validateOutputIdIlike = &validateOutputIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) ValidateOutputIdNotilike(validateOutputIdNotilike string) ApiGetExecutionsRequest {
	r.validateOutputIdNotilike = &validateOutputIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ValidateOutputIdDesc(validateOutputIdDesc string) ApiGetExecutionsRequest {
	r.validateOutputIdDesc = &validateOutputIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ValidateOutputIdAsc(validateOutputIdAsc string) ApiGetExecutionsRequest {
	r.validateOutputIdAsc = &validateOutputIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ValidateOutputIdObjectDesc(validateOutputIdObjectDesc string) ApiGetExecutionsRequest {
	r.validateOutputIdObjectDesc = &validateOutputIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ValidateOutputIdObjectAsc(validateOutputIdObjectAsc string) ApiGetExecutionsRequest {
	r.validateOutputIdObjectAsc = &validateOutputIdObjectAsc
	return r
}

// SQL &#x3D; comparison
func (r ApiGetExecutionsRequest) JobIdEq(jobIdEq string) ApiGetExecutionsRequest {
	r.jobIdEq = &jobIdEq
	return r
}

// SQL !&#x3D; comparison
func (r ApiGetExecutionsRequest) JobIdNe(jobIdNe string) ApiGetExecutionsRequest {
	r.jobIdNe = &jobIdNe
	return r
}

// SQL &gt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) JobIdGt(jobIdGt string) ApiGetExecutionsRequest {
	r.jobIdGt = &jobIdGt
	return r
}

// SQL &gt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) JobIdGte(jobIdGte string) ApiGetExecutionsRequest {
	r.jobIdGte = &jobIdGte
	return r
}

// SQL &lt; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) JobIdLt(jobIdLt string) ApiGetExecutionsRequest {
	r.jobIdLt = &jobIdLt
	return r
}

// SQL &lt;&#x3D; comparison, may not work with all column types
func (r ApiGetExecutionsRequest) JobIdLte(jobIdLte string) ApiGetExecutionsRequest {
	r.jobIdLte = &jobIdLte
	return r
}

// SQL IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) JobIdIn(jobIdIn string) ApiGetExecutionsRequest {
	r.jobIdIn = &jobIdIn
	return r
}

// SQL NOT IN comparison, permits comma-separated values
func (r ApiGetExecutionsRequest) JobIdNotin(jobIdNotin string) ApiGetExecutionsRequest {
	r.jobIdNotin = &jobIdNotin
	return r
}

// SQL LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) JobIdLike(jobIdLike string) ApiGetExecutionsRequest {
	r.jobIdLike = &jobIdLike
	return r
}

// SQL NOT LIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) JobIdNotlike(jobIdNotlike string) ApiGetExecutionsRequest {
	r.jobIdNotlike = &jobIdNotlike
	return r
}

// SQL ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) JobIdIlike(jobIdIlike string) ApiGetExecutionsRequest {
	r.jobIdIlike = &jobIdIlike
	return r
}

// SQL NOT ILIKE comparison, value is implicitly prefixed and suffixed with %
func (r ApiGetExecutionsRequest) JobIdNotilike(jobIdNotilike string) ApiGetExecutionsRequest {
	r.jobIdNotilike = &jobIdNotilike
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) JobIdDesc(jobIdDesc string) ApiGetExecutionsRequest {
	r.jobIdDesc = &jobIdDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) JobIdAsc(jobIdAsc string) ApiGetExecutionsRequest {
	r.jobIdAsc = &jobIdAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) JobIdObjectDesc(jobIdObjectDesc string) ApiGetExecutionsRequest {
	r.jobIdObjectDesc = &jobIdObjectDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) JobIdObjectAsc(jobIdObjectAsc string) ApiGetExecutionsRequest {
	r.jobIdObjectAsc = &jobIdObjectAsc
	return r
}

// SQL ORDER BY _ DESC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ReferencedByTriggerHasExecutionExecutionIdObjectsDesc(referencedByTriggerHasExecutionExecutionIdObjectsDesc string) ApiGetExecutionsRequest {
	r.referencedByTriggerHasExecutionExecutionIdObjectsDesc = &referencedByTriggerHasExecutionExecutionIdObjectsDesc
	return r
}

// SQL ORDER BY _ ASC clause, value is ignored (presence of key is sufficient)
func (r ApiGetExecutionsRequest) ReferencedByTriggerHasExecutionExecutionIdObjectsAsc(referencedByTriggerHasExecutionExecutionIdObjectsAsc string) ApiGetExecutionsRequest {
	r.referencedByTriggerHasExecutionExecutionIdObjectsAsc = &referencedByTriggerHasExecutionExecutionIdObjectsAsc
	return r
}

func (r ApiGetExecutionsRequest) Execute() (*ResponseWithGenericOfExecution, *http.Response, error) {
	return r.ApiService.GetExecutionsExecute(r)
}

/*
GetExecutions Method for GetExecutions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetExecutionsRequest
*/
func (a *ExecutionAPIService) GetExecutions(ctx context.Context) ApiGetExecutionsRequest {
	return ApiGetExecutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfExecution
func (a *ExecutionAPIService) GetExecutionsExecute(r ApiGetExecutionsRequest) (*ResponseWithGenericOfExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionAPIService.GetExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	if r.idEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__eq", r.idEq, "form", "")
	}
	if r.idNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ne", r.idNe, "form", "")
	}
	if r.idGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gt", r.idGt, "form", "")
	}
	if r.idGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__gte", r.idGte, "form", "")
	}
	if r.idLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lt", r.idLt, "form", "")
	}
	if r.idLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__lte", r.idLte, "form", "")
	}
	if r.idIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__in", r.idIn, "form", "")
	}
	if r.idNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notin", r.idNotin, "form", "")
	}
	if r.idLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__like", r.idLike, "form", "")
	}
	if r.idNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notlike", r.idNotlike, "form", "")
	}
	if r.idIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__ilike", r.idIlike, "form", "")
	}
	if r.idNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__notilike", r.idNotilike, "form", "")
	}
	if r.idDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__desc", r.idDesc, "form", "")
	}
	if r.idAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "id__asc", r.idAsc, "form", "")
	}
	if r.createdAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__eq", r.createdAtEq, "form", "")
	}
	if r.createdAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ne", r.createdAtNe, "form", "")
	}
	if r.createdAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gt", r.createdAtGt, "form", "")
	}
	if r.createdAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__gte", r.createdAtGte, "form", "")
	}
	if r.createdAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lt", r.createdAtLt, "form", "")
	}
	if r.createdAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__lte", r.createdAtLte, "form", "")
	}
	if r.createdAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__in", r.createdAtIn, "form", "")
	}
	if r.createdAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notin", r.createdAtNotin, "form", "")
	}
	if r.createdAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__like", r.createdAtLike, "form", "")
	}
	if r.createdAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notlike", r.createdAtNotlike, "form", "")
	}
	if r.createdAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__ilike", r.createdAtIlike, "form", "")
	}
	if r.createdAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__notilike", r.createdAtNotilike, "form", "")
	}
	if r.createdAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__desc", r.createdAtDesc, "form", "")
	}
	if r.createdAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "created_at__asc", r.createdAtAsc, "form", "")
	}
	if r.updatedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__eq", r.updatedAtEq, "form", "")
	}
	if r.updatedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ne", r.updatedAtNe, "form", "")
	}
	if r.updatedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gt", r.updatedAtGt, "form", "")
	}
	if r.updatedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__gte", r.updatedAtGte, "form", "")
	}
	if r.updatedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lt", r.updatedAtLt, "form", "")
	}
	if r.updatedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__lte", r.updatedAtLte, "form", "")
	}
	if r.updatedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__in", r.updatedAtIn, "form", "")
	}
	if r.updatedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notin", r.updatedAtNotin, "form", "")
	}
	if r.updatedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__like", r.updatedAtLike, "form", "")
	}
	if r.updatedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notlike", r.updatedAtNotlike, "form", "")
	}
	if r.updatedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__ilike", r.updatedAtIlike, "form", "")
	}
	if r.updatedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__notilike", r.updatedAtNotilike, "form", "")
	}
	if r.updatedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__desc", r.updatedAtDesc, "form", "")
	}
	if r.updatedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "updated_at__asc", r.updatedAtAsc, "form", "")
	}
	if r.deletedAtEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__eq", r.deletedAtEq, "form", "")
	}
	if r.deletedAtNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ne", r.deletedAtNe, "form", "")
	}
	if r.deletedAtGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gt", r.deletedAtGt, "form", "")
	}
	if r.deletedAtGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__gte", r.deletedAtGte, "form", "")
	}
	if r.deletedAtLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lt", r.deletedAtLt, "form", "")
	}
	if r.deletedAtLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__lte", r.deletedAtLte, "form", "")
	}
	if r.deletedAtIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__in", r.deletedAtIn, "form", "")
	}
	if r.deletedAtNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notin", r.deletedAtNotin, "form", "")
	}
	if r.deletedAtLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__like", r.deletedAtLike, "form", "")
	}
	if r.deletedAtNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notlike", r.deletedAtNotlike, "form", "")
	}
	if r.deletedAtIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__ilike", r.deletedAtIlike, "form", "")
	}
	if r.deletedAtNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__notilike", r.deletedAtNotilike, "form", "")
	}
	if r.deletedAtDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__desc", r.deletedAtDesc, "form", "")
	}
	if r.deletedAtAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deleted_at__asc", r.deletedAtAsc, "form", "")
	}
	if r.triggerIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__eq", r.triggerIdEq, "form", "")
	}
	if r.triggerIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__ne", r.triggerIdNe, "form", "")
	}
	if r.triggerIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__gt", r.triggerIdGt, "form", "")
	}
	if r.triggerIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__gte", r.triggerIdGte, "form", "")
	}
	if r.triggerIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__lt", r.triggerIdLt, "form", "")
	}
	if r.triggerIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__lte", r.triggerIdLte, "form", "")
	}
	if r.triggerIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__in", r.triggerIdIn, "form", "")
	}
	if r.triggerIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notin", r.triggerIdNotin, "form", "")
	}
	if r.triggerIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__like", r.triggerIdLike, "form", "")
	}
	if r.triggerIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notlike", r.triggerIdNotlike, "form", "")
	}
	if r.triggerIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__ilike", r.triggerIdIlike, "form", "")
	}
	if r.triggerIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__notilike", r.triggerIdNotilike, "form", "")
	}
	if r.triggerIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__desc", r.triggerIdDesc, "form", "")
	}
	if r.triggerIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id__asc", r.triggerIdAsc, "form", "")
	}
	if r.triggerIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id_object__desc", r.triggerIdObjectDesc, "form", "")
	}
	if r.triggerIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "trigger_id_object__asc", r.triggerIdObjectAsc, "form", "")
	}
	if r.buildOutputIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__eq", r.buildOutputIdEq, "form", "")
	}
	if r.buildOutputIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__ne", r.buildOutputIdNe, "form", "")
	}
	if r.buildOutputIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__gt", r.buildOutputIdGt, "form", "")
	}
	if r.buildOutputIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__gte", r.buildOutputIdGte, "form", "")
	}
	if r.buildOutputIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__lt", r.buildOutputIdLt, "form", "")
	}
	if r.buildOutputIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__lte", r.buildOutputIdLte, "form", "")
	}
	if r.buildOutputIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__in", r.buildOutputIdIn, "form", "")
	}
	if r.buildOutputIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__notin", r.buildOutputIdNotin, "form", "")
	}
	if r.buildOutputIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__like", r.buildOutputIdLike, "form", "")
	}
	if r.buildOutputIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__notlike", r.buildOutputIdNotlike, "form", "")
	}
	if r.buildOutputIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__ilike", r.buildOutputIdIlike, "form", "")
	}
	if r.buildOutputIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__notilike", r.buildOutputIdNotilike, "form", "")
	}
	if r.buildOutputIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__desc", r.buildOutputIdDesc, "form", "")
	}
	if r.buildOutputIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id__asc", r.buildOutputIdAsc, "form", "")
	}
	if r.buildOutputIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id_object__desc", r.buildOutputIdObjectDesc, "form", "")
	}
	if r.buildOutputIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "build_output_id_object__asc", r.buildOutputIdObjectAsc, "form", "")
	}
	if r.testOutputIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__eq", r.testOutputIdEq, "form", "")
	}
	if r.testOutputIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__ne", r.testOutputIdNe, "form", "")
	}
	if r.testOutputIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__gt", r.testOutputIdGt, "form", "")
	}
	if r.testOutputIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__gte", r.testOutputIdGte, "form", "")
	}
	if r.testOutputIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__lt", r.testOutputIdLt, "form", "")
	}
	if r.testOutputIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__lte", r.testOutputIdLte, "form", "")
	}
	if r.testOutputIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__in", r.testOutputIdIn, "form", "")
	}
	if r.testOutputIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__notin", r.testOutputIdNotin, "form", "")
	}
	if r.testOutputIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__like", r.testOutputIdLike, "form", "")
	}
	if r.testOutputIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__notlike", r.testOutputIdNotlike, "form", "")
	}
	if r.testOutputIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__ilike", r.testOutputIdIlike, "form", "")
	}
	if r.testOutputIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__notilike", r.testOutputIdNotilike, "form", "")
	}
	if r.testOutputIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__desc", r.testOutputIdDesc, "form", "")
	}
	if r.testOutputIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id__asc", r.testOutputIdAsc, "form", "")
	}
	if r.testOutputIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id_object__desc", r.testOutputIdObjectDesc, "form", "")
	}
	if r.testOutputIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "test_output_id_object__asc", r.testOutputIdObjectAsc, "form", "")
	}
	if r.publishOutputIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__eq", r.publishOutputIdEq, "form", "")
	}
	if r.publishOutputIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__ne", r.publishOutputIdNe, "form", "")
	}
	if r.publishOutputIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__gt", r.publishOutputIdGt, "form", "")
	}
	if r.publishOutputIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__gte", r.publishOutputIdGte, "form", "")
	}
	if r.publishOutputIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__lt", r.publishOutputIdLt, "form", "")
	}
	if r.publishOutputIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__lte", r.publishOutputIdLte, "form", "")
	}
	if r.publishOutputIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__in", r.publishOutputIdIn, "form", "")
	}
	if r.publishOutputIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__notin", r.publishOutputIdNotin, "form", "")
	}
	if r.publishOutputIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__like", r.publishOutputIdLike, "form", "")
	}
	if r.publishOutputIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__notlike", r.publishOutputIdNotlike, "form", "")
	}
	if r.publishOutputIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__ilike", r.publishOutputIdIlike, "form", "")
	}
	if r.publishOutputIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__notilike", r.publishOutputIdNotilike, "form", "")
	}
	if r.publishOutputIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__desc", r.publishOutputIdDesc, "form", "")
	}
	if r.publishOutputIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id__asc", r.publishOutputIdAsc, "form", "")
	}
	if r.publishOutputIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id_object__desc", r.publishOutputIdObjectDesc, "form", "")
	}
	if r.publishOutputIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "publish_output_id_object__asc", r.publishOutputIdObjectAsc, "form", "")
	}
	if r.deployOutputIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__eq", r.deployOutputIdEq, "form", "")
	}
	if r.deployOutputIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__ne", r.deployOutputIdNe, "form", "")
	}
	if r.deployOutputIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__gt", r.deployOutputIdGt, "form", "")
	}
	if r.deployOutputIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__gte", r.deployOutputIdGte, "form", "")
	}
	if r.deployOutputIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__lt", r.deployOutputIdLt, "form", "")
	}
	if r.deployOutputIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__lte", r.deployOutputIdLte, "form", "")
	}
	if r.deployOutputIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__in", r.deployOutputIdIn, "form", "")
	}
	if r.deployOutputIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__notin", r.deployOutputIdNotin, "form", "")
	}
	if r.deployOutputIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__like", r.deployOutputIdLike, "form", "")
	}
	if r.deployOutputIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__notlike", r.deployOutputIdNotlike, "form", "")
	}
	if r.deployOutputIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__ilike", r.deployOutputIdIlike, "form", "")
	}
	if r.deployOutputIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__notilike", r.deployOutputIdNotilike, "form", "")
	}
	if r.deployOutputIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__desc", r.deployOutputIdDesc, "form", "")
	}
	if r.deployOutputIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id__asc", r.deployOutputIdAsc, "form", "")
	}
	if r.deployOutputIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id_object__desc", r.deployOutputIdObjectDesc, "form", "")
	}
	if r.deployOutputIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "deploy_output_id_object__asc", r.deployOutputIdObjectAsc, "form", "")
	}
	if r.validateOutputIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__eq", r.validateOutputIdEq, "form", "")
	}
	if r.validateOutputIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__ne", r.validateOutputIdNe, "form", "")
	}
	if r.validateOutputIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__gt", r.validateOutputIdGt, "form", "")
	}
	if r.validateOutputIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__gte", r.validateOutputIdGte, "form", "")
	}
	if r.validateOutputIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__lt", r.validateOutputIdLt, "form", "")
	}
	if r.validateOutputIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__lte", r.validateOutputIdLte, "form", "")
	}
	if r.validateOutputIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__in", r.validateOutputIdIn, "form", "")
	}
	if r.validateOutputIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__notin", r.validateOutputIdNotin, "form", "")
	}
	if r.validateOutputIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__like", r.validateOutputIdLike, "form", "")
	}
	if r.validateOutputIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__notlike", r.validateOutputIdNotlike, "form", "")
	}
	if r.validateOutputIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__ilike", r.validateOutputIdIlike, "form", "")
	}
	if r.validateOutputIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__notilike", r.validateOutputIdNotilike, "form", "")
	}
	if r.validateOutputIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__desc", r.validateOutputIdDesc, "form", "")
	}
	if r.validateOutputIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id__asc", r.validateOutputIdAsc, "form", "")
	}
	if r.validateOutputIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id_object__desc", r.validateOutputIdObjectDesc, "form", "")
	}
	if r.validateOutputIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "validate_output_id_object__asc", r.validateOutputIdObjectAsc, "form", "")
	}
	if r.jobIdEq != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__eq", r.jobIdEq, "form", "")
	}
	if r.jobIdNe != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__ne", r.jobIdNe, "form", "")
	}
	if r.jobIdGt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__gt", r.jobIdGt, "form", "")
	}
	if r.jobIdGte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__gte", r.jobIdGte, "form", "")
	}
	if r.jobIdLt != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__lt", r.jobIdLt, "form", "")
	}
	if r.jobIdLte != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__lte", r.jobIdLte, "form", "")
	}
	if r.jobIdIn != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__in", r.jobIdIn, "form", "")
	}
	if r.jobIdNotin != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notin", r.jobIdNotin, "form", "")
	}
	if r.jobIdLike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__like", r.jobIdLike, "form", "")
	}
	if r.jobIdNotlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notlike", r.jobIdNotlike, "form", "")
	}
	if r.jobIdIlike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__ilike", r.jobIdIlike, "form", "")
	}
	if r.jobIdNotilike != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__notilike", r.jobIdNotilike, "form", "")
	}
	if r.jobIdDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__desc", r.jobIdDesc, "form", "")
	}
	if r.jobIdAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id__asc", r.jobIdAsc, "form", "")
	}
	if r.jobIdObjectDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id_object__desc", r.jobIdObjectDesc, "form", "")
	}
	if r.jobIdObjectAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "job_id_object__asc", r.jobIdObjectAsc, "form", "")
	}
	if r.referencedByTriggerHasExecutionExecutionIdObjectsDesc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_has_execution_execution_id_objects__desc", r.referencedByTriggerHasExecutionExecutionIdObjectsDesc, "form", "")
	}
	if r.referencedByTriggerHasExecutionExecutionIdObjectsAsc != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "referenced_by_trigger_has_execution_execution_id_objects__asc", r.referencedByTriggerHasExecutionExecutionIdObjectsAsc, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPatchExecutionRequest struct {
	ctx        context.Context
	ApiService *ExecutionAPIService
	primaryKey string
	execution  *Execution
	depth      *int64
}

func (r ApiPatchExecutionRequest) Execution(execution Execution) ApiPatchExecutionRequest {
	r.execution = &execution
	return r
}

// Query parameter depth
func (r ApiPatchExecutionRequest) Depth(depth int64) ApiPatchExecutionRequest {
	r.depth = &depth
	return r
}

func (r ApiPatchExecutionRequest) Execute() (*ResponseWithGenericOfExecution, *http.Response, error) {
	return r.ApiService.PatchExecutionExecute(r)
}

/*
PatchExecution Method for PatchExecution

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param primaryKey Path parameter primaryKey
	@return ApiPatchExecutionRequest
*/
func (a *ExecutionAPIService) PatchExecution(ctx context.Context, primaryKey string) ApiPatchExecutionRequest {
	return ApiPatchExecutionRequest{
		ApiService: a,
		ctx:        ctx,
		primaryKey: primaryKey,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfExecution
func (a *ExecutionAPIService) PatchExecutionExecute(r ApiPatchExecutionRequest) (*ResponseWithGenericOfExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionAPIService.PatchExecution")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/executions/{primaryKey}"
	localVarPath = strings.Replace(localVarPath, "{"+"primaryKey"+"}", url.PathEscape(parameterValueToString(r.primaryKey, "primaryKey")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.execution == nil {
		return localVarReturnValue, nil, reportError("execution is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.execution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiPostExecutionsRequest struct {
	ctx        context.Context
	ApiService *ExecutionAPIService
	execution  *[]Execution
	depth      *int64
}

func (r ApiPostExecutionsRequest) Execution(execution []Execution) ApiPostExecutionsRequest {
	r.execution = &execution
	return r
}

// Query parameter depth
func (r ApiPostExecutionsRequest) Depth(depth int64) ApiPostExecutionsRequest {
	r.depth = &depth
	return r
}

func (r ApiPostExecutionsRequest) Execute() (*ResponseWithGenericOfExecution, *http.Response, error) {
	return r.ApiService.PostExecutionsExecute(r)
}

/*
PostExecutions Method for PostExecutions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiPostExecutionsRequest
*/
func (a *ExecutionAPIService) PostExecutions(ctx context.Context) ApiPostExecutionsRequest {
	return ApiPostExecutionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return ResponseWithGenericOfExecution
func (a *ExecutionAPIService) PostExecutionsExecute(r ApiPostExecutionsRequest) (*ResponseWithGenericOfExecution, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ResponseWithGenericOfExecution
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ExecutionAPIService.PostExecutions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/executions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.execution == nil {
		return localVarReturnValue, nil, reportError("execution is required and must be specified")
	}

	if r.depth != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "depth", r.depth, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.execution
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v GetChangesDefaultResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
