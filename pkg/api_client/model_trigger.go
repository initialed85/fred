/*
Djangolang

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api_client

import (
	"encoding/json"
	"time"
)

// checks if the Trigger type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Trigger{}

// Trigger struct for Trigger
type Trigger struct {
	ChangeId                                        *string               `json:"change_id,omitempty"`
	ChangeIdObject                                  *Change               `json:"change_id_object,omitempty"`
	CreatedAt                                       *time.Time            `json:"created_at,omitempty"`
	DeletedAt                                       *time.Time            `json:"deleted_at,omitempty"`
	Id                                              *string               `json:"id,omitempty"`
	ReferencedByExecutionTriggerIdObjects           []Execution           `json:"referenced_by_execution_trigger_id_objects,omitempty"`
	ReferencedByTriggerHasExecutionTriggerIdObjects []TriggerHasExecution `json:"referenced_by_trigger_has_execution_trigger_id_objects,omitempty"`
	RuleId                                          *string               `json:"rule_id,omitempty"`
	RuleIdObject                                    *Rule                 `json:"rule_id_object,omitempty"`
	UpdatedAt                                       *time.Time            `json:"updated_at,omitempty"`
}

// NewTrigger instantiates a new Trigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrigger() *Trigger {
	this := Trigger{}
	return &this
}

// NewTriggerWithDefaults instantiates a new Trigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTriggerWithDefaults() *Trigger {
	this := Trigger{}
	return &this
}

// GetChangeId returns the ChangeId field value if set, zero value otherwise.
func (o *Trigger) GetChangeId() string {
	if o == nil || IsNil(o.ChangeId) {
		var ret string
		return ret
	}
	return *o.ChangeId
}

// GetChangeIdOk returns a tuple with the ChangeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetChangeIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChangeId) {
		return nil, false
	}
	return o.ChangeId, true
}

// HasChangeId returns a boolean if a field has been set.
func (o *Trigger) HasChangeId() bool {
	if o != nil && !IsNil(o.ChangeId) {
		return true
	}

	return false
}

// SetChangeId gets a reference to the given string and assigns it to the ChangeId field.
func (o *Trigger) SetChangeId(v string) {
	o.ChangeId = &v
}

// GetChangeIdObject returns the ChangeIdObject field value if set, zero value otherwise.
func (o *Trigger) GetChangeIdObject() Change {
	if o == nil || IsNil(o.ChangeIdObject) {
		var ret Change
		return ret
	}
	return *o.ChangeIdObject
}

// GetChangeIdObjectOk returns a tuple with the ChangeIdObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetChangeIdObjectOk() (*Change, bool) {
	if o == nil || IsNil(o.ChangeIdObject) {
		return nil, false
	}
	return o.ChangeIdObject, true
}

// HasChangeIdObject returns a boolean if a field has been set.
func (o *Trigger) HasChangeIdObject() bool {
	if o != nil && !IsNil(o.ChangeIdObject) {
		return true
	}

	return false
}

// SetChangeIdObject gets a reference to the given Change and assigns it to the ChangeIdObject field.
func (o *Trigger) SetChangeIdObject(v Change) {
	o.ChangeIdObject = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *Trigger) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *Trigger) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *Trigger) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise.
func (o *Trigger) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DeletedAt) {
		return nil, false
	}
	return o.DeletedAt, true
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *Trigger) HasDeletedAt() bool {
	if o != nil && !IsNil(o.DeletedAt) {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given time.Time and assigns it to the DeletedAt field.
func (o *Trigger) SetDeletedAt(v time.Time) {
	o.DeletedAt = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Trigger) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Trigger) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Trigger) SetId(v string) {
	o.Id = &v
}

// GetReferencedByExecutionTriggerIdObjects returns the ReferencedByExecutionTriggerIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetReferencedByExecutionTriggerIdObjects() []Execution {
	if o == nil {
		var ret []Execution
		return ret
	}
	return o.ReferencedByExecutionTriggerIdObjects
}

// GetReferencedByExecutionTriggerIdObjectsOk returns a tuple with the ReferencedByExecutionTriggerIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetReferencedByExecutionTriggerIdObjectsOk() ([]Execution, bool) {
	if o == nil || IsNil(o.ReferencedByExecutionTriggerIdObjects) {
		return nil, false
	}
	return o.ReferencedByExecutionTriggerIdObjects, true
}

// HasReferencedByExecutionTriggerIdObjects returns a boolean if a field has been set.
func (o *Trigger) HasReferencedByExecutionTriggerIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByExecutionTriggerIdObjects) {
		return true
	}

	return false
}

// SetReferencedByExecutionTriggerIdObjects gets a reference to the given []Execution and assigns it to the ReferencedByExecutionTriggerIdObjects field.
func (o *Trigger) SetReferencedByExecutionTriggerIdObjects(v []Execution) {
	o.ReferencedByExecutionTriggerIdObjects = v
}

// GetReferencedByTriggerHasExecutionTriggerIdObjects returns the ReferencedByTriggerHasExecutionTriggerIdObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Trigger) GetReferencedByTriggerHasExecutionTriggerIdObjects() []TriggerHasExecution {
	if o == nil {
		var ret []TriggerHasExecution
		return ret
	}
	return o.ReferencedByTriggerHasExecutionTriggerIdObjects
}

// GetReferencedByTriggerHasExecutionTriggerIdObjectsOk returns a tuple with the ReferencedByTriggerHasExecutionTriggerIdObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Trigger) GetReferencedByTriggerHasExecutionTriggerIdObjectsOk() ([]TriggerHasExecution, bool) {
	if o == nil || IsNil(o.ReferencedByTriggerHasExecutionTriggerIdObjects) {
		return nil, false
	}
	return o.ReferencedByTriggerHasExecutionTriggerIdObjects, true
}

// HasReferencedByTriggerHasExecutionTriggerIdObjects returns a boolean if a field has been set.
func (o *Trigger) HasReferencedByTriggerHasExecutionTriggerIdObjects() bool {
	if o != nil && !IsNil(o.ReferencedByTriggerHasExecutionTriggerIdObjects) {
		return true
	}

	return false
}

// SetReferencedByTriggerHasExecutionTriggerIdObjects gets a reference to the given []TriggerHasExecution and assigns it to the ReferencedByTriggerHasExecutionTriggerIdObjects field.
func (o *Trigger) SetReferencedByTriggerHasExecutionTriggerIdObjects(v []TriggerHasExecution) {
	o.ReferencedByTriggerHasExecutionTriggerIdObjects = v
}

// GetRuleId returns the RuleId field value if set, zero value otherwise.
func (o *Trigger) GetRuleId() string {
	if o == nil || IsNil(o.RuleId) {
		var ret string
		return ret
	}
	return *o.RuleId
}

// GetRuleIdOk returns a tuple with the RuleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetRuleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RuleId) {
		return nil, false
	}
	return o.RuleId, true
}

// HasRuleId returns a boolean if a field has been set.
func (o *Trigger) HasRuleId() bool {
	if o != nil && !IsNil(o.RuleId) {
		return true
	}

	return false
}

// SetRuleId gets a reference to the given string and assigns it to the RuleId field.
func (o *Trigger) SetRuleId(v string) {
	o.RuleId = &v
}

// GetRuleIdObject returns the RuleIdObject field value if set, zero value otherwise.
func (o *Trigger) GetRuleIdObject() Rule {
	if o == nil || IsNil(o.RuleIdObject) {
		var ret Rule
		return ret
	}
	return *o.RuleIdObject
}

// GetRuleIdObjectOk returns a tuple with the RuleIdObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetRuleIdObjectOk() (*Rule, bool) {
	if o == nil || IsNil(o.RuleIdObject) {
		return nil, false
	}
	return o.RuleIdObject, true
}

// HasRuleIdObject returns a boolean if a field has been set.
func (o *Trigger) HasRuleIdObject() bool {
	if o != nil && !IsNil(o.RuleIdObject) {
		return true
	}

	return false
}

// SetRuleIdObject gets a reference to the given Rule and assigns it to the RuleIdObject field.
func (o *Trigger) SetRuleIdObject(v Rule) {
	o.RuleIdObject = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *Trigger) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Trigger) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *Trigger) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *Trigger) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o Trigger) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Trigger) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChangeId) {
		toSerialize["change_id"] = o.ChangeId
	}
	if !IsNil(o.ChangeIdObject) {
		toSerialize["change_id_object"] = o.ChangeIdObject
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.DeletedAt) {
		toSerialize["deleted_at"] = o.DeletedAt
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.ReferencedByExecutionTriggerIdObjects != nil {
		toSerialize["referenced_by_execution_trigger_id_objects"] = o.ReferencedByExecutionTriggerIdObjects
	}
	if o.ReferencedByTriggerHasExecutionTriggerIdObjects != nil {
		toSerialize["referenced_by_trigger_has_execution_trigger_id_objects"] = o.ReferencedByTriggerHasExecutionTriggerIdObjects
	}
	if !IsNil(o.RuleId) {
		toSerialize["rule_id"] = o.RuleId
	}
	if !IsNil(o.RuleIdObject) {
		toSerialize["rule_id_object"] = o.RuleIdObject
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableTrigger struct {
	value *Trigger
	isSet bool
}

func (v NullableTrigger) Get() *Trigger {
	return v.value
}

func (v *NullableTrigger) Set(val *Trigger) {
	v.value = val
	v.isSet = true
}

func (v NullableTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrigger(val *Trigger) *NullableTrigger {
	return &NullableTrigger{value: val, isSet: true}
}

func (v NullableTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
